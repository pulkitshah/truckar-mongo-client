{"ast":null,"code":"import _slicedToArray from \"/Users/pulkitshah/Desktop/truckarv2/node_modules/next/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _regeneratorRuntime from \"/Users/pulkitshah/Desktop/truckarv2/node_modules/next/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/pulkitshah/Desktop/truckarv2/node_modules/next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/pulkitshah/Desktop/truckarv2/renderer/graphql/RealmApolloProvider.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { useRealmApp } from \"../../renderer/contexts/jwt-context\";\nimport { ApolloClient, HttpLink, InMemoryCache, ApolloProvider } from \"@apollo/client\"; // Create an ApolloClient that connects to the provided Realm.App's GraphQL API\n\nvar createRealmApolloClient = function createRealmApolloClient(app) {\n  var link = new HttpLink({\n    // Realm apps use a standard GraphQL endpoint, identified by their App ID\n    uri: \"https://realm.mongodb.com/api/client/v2.0/app/\".concat(app.id, \"/graphql\"),\n    // A custom fetch handler adds the logged in user's access token to GraphQL requests\n    fetch: function (_fetch) {\n      function fetch(_x, _x2) {\n        return _fetch.apply(this, arguments);\n      }\n\n      fetch.toString = function () {\n        return _fetch.toString();\n      };\n\n      return fetch;\n    }( /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(uri, options) {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (app.currentUser) {\n                  _context.next = 2;\n                  break;\n                }\n\n                throw new Error(\"Must be logged in to use the GraphQL API\");\n\n              case 2:\n                _context.next = 4;\n                return app.currentUser.refreshCustomData();\n\n              case 4:\n                // The handler adds a bearer token Authorization header to the otherwise unchanged request\n                options.headers.Authorization = \"Bearer \".concat(app.currentUser.accessToken);\n                return _context.abrupt(\"return\", fetch(uri, options));\n\n              case 6:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function (_x3, _x4) {\n        return _ref.apply(this, arguments);\n      };\n    }()),\n    connectToDevTools: true\n  });\n  var cache = new InMemoryCache();\n  return new ApolloClient({\n    link: link,\n    cache: cache\n  });\n};\n\nexport default function RealmApolloProvider(_ref2) {\n  _s();\n\n  var children = _ref2.children;\n  var app = useRealmApp();\n\n  var _React$useState = React.useState(createRealmApolloClient(app)),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      client = _React$useState2[0],\n      setClient = _React$useState2[1];\n\n  React.useEffect(function () {\n    setClient(createRealmApolloClient(app));\n  }, [app]);\n  return /*#__PURE__*/_jsxDEV(ApolloProvider, {\n    client: client,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 10\n  }, this);\n}\n\n_s(RealmApolloProvider, \"4hx4mCZvR7WTh4LyrTFYs5YWjAc=\", false, function () {\n  return [useRealmApp];\n});\n\n_c = RealmApolloProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"RealmApolloProvider\");","map":{"version":3,"sources":["/Users/pulkitshah/Desktop/truckarv2/renderer/graphql/RealmApolloProvider.js"],"names":["React","useRealmApp","ApolloClient","HttpLink","InMemoryCache","ApolloProvider","createRealmApolloClient","app","link","uri","id","fetch","options","currentUser","Error","refreshCustomData","headers","Authorization","accessToken","connectToDevTools","cache","RealmApolloProvider","children","useState","client","setClient","useEffect"],"mappings":";;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,WAAT,QAA4B,qCAA5B;AACA,SACEC,YADF,EAEEC,QAFF,EAGEC,aAHF,EAIEC,cAJF,QAKO,gBALP,C,CAOA;;AACA,IAAMC,uBAAuB,GAAG,SAA1BA,uBAA0B,CAACC,GAAD,EAAS;AACvC,MAAMC,IAAI,GAAG,IAAIL,QAAJ,CAAa;AACxB;AACAM,IAAAA,GAAG,0DAAmDF,GAAG,CAACG,EAAvD,aAFqB;AAGxB;AACAC,IAAAA,KAAK;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,0EAAE,iBAAOF,GAAP,EAAYG,OAAZ;AAAA;AAAA;AAAA;AAAA;AAAA,oBACAL,GAAG,CAACM,WADJ;AAAA;AAAA;AAAA;;AAAA,sBAEG,IAAIC,KAAJ,4CAFH;;AAAA;AAAA;AAAA,uBAKCP,GAAG,CAACM,WAAJ,CAAgBE,iBAAhB,EALD;;AAAA;AAML;AACAH,gBAAAA,OAAO,CAACI,OAAR,CAAgBC,aAAhB,oBAA0CV,GAAG,CAACM,WAAJ,CAAgBK,WAA1D;AAPK,iDAQEP,KAAK,CAACF,GAAD,EAAMG,OAAN,CARP;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAF;;AAAA;AAAA;AAAA;AAAA,QAJmB;AAcxBO,IAAAA,iBAAiB,EAAE;AAdK,GAAb,CAAb;AAiBA,MAAMC,KAAK,GAAG,IAAIhB,aAAJ,EAAd;AAEA,SAAO,IAAIF,YAAJ,CAAiB;AAAEM,IAAAA,IAAI,EAAJA,IAAF;AAAQY,IAAAA,KAAK,EAALA;AAAR,GAAjB,CAAP;AACD,CArBD;;AAuBA,eAAe,SAASC,mBAAT,QAA2C;AAAA;;AAAA,MAAZC,QAAY,SAAZA,QAAY;AACxD,MAAMf,GAAG,GAAGN,WAAW,EAAvB;;AADwD,wBAE5BD,KAAK,CAACuB,QAAN,CAAejB,uBAAuB,CAACC,GAAD,CAAtC,CAF4B;AAAA;AAAA,MAEjDiB,MAFiD;AAAA,MAEzCC,SAFyC;;AAGxDzB,EAAAA,KAAK,CAAC0B,SAAN,CAAgB,YAAM;AACpBD,IAAAA,SAAS,CAACnB,uBAAuB,CAACC,GAAD,CAAxB,CAAT;AACD,GAFD,EAEG,CAACA,GAAD,CAFH;AAGA,sBAAO,QAAC,cAAD;AAAgB,IAAA,MAAM,EAAEiB,MAAxB;AAAA,cAAiCF;AAAjC;AAAA;AAAA;AAAA;AAAA,UAAP;AACD;;GAPuBD,mB;UACVpB,W;;;KADUoB,mB","sourcesContent":["import React from \"react\";\nimport { useRealmApp } from \"../../renderer/contexts/jwt-context\";\nimport {\n  ApolloClient,\n  HttpLink,\n  InMemoryCache,\n  ApolloProvider,\n} from \"@apollo/client\";\n\n// Create an ApolloClient that connects to the provided Realm.App's GraphQL API\nconst createRealmApolloClient = (app) => {\n  const link = new HttpLink({\n    // Realm apps use a standard GraphQL endpoint, identified by their App ID\n    uri: `https://realm.mongodb.com/api/client/v2.0/app/${app.id}/graphql`,\n    // A custom fetch handler adds the logged in user's access token to GraphQL requests\n    fetch: async (uri, options) => {\n      if (!app.currentUser) {\n        throw new Error(`Must be logged in to use the GraphQL API`);\n      }\n      // Refreshing a user's custom data also refreshes their access token\n      await app.currentUser.refreshCustomData();\n      // The handler adds a bearer token Authorization header to the otherwise unchanged request\n      options.headers.Authorization = `Bearer ${app.currentUser.accessToken}`;\n      return fetch(uri, options);\n    },\n    connectToDevTools: true,\n  });\n\n  const cache = new InMemoryCache();\n\n  return new ApolloClient({ link, cache });\n};\n\nexport default function RealmApolloProvider({ children }) {\n  const app = useRealmApp();\n  const [client, setClient] = React.useState(createRealmApolloClient(app));\n  React.useEffect(() => {\n    setClient(createRealmApolloClient(app));\n  }, [app]);\n  return <ApolloProvider client={client}>{children}</ApolloProvider>;\n}\n"]},"metadata":{},"sourceType":"module"}