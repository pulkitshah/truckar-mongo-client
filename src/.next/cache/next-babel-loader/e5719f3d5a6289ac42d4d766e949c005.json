{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/pulkitshah/Desktop/truckarv2/renderer/contexts/jwt-context.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { createContext, useEffect, useState, useReducer } from \"react\";\nimport PropTypes from \"prop-types\";\nimport * as Realm from \"realm-web\";\nimport { authApi } from \"../api/auth-api\";\nimport axios from \"../utils/axios\";\nconst initialState = {\n  isAuthenticated: false,\n  isInitialized: false,\n  user: null\n};\nconst handlers = {\n  INITIALIZE: (state, action) => {\n    const {\n      isAuthenticated,\n      user\n    } = action.payload;\n    return _objectSpread(_objectSpread({}, state), {}, {\n      isAuthenticated,\n      isInitialized: true,\n      user\n    });\n  },\n  LOGIN: (state, action) => {\n    const {\n      user\n    } = action.payload;\n    return _objectSpread(_objectSpread({}, state), {}, {\n      isAuthenticated: true,\n      user\n    });\n  },\n  LOGOUT: state => _objectSpread(_objectSpread({}, state), {}, {\n    isAuthenticated: false,\n    user: null\n  }),\n  REGISTER: (state, action) => {\n    const {\n      user\n    } = action.payload;\n    return _objectSpread(_objectSpread({}, state), {}, {\n      isAuthenticated: true,\n      user\n    });\n  }\n};\n\nconst setSession = accessToken => {\n  if (accessToken) {\n    localStorage.setItem(\"accessToken\", accessToken);\n    axios.defaults.headers.common[\"x-auth-token\"] = accessToken;\n  } else {\n    localStorage.removeItem(\"accessToken\");\n    delete axios.defaults.headers.common[\"x-auth-token\"];\n  }\n};\n\nconst reducer = (state, action) => handlers[action.type] ? handlers[action.type](state, action) : state;\n\nexport const AuthContext = /*#__PURE__*/createContext(_objectSpread(_objectSpread({}, initialState), {}, {\n  platform: \"JWT\",\n  login: () => Promise.resolve(),\n  logout: () => Promise.resolve(),\n  register: () => Promise.resolve()\n}));\nexport const useRealmApp = () => {\n  const app = React.useContext(AuthContext);\n\n  if (!app) {\n    throw new Error(`You must call useRealmApp() inside of a <RealmAppProvider />`);\n  }\n\n  return app;\n};\nexport const AuthProvider = props => {\n  const {\n    appId,\n    children\n  } = props;\n  const {\n    0: state,\n    1: dispatch\n  } = useReducer(reducer, initialState);\n  const {\n    0: app,\n    1: setApp\n  } = useState(new Realm.App(appId));\n  useEffect(() => {\n    const initialize = async () => {\n      try {\n        const accessToken = window.localStorage.getItem(\"accessToken\");\n\n        if (accessToken) {\n          setSession(accessToken);\n          console.log(accessToken);\n          const response = await authApi.me(accessToken);\n          const user = response.data;\n          dispatch({\n            type: \"INITIALIZE\",\n            payload: {\n              isAuthenticated: true,\n              user\n            }\n          });\n        } else {\n          dispatch({\n            type: \"INITIALIZE\",\n            payload: {\n              isAuthenticated: false,\n              user: null\n            }\n          });\n        }\n      } catch (err) {\n        console.error(err);\n        dispatch({\n          type: \"INITIALIZE\",\n          payload: {\n            isAuthenticated: false,\n            user: null\n          }\n        });\n      }\n    };\n\n    initialize();\n  }, []);\n  React.useEffect(() => {\n    setApp(new Realm.App(appId));\n  }, [appId]);\n  const [currentUser, setCurrentUser] = React.useState(app.currentUser);\n\n  const login = async (email, password) => {\n    const response = await authApi.login({\n      email,\n      password\n    });\n    const {\n      accessToken,\n      user\n    } = response.data;\n    setSession(accessToken);\n    const jwt = Realm.Credentials.jwt(accessToken);\n\n    try {\n      const userRealm = await app.logIn(jwt); // If successful, app.currentUser is the user that just logged in\n\n      setCurrentUser(app.currentUser);\n      console.log(\"Successfully logged in!\", userRealm.id);\n      console.log(userRealm);\n    } catch (err) {\n      console.error(\"Failed to log in\", err.message);\n    }\n\n    console.log(user);\n    dispatch({\n      type: \"LOGIN\",\n      payload: {\n        user\n      }\n    });\n  };\n\n  const logout = async () => {\n    var _app$currentUser;\n\n    localStorage.removeItem(\"accessToken\");\n    dispatch({\n      type: \"LOGOUT\"\n    });\n    await ((_app$currentUser = app.currentUser) === null || _app$currentUser === void 0 ? void 0 : _app$currentUser.logOut()); // setCurrentUser(app.currentUser);\n  };\n\n  const register = async (email, name, password) => {\n    const accessToken = await authApi.register({\n      email,\n      name,\n      password\n    });\n    const user = await authApi.me(accessToken);\n    localStorage.setItem(\"accessToken\", accessToken);\n    dispatch({\n      type: \"REGISTER\",\n      payload: {\n        user\n      }\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: _objectSpread(_objectSpread(_objectSpread({}, app), {}, {\n      currentUser\n    }, state), {}, {\n      platform: \"JWT\",\n      login,\n      logout,\n      register\n    }),\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 178,\n    columnNumber: 5\n  }, this);\n};\nAuthProvider.propTypes = {\n  children: PropTypes.node.isRequired\n};\nexport const AuthConsumer = AuthContext.Consumer;","map":{"version":3,"sources":["/Users/pulkitshah/Desktop/truckarv2/renderer/contexts/jwt-context.js"],"names":["React","createContext","useEffect","useState","useReducer","PropTypes","Realm","authApi","axios","initialState","isAuthenticated","isInitialized","user","handlers","INITIALIZE","state","action","payload","LOGIN","LOGOUT","REGISTER","setSession","accessToken","localStorage","setItem","defaults","headers","common","removeItem","reducer","type","AuthContext","platform","login","Promise","resolve","logout","register","useRealmApp","app","useContext","Error","AuthProvider","props","appId","children","dispatch","setApp","App","initialize","window","getItem","console","log","response","me","data","err","error","currentUser","setCurrentUser","email","password","jwt","Credentials","userRealm","logIn","id","message","logOut","name","propTypes","node","isRequired","AuthConsumer","Consumer"],"mappings":";;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,aAAhB,EAA+BC,SAA/B,EAA0CC,QAA1C,EAAoDC,UAApD,QAAsE,OAAtE;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAO,KAAKC,KAAZ,MAAuB,WAAvB;AACA,SAASC,OAAT,QAAwB,iBAAxB;AACA,OAAOC,KAAP,MAAkB,gBAAlB;AAEA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,eAAe,EAAE,KADE;AAEnBC,EAAAA,aAAa,EAAE,KAFI;AAGnBC,EAAAA,IAAI,EAAE;AAHa,CAArB;AAMA,MAAMC,QAAQ,GAAG;AACfC,EAAAA,UAAU,EAAE,CAACC,KAAD,EAAQC,MAAR,KAAmB;AAC7B,UAAM;AAAEN,MAAAA,eAAF;AAAmBE,MAAAA;AAAnB,QAA4BI,MAAM,CAACC,OAAzC;AAEA,2CACKF,KADL;AAEEL,MAAAA,eAFF;AAGEC,MAAAA,aAAa,EAAE,IAHjB;AAIEC,MAAAA;AAJF;AAMD,GAVc;AAWfM,EAAAA,KAAK,EAAE,CAACH,KAAD,EAAQC,MAAR,KAAmB;AACxB,UAAM;AAAEJ,MAAAA;AAAF,QAAWI,MAAM,CAACC,OAAxB;AAEA,2CACKF,KADL;AAEEL,MAAAA,eAAe,EAAE,IAFnB;AAGEE,MAAAA;AAHF;AAKD,GAnBc;AAoBfO,EAAAA,MAAM,EAAGJ,KAAD,oCACHA,KADG;AAENL,IAAAA,eAAe,EAAE,KAFX;AAGNE,IAAAA,IAAI,EAAE;AAHA,IApBO;AAyBfQ,EAAAA,QAAQ,EAAE,CAACL,KAAD,EAAQC,MAAR,KAAmB;AAC3B,UAAM;AAAEJ,MAAAA;AAAF,QAAWI,MAAM,CAACC,OAAxB;AAEA,2CACKF,KADL;AAEEL,MAAAA,eAAe,EAAE,IAFnB;AAGEE,MAAAA;AAHF;AAKD;AAjCc,CAAjB;;AAoCA,MAAMS,UAAU,GAAIC,WAAD,IAAiB;AAClC,MAAIA,WAAJ,EAAiB;AACfC,IAAAA,YAAY,CAACC,OAAb,CAAqB,aAArB,EAAoCF,WAApC;AACAd,IAAAA,KAAK,CAACiB,QAAN,CAAeC,OAAf,CAAuBC,MAAvB,CAA8B,cAA9B,IAAgDL,WAAhD;AACD,GAHD,MAGO;AACLC,IAAAA,YAAY,CAACK,UAAb,CAAwB,aAAxB;AACA,WAAOpB,KAAK,CAACiB,QAAN,CAAeC,OAAf,CAAuBC,MAAvB,CAA8B,cAA9B,CAAP;AACD;AACF,CARD;;AAUA,MAAME,OAAO,GAAG,CAACd,KAAD,EAAQC,MAAR,KACdH,QAAQ,CAACG,MAAM,CAACc,IAAR,CAAR,GAAwBjB,QAAQ,CAACG,MAAM,CAACc,IAAR,CAAR,CAAsBf,KAAtB,EAA6BC,MAA7B,CAAxB,GAA+DD,KADjE;;AAGA,OAAO,MAAMgB,WAAW,gBAAG9B,aAAa,iCACnCQ,YADmC;AAEtCuB,EAAAA,QAAQ,EAAE,KAF4B;AAGtCC,EAAAA,KAAK,EAAE,MAAMC,OAAO,CAACC,OAAR,EAHyB;AAItCC,EAAAA,MAAM,EAAE,MAAMF,OAAO,CAACC,OAAR,EAJwB;AAKtCE,EAAAA,QAAQ,EAAE,MAAMH,OAAO,CAACC,OAAR;AALsB,GAAjC;AAQP,OAAO,MAAMG,WAAW,GAAG,MAAM;AAC/B,QAAMC,GAAG,GAAGvC,KAAK,CAACwC,UAAN,CAAiBT,WAAjB,CAAZ;;AACA,MAAI,CAACQ,GAAL,EAAU;AACR,UAAM,IAAIE,KAAJ,CACH,8DADG,CAAN;AAGD;;AACD,SAAOF,GAAP;AACD,CARM;AASP,OAAO,MAAMG,YAAY,GAAIC,KAAD,IAAW;AACrC,QAAM;AAAEC,IAAAA,KAAF;AAASC,IAAAA;AAAT,MAAsBF,KAA5B;AACA,QAAM;AAAA,OAAC5B,KAAD;AAAA,OAAQ+B;AAAR,MAAoB1C,UAAU,CAACyB,OAAD,EAAUpB,YAAV,CAApC;AACA,QAAM;AAAA,OAAC8B,GAAD;AAAA,OAAMQ;AAAN,MAAgB5C,QAAQ,CAAC,IAAIG,KAAK,CAAC0C,GAAV,CAAcJ,KAAd,CAAD,CAA9B;AAEA1C,EAAAA,SAAS,CAAC,MAAM;AACd,UAAM+C,UAAU,GAAG,YAAY;AAC7B,UAAI;AACF,cAAM3B,WAAW,GAAG4B,MAAM,CAAC3B,YAAP,CAAoB4B,OAApB,CAA4B,aAA5B,CAApB;;AAEA,YAAI7B,WAAJ,EAAiB;AACfD,UAAAA,UAAU,CAACC,WAAD,CAAV;AACA8B,UAAAA,OAAO,CAACC,GAAR,CAAY/B,WAAZ;AACA,gBAAMgC,QAAQ,GAAG,MAAM/C,OAAO,CAACgD,EAAR,CAAWjC,WAAX,CAAvB;AACA,gBAAMV,IAAI,GAAG0C,QAAQ,CAACE,IAAtB;AACAV,UAAAA,QAAQ,CAAC;AACPhB,YAAAA,IAAI,EAAE,YADC;AAEPb,YAAAA,OAAO,EAAE;AACPP,cAAAA,eAAe,EAAE,IADV;AAEPE,cAAAA;AAFO;AAFF,WAAD,CAAR;AAOD,SAZD,MAYO;AACLkC,UAAAA,QAAQ,CAAC;AACPhB,YAAAA,IAAI,EAAE,YADC;AAEPb,YAAAA,OAAO,EAAE;AACPP,cAAAA,eAAe,EAAE,KADV;AAEPE,cAAAA,IAAI,EAAE;AAFC;AAFF,WAAD,CAAR;AAOD;AACF,OAxBD,CAwBE,OAAO6C,GAAP,EAAY;AACZL,QAAAA,OAAO,CAACM,KAAR,CAAcD,GAAd;AACAX,QAAAA,QAAQ,CAAC;AACPhB,UAAAA,IAAI,EAAE,YADC;AAEPb,UAAAA,OAAO,EAAE;AACPP,YAAAA,eAAe,EAAE,KADV;AAEPE,YAAAA,IAAI,EAAE;AAFC;AAFF,SAAD,CAAR;AAOD;AACF,KAnCD;;AAoCAqC,IAAAA,UAAU;AACX,GAtCQ,EAsCN,EAtCM,CAAT;AAwCAjD,EAAAA,KAAK,CAACE,SAAN,CAAgB,MAAM;AACpB6C,IAAAA,MAAM,CAAC,IAAIzC,KAAK,CAAC0C,GAAV,CAAcJ,KAAd,CAAD,CAAN;AACD,GAFD,EAEG,CAACA,KAAD,CAFH;AAIA,QAAM,CAACe,WAAD,EAAcC,cAAd,IAAgC5D,KAAK,CAACG,QAAN,CAAeoC,GAAG,CAACoB,WAAnB,CAAtC;;AAEA,QAAM1B,KAAK,GAAG,OAAO4B,KAAP,EAAcC,QAAd,KAA2B;AACvC,UAAMR,QAAQ,GAAG,MAAM/C,OAAO,CAAC0B,KAAR,CAAc;AAAE4B,MAAAA,KAAF;AAASC,MAAAA;AAAT,KAAd,CAAvB;AACA,UAAM;AAAExC,MAAAA,WAAF;AAAeV,MAAAA;AAAf,QAAwB0C,QAAQ,CAACE,IAAvC;AACAnC,IAAAA,UAAU,CAACC,WAAD,CAAV;AAEA,UAAMyC,GAAG,GAAGzD,KAAK,CAAC0D,WAAN,CAAkBD,GAAlB,CAAsBzC,WAAtB,CAAZ;;AAEA,QAAI;AACF,YAAM2C,SAAS,GAAG,MAAM1B,GAAG,CAAC2B,KAAJ,CAAUH,GAAV,CAAxB,CADE,CAEF;;AACAH,MAAAA,cAAc,CAACrB,GAAG,CAACoB,WAAL,CAAd;AACAP,MAAAA,OAAO,CAACC,GAAR,CAAY,yBAAZ,EAAuCY,SAAS,CAACE,EAAjD;AACAf,MAAAA,OAAO,CAACC,GAAR,CAAYY,SAAZ;AACD,KAND,CAME,OAAOR,GAAP,EAAY;AACZL,MAAAA,OAAO,CAACM,KAAR,CAAc,kBAAd,EAAkCD,GAAG,CAACW,OAAtC;AACD;;AACDhB,IAAAA,OAAO,CAACC,GAAR,CAAYzC,IAAZ;AAEAkC,IAAAA,QAAQ,CAAC;AACPhB,MAAAA,IAAI,EAAE,OADC;AAEPb,MAAAA,OAAO,EAAE;AACPL,QAAAA;AADO;AAFF,KAAD,CAAR;AAMD,GAxBD;;AA0BA,QAAMwB,MAAM,GAAG,YAAY;AAAA;;AACzBb,IAAAA,YAAY,CAACK,UAAb,CAAwB,aAAxB;AACAkB,IAAAA,QAAQ,CAAC;AAAEhB,MAAAA,IAAI,EAAE;AAAR,KAAD,CAAR;AACA,+BAAMS,GAAG,CAACoB,WAAV,qDAAM,iBAAiBU,MAAjB,EAAN,EAHyB,CAIzB;AACD,GALD;;AAOA,QAAMhC,QAAQ,GAAG,OAAOwB,KAAP,EAAcS,IAAd,EAAoBR,QAApB,KAAiC;AAChD,UAAMxC,WAAW,GAAG,MAAMf,OAAO,CAAC8B,QAAR,CAAiB;AAAEwB,MAAAA,KAAF;AAASS,MAAAA,IAAT;AAAeR,MAAAA;AAAf,KAAjB,CAA1B;AACA,UAAMlD,IAAI,GAAG,MAAML,OAAO,CAACgD,EAAR,CAAWjC,WAAX,CAAnB;AAEAC,IAAAA,YAAY,CAACC,OAAb,CAAqB,aAArB,EAAoCF,WAApC;AAEAwB,IAAAA,QAAQ,CAAC;AACPhB,MAAAA,IAAI,EAAE,UADC;AAEPb,MAAAA,OAAO,EAAE;AACPL,QAAAA;AADO;AAFF,KAAD,CAAR;AAMD,GAZD;;AAcA,sBACE,QAAC,WAAD,CAAa,QAAb;AACE,IAAA,KAAK,gDACA2B,GADA;AAEHoB,MAAAA;AAFG,OAGA5C,KAHA;AAIHiB,MAAAA,QAAQ,EAAE,KAJP;AAKHC,MAAAA,KALG;AAMHG,MAAAA,MANG;AAOHC,MAAAA;AAPG,MADP;AAAA,cAWGQ;AAXH;AAAA;AAAA;AAAA;AAAA,UADF;AAeD,CAjHM;AAmHPH,YAAY,CAAC6B,SAAb,GAAyB;AACvB1B,EAAAA,QAAQ,EAAExC,SAAS,CAACmE,IAAV,CAAeC;AADF,CAAzB;AAIA,OAAO,MAAMC,YAAY,GAAG3C,WAAW,CAAC4C,QAAjC","sourcesContent":["import React, { createContext, useEffect, useState, useReducer } from \"react\";\nimport PropTypes from \"prop-types\";\nimport * as Realm from \"realm-web\";\nimport { authApi } from \"../api/auth-api\";\nimport axios from \"../utils/axios\";\n\nconst initialState = {\n  isAuthenticated: false,\n  isInitialized: false,\n  user: null,\n};\n\nconst handlers = {\n  INITIALIZE: (state, action) => {\n    const { isAuthenticated, user } = action.payload;\n\n    return {\n      ...state,\n      isAuthenticated,\n      isInitialized: true,\n      user,\n    };\n  },\n  LOGIN: (state, action) => {\n    const { user } = action.payload;\n\n    return {\n      ...state,\n      isAuthenticated: true,\n      user,\n    };\n  },\n  LOGOUT: (state) => ({\n    ...state,\n    isAuthenticated: false,\n    user: null,\n  }),\n  REGISTER: (state, action) => {\n    const { user } = action.payload;\n\n    return {\n      ...state,\n      isAuthenticated: true,\n      user,\n    };\n  },\n};\n\nconst setSession = (accessToken) => {\n  if (accessToken) {\n    localStorage.setItem(\"accessToken\", accessToken);\n    axios.defaults.headers.common[\"x-auth-token\"] = accessToken;\n  } else {\n    localStorage.removeItem(\"accessToken\");\n    delete axios.defaults.headers.common[\"x-auth-token\"];\n  }\n};\n\nconst reducer = (state, action) =>\n  handlers[action.type] ? handlers[action.type](state, action) : state;\n\nexport const AuthContext = createContext({\n  ...initialState,\n  platform: \"JWT\",\n  login: () => Promise.resolve(),\n  logout: () => Promise.resolve(),\n  register: () => Promise.resolve(),\n});\n\nexport const useRealmApp = () => {\n  const app = React.useContext(AuthContext);\n  if (!app) {\n    throw new Error(\n      `You must call useRealmApp() inside of a <RealmAppProvider />`\n    );\n  }\n  return app;\n};\nexport const AuthProvider = (props) => {\n  const { appId, children } = props;\n  const [state, dispatch] = useReducer(reducer, initialState);\n  const [app, setApp] = useState(new Realm.App(appId));\n\n  useEffect(() => {\n    const initialize = async () => {\n      try {\n        const accessToken = window.localStorage.getItem(\"accessToken\");\n\n        if (accessToken) {\n          setSession(accessToken);\n          console.log(accessToken)\n          const response = await authApi.me(accessToken);\n          const user = response.data;\n          dispatch({\n            type: \"INITIALIZE\",\n            payload: {\n              isAuthenticated: true,\n              user,\n            },\n          });\n        } else {\n          dispatch({\n            type: \"INITIALIZE\",\n            payload: {\n              isAuthenticated: false,\n              user: null,\n            },\n          });\n        }\n      } catch (err) {\n        console.error(err);\n        dispatch({\n          type: \"INITIALIZE\",\n          payload: {\n            isAuthenticated: false,\n            user: null,\n          },\n        });\n      }\n    };\n    initialize();\n  }, []);\n\n  React.useEffect(() => {\n    setApp(new Realm.App(appId));\n  }, [appId]);\n\n  const [currentUser, setCurrentUser] = React.useState(app.currentUser);\n\n  const login = async (email, password) => {\n    const response = await authApi.login({ email, password });\n    const { accessToken, user } = response.data;\n    setSession(accessToken);\n\n    const jwt = Realm.Credentials.jwt(accessToken);\n\n    try {\n      const userRealm = await app.logIn(jwt);\n      // If successful, app.currentUser is the user that just logged in\n      setCurrentUser(app.currentUser);\n      console.log(\"Successfully logged in!\", userRealm.id);\n      console.log(userRealm);\n    } catch (err) {\n      console.error(\"Failed to log in\", err.message);\n    }\n    console.log(user);\n\n    dispatch({\n      type: \"LOGIN\",\n      payload: {\n        user,\n      },\n    });\n  };\n\n  const logout = async () => {\n    localStorage.removeItem(\"accessToken\");\n    dispatch({ type: \"LOGOUT\" });\n    await app.currentUser?.logOut();\n    // setCurrentUser(app.currentUser);\n  };\n\n  const register = async (email, name, password) => {\n    const accessToken = await authApi.register({ email, name, password });\n    const user = await authApi.me(accessToken);\n\n    localStorage.setItem(\"accessToken\", accessToken);\n\n    dispatch({\n      type: \"REGISTER\",\n      payload: {\n        user,\n      },\n    });\n  };\n\n  return (\n    <AuthContext.Provider\n      value={{\n        ...app,\n        currentUser,\n        ...state,\n        platform: \"JWT\",\n        login,\n        logout,\n        register,\n      }}\n    >\n      {children}\n    </AuthContext.Provider>\n  );\n};\n\nAuthProvider.propTypes = {\n  children: PropTypes.node.isRequired,\n};\n\nexport const AuthConsumer = AuthContext.Consumer;\n"]},"metadata":{},"sourceType":"module"}