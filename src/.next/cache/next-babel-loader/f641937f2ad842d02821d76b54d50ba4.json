{"ast":null,"code":"import _defineProperty from \"/Users/pulkitshah/Desktop/truckarv2/node_modules/next/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _regeneratorRuntime from \"/Users/pulkitshah/Desktop/truckarv2/node_modules/next/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/pulkitshah/Desktop/truckarv2/node_modules/next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/pulkitshah/Desktop/truckarv2/node_modules/next/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/pulkitshah/Desktop/truckarv2/node_modules/next/node_modules/@babel/runtime/helpers/esm/createClass\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { API } from \"aws-amplify\";\nimport { addressesByParty, addressesByUser } from \"../graphql/queries\";\nimport { createAddress, updateAddress as _updateAddress } from \"../graphql/mutations\";\nimport { Address } from \"../models\";\nimport { DataStore } from \"@aws-amplify/datastore\";\nimport moment from \"moment\";\nimport { slice } from \"../slices/addresses\";\nvar now = new Date();\n\nvar AddressApi = /*#__PURE__*/function () {\n  function AddressApi() {\n    _classCallCheck(this, AddressApi);\n  }\n\n  _createClass(AddressApi, [{\n    key: \"getAddressesByUser\",\n    value: function () {\n      var _getAddressesByUser = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(user, dispatch) {\n        var response, addresses;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.prev = 0;\n                _context.next = 3;\n                return API.graphql({\n                  query: addressesByUser,\n                  variables: {\n                    user: user.id.toString()\n                  }\n                });\n\n              case 3:\n                response = _context.sent;\n                addresses = response.data.addressesByUser.items; //////////////////////// GraphQL API ////////////////////////\n                //////////////////////// DataStore API ////////////////////////\n                // const addresses = await DataStore.query(Address, (c) =>\n                //   c.user(\"eq\", user.id)\n                // );\n                //////////////////////// DataStore API ////////////////////////\n\n                console.log(addresses); // Dispatch - Reducer\n\n                dispatch(slice.actions.getAddresses(addresses));\n                return _context.abrupt(\"return\", addresses);\n\n              case 10:\n                _context.prev = 10;\n                _context.t0 = _context[\"catch\"](0);\n                console.log(_context.t0);\n\n              case 13:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, null, [[0, 10]]);\n      }));\n\n      function getAddressesByUser(_x, _x2) {\n        return _getAddressesByUser.apply(this, arguments);\n      }\n\n      return getAddressesByUser;\n    }()\n  }, {\n    key: \"getAddressesByParty\",\n    value: function () {\n      var _getAddressesByParty = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(party, dispatch) {\n        var response, addresses;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.prev = 0;\n                //////////////////////// GraphQL API ////////////////////////\n                console.log(party.id.toString());\n                _context2.next = 4;\n                return API.graphql({\n                  query: addressesByParty,\n                  variables: {\n                    partyId: party.id.toString()\n                  }\n                });\n\n              case 4:\n                response = _context2.sent;\n                addresses = response.data.addressesByParty.items; //////////////////////// GraphQL API ////////////////////////\n                //////////////////////// DataStore API ////////////////////////\n                // const addresses = await DataStore.query(Address, (c) =>\n                //   c.user(\"eq\", user.id)\n                // );\n                //////////////////////// DataStore API ////////////////////////\n\n                console.log(addresses); // Dispatch - Reducer\n\n                dispatch(slice.actions.getAddresses(addresses));\n                return _context2.abrupt(\"return\", addresses);\n\n              case 11:\n                _context2.prev = 11;\n                _context2.t0 = _context2[\"catch\"](0);\n                console.log(_context2.t0);\n\n              case 14:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, null, [[0, 11]]);\n      }));\n\n      function getAddressesByParty(_x3, _x4) {\n        return _getAddressesByParty.apply(this, arguments);\n      }\n\n      return getAddressesByParty;\n    }()\n  }, {\n    key: \"createAddress\",\n    value: function () {\n      var _createAddress = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(createdAddress, dispatch) {\n        var createdAt, newAddress, address;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                createdAt = moment().toISOString();\n                newAddress = _objectSpread({}, createdAddress);\n                newAddress.createdAt = createdAt;\n                console.log(newAddress); //////////////////////// GraphQL API ////////////////////////\n                // const response = await API.graphql({\n                //   query: createAddress,\n                //   variables: { input: newAddress },\n                //   authMode: \"AMAZON_COGNITO_USER_POOLS\",\n                // });\n                // const address = response.data.createAddress;\n                //////////////////////// GraphQL API ////////////////////////\n                //////////////////////// DataStore API ////////////////////////\n\n                _context3.next = 6;\n                return DataStore.save(new Address(newAddress));\n\n              case 6:\n                address = _context3.sent;\n                //////////////////////// DataStore API ////////////////////////\n                // console.log(address);\n                // Dispatch - Reducer\n                dispatch(slice.actions.createAddress({\n                  address: address\n                }));\n                return _context3.abrupt(\"return\", address);\n\n              case 9:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      }));\n\n      function createAddress(_x5, _x6) {\n        return _createAddress.apply(this, arguments);\n      }\n\n      return createAddress;\n    }()\n  }, {\n    key: \"updateAddress\",\n    value: function () {\n      var _updateAddress2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(editedAddress, dispatch) {\n        var response, address;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _context4.next = 2;\n                return API.graphql({\n                  query: _updateAddress,\n                  variables: {\n                    input: editedAddress\n                  },\n                  authMode: \"AMAZON_COGNITO_USER_POOLS\"\n                });\n\n              case 2:\n                response = _context4.sent;\n                address = response.data.updateAddress; //////////////////////// GraphQL API ////////////////////////\n                // console.log(address);\n                // Dispatch - Reducer\n\n                dispatch(slice.actions.updateAddress({\n                  address: address\n                }));\n                return _context4.abrupt(\"return\", response);\n\n              case 6:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4);\n      }));\n\n      function updateAddress(_x7, _x8) {\n        return _updateAddress2.apply(this, arguments);\n      }\n\n      return updateAddress;\n    }()\n  }]);\n\n  return AddressApi;\n}();\n\nexport var addressApi = new AddressApi();","map":{"version":3,"sources":["/Users/pulkitshah/Desktop/truckarv2/renderer/api/address-api.js"],"names":["API","addressesByParty","addressesByUser","createAddress","updateAddress","Address","DataStore","moment","slice","now","Date","AddressApi","user","dispatch","graphql","query","variables","id","toString","response","addresses","data","items","console","log","actions","getAddresses","party","partyId","createdAddress","createdAt","toISOString","newAddress","save","address","editedAddress","input","authMode","addressApi"],"mappings":"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","sourcesContent":["import { API } from \"aws-amplify\";\nimport { addressesByParty, addressesByUser } from \"../graphql/queries\";\nimport { createAddress, updateAddress } from \"../graphql/mutations\";\nimport { Address } from \"../models\";\nimport { DataStore } from \"@aws-amplify/datastore\";\nimport moment from \"moment\";\nimport { slice } from \"../slices/addresses\";\n\nconst now = new Date();\n\nclass AddressApi {\n  async getAddressesByUser(user, dispatch) {\n    try {\n      //////////////////////// GraphQL API ////////////////////////\n\n      const response = await API.graphql({\n        query: addressesByUser,\n        variables: { user: user.id.toString() },\n      });\n      const addresses = response.data.addressesByUser.items;\n\n      //////////////////////// GraphQL API ////////////////////////\n\n      //////////////////////// DataStore API ////////////////////////\n\n      // const addresses = await DataStore.query(Address, (c) =>\n      //   c.user(\"eq\", user.id)\n      // );\n\n      //////////////////////// DataStore API ////////////////////////\n\n      console.log(addresses);\n\n      // Dispatch - Reducer\n\n      dispatch(slice.actions.getAddresses(addresses));\n\n      return addresses;\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  async getAddressesByParty(party, dispatch) {\n    try {\n      //////////////////////// GraphQL API ////////////////////////\n      console.log(party.id.toString());\n      const response = await API.graphql({\n        query: addressesByParty,\n        variables: { partyId: party.id.toString() },\n      });\n      const addresses = response.data.addressesByParty.items;\n\n      //////////////////////// GraphQL API ////////////////////////\n\n      //////////////////////// DataStore API ////////////////////////\n\n      // const addresses = await DataStore.query(Address, (c) =>\n      //   c.user(\"eq\", user.id)\n      // );\n\n      //////////////////////// DataStore API ////////////////////////\n\n      console.log(addresses);\n\n      // Dispatch - Reducer\n\n      dispatch(slice.actions.getAddresses(addresses));\n\n      return addresses;\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  async createAddress(createdAddress, dispatch) {\n    const createdAt = moment().toISOString();\n    let newAddress = { ...createdAddress };\n    newAddress.createdAt = createdAt;\n\n    console.log(newAddress);\n\n    //////////////////////// GraphQL API ////////////////////////\n\n    // const response = await API.graphql({\n    //   query: createAddress,\n    //   variables: { input: newAddress },\n    //   authMode: \"AMAZON_COGNITO_USER_POOLS\",\n    // });\n\n    // const address = response.data.createAddress;\n\n    //////////////////////// GraphQL API ////////////////////////\n\n    //////////////////////// DataStore API ////////////////////////\n\n    const address = await DataStore.save(new Address(newAddress));\n\n    //////////////////////// DataStore API ////////////////////////\n\n    // console.log(address);\n\n    // Dispatch - Reducer\n\n    dispatch(slice.actions.createAddress({ address }));\n\n    return address;\n  }\n\n  async updateAddress(editedAddress, dispatch) {\n    //////////////////////// GraphQL API ////////////////////////\n\n    const response = await API.graphql({\n      query: updateAddress,\n      variables: { input: editedAddress },\n      authMode: \"AMAZON_COGNITO_USER_POOLS\",\n    });\n\n    const address = response.data.updateAddress;\n\n    //////////////////////// GraphQL API ////////////////////////\n\n    // console.log(address);\n\n    // Dispatch - Reducer\n\n    dispatch(slice.actions.updateAddress({ address }));\n\n    return response;\n  }\n}\n\nexport const addressApi = new AddressApi();\n"]},"metadata":{},"sourceType":"module"}