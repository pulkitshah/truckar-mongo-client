{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/pulkitshah/Desktop/truckarv2/renderer/components/dashboard/order/delivery-details.js\";\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from \"react\";\nimport { FieldArray, getIn } from \"formik\";\nimport { Grid, Typography, Button } from \"@mui/material\";\nimport GoogleMaps from \"./google-places-autocomplete\";\n\nconst DeliveryForm = (_ref) => {\n  let {\n    formik\n  } = _ref,\n      rest = _objectWithoutProperties(_ref, [\"formik\"]);\n\n  const [noOfDeliveries, setNoOfDeliveries] = React.useState(1);\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: /*#__PURE__*/_jsxDEV(FieldArray, {\n      name: \"deliveryDetails\",\n      error: formik.errors\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 12,\n    columnNumber: 5\n  }, this);\n};\n\nexport default DeliveryForm;","map":{"version":3,"sources":["/Users/pulkitshah/Desktop/truckarv2/renderer/components/dashboard/order/delivery-details.js"],"names":["React","FieldArray","getIn","Grid","Typography","Button","GoogleMaps","DeliveryForm","formik","rest","noOfDeliveries","setNoOfDeliveries","useState","errors"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,UAAT,EAAqBC,KAArB,QAAkC,QAAlC;AAEA,SAASC,IAAT,EAAeC,UAAf,EAA2BC,MAA3B,QAAyC,eAAzC;AAEA,OAAOC,UAAP,MAAuB,8BAAvB;;AAEA,MAAMC,YAAY,GAAG,UAAyB;AAAA,MAAxB;AAAEC,IAAAA;AAAF,GAAwB;AAAA,MAAXC,IAAW;;AAC5C,QAAM,CAACC,cAAD,EAAiBC,iBAAjB,IAAsCX,KAAK,CAACY,QAAN,CAAe,CAAf,CAA5C;AAEA,sBACE,QAAC,KAAD,CAAO,QAAP;AAAA,2BACE,QAAC,UAAD;AAAY,MAAA,IAAI,EAAC,iBAAjB;AAAmC,MAAA,KAAK,EAAEJ,MAAM,CAACK;AAAjD;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAqFD,CAxFD;;AA0FA,eAAeN,YAAf","sourcesContent":["import React from \"react\";\nimport { FieldArray, getIn } from \"formik\";\n\nimport { Grid, Typography, Button } from \"@mui/material\";\n\nimport GoogleMaps from \"./google-places-autocomplete\";\n\nconst DeliveryForm = ({ formik, ...rest }) => {\n  const [noOfDeliveries, setNoOfDeliveries] = React.useState(1);\n\n  return (\n    <React.Fragment>\n      <FieldArray name=\"deliveryDetails\" error={formik.errors}>\n        {/* {({ remove, push }) => (\n          <React.Fragment>\n            <Grid container spacing={3}>\n              <Grid item>\n                <Typography variant=\"h6\">\n                  No of Deliveries: {noOfDeliveries}\n                </Typography>\n              </Grid>\n              <Grid item>\n                <Button\n                  sx={{ mb: 3 }}\n                  variant=\"contained\"\n                  color=\"secondary\"\n                  onClick={() => {\n                    setNoOfDeliveries(noOfDeliveries + 1);\n                    push({ loading: \"\", unloading: \"\" });\n                  }}\n                >\n                  Add Delivery\n                </Button>\n              </Grid>\n            </Grid>\n\n            {formik.values.deliveryDetails.length > 0 &&\n              formik.values.deliveryDetails.map((delivery, index) => {\n                const loading = `deliveryDetails[${index}].loading`;\n                const touchedLoading = getIn(formik.touched, loading);\n                const errorLoading = getIn(formik.errors, loading);\n\n                const unloading = `deliveryDetails[${index}].unloading`;\n                const touchedUnloading = getIn(formik.touched, unloading);\n                const errorUnloading = getIn(formik.errors, unloading);\n\n                return (\n                  <Grid container spacing={3} className=\"row\" key={index}>\n                    <Grid item md={4} xs={12} className=\"col\" key={index}>\n                      <GoogleMaps\n                        error={errorLoading}\n                        touched={touchedLoading}\n                        name={loading}\n                        setFieldValue={formik.setFieldValue}\n                        handleBlur={formik.handleBlur}\n                        values={formik.values}\n                        index={index}\n                        type=\"loading\"\n                        formik={formik}\n                      />\n                    </Grid>\n                    <Grid item md={4} xs={12} className=\"col\">\n                      <GoogleMaps\n                        error={errorUnloading}\n                        touched={touchedUnloading}\n                        name={loading}\n                        setFieldValue={formik.setFieldValue}\n                        handleBlur={formik.handleBlur}\n                        values={formik.values}\n                        index={index}\n                        type=\"unloading\"\n                        formik={formik}\n                      />\n                    </Grid>\n                    <Grid item className=\"col\">\n                      <Button\n                        disabled={index < 1}\n                        variant=\"contained\"\n                        color=\"secondary\"\n                        onClick={() => {\n                          setNoOfDeliveries(noOfDeliveries - 1);\n                          remove(index);\n                        }}\n                      >\n                        Remove\n                      </Button>\n                    </Grid>\n                  </Grid>\n                );\n              })}\n          </React.Fragment>\n        )} */}\n      </FieldArray>\n    </React.Fragment>\n  );\n};\n\nexport default DeliveryForm;\n"]},"metadata":{},"sourceType":"module"}