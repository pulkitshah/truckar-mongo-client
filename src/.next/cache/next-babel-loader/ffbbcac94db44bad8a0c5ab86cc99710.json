{"ast":null,"code":"import _defineProperty from \"/Users/pulkitshah/Desktop/truckarv2/node_modules/next/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _regeneratorRuntime from \"/Users/pulkitshah/Desktop/truckarv2/node_modules/next/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/pulkitshah/Desktop/truckarv2/node_modules/next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _objectWithoutProperties from \"/Users/pulkitshah/Desktop/truckarv2/node_modules/next/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/pulkitshah/Desktop/truckarv2/renderer/components/dashboard/branch/branch-create-form.js\",\n    _this = this,\n    _s = $RefreshSig$();\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { forwardRef, useImperativeHandle } from \"react\";\nimport { useRouter } from \"next/router\";\nimport toast from \"react-hot-toast\";\nimport * as Yup from \"yup\";\nimport { useFormik } from \"formik\";\nimport { v4 as uuid } from \"uuid\";\nimport { Divider, Grid, TextField, Typography } from \"@mui/material\";\nimport GoogleMaps from \"../branch/google-places-autocomplete\";\nimport { useAuth } from \"../../../hooks/use-auth\";\nimport { useDispatch } from \"../../../store\";\nimport { branchApi } from \"../../../api/branch-api\";\nimport { userApi } from \"../../../api/user-api\";\nexport var BranchCreateForm = /*#__PURE__*/forwardRef(_c = _s(function (_ref, ref) {\n  _s();\n\n  var handleNext = _ref.handleNext,\n      props = _objectWithoutProperties(_ref, [\"handleNext\"]);\n\n  var _useAuth = useAuth(),\n      user = _useAuth.user,\n      initialize = _useAuth.initialize;\n\n  var router = useRouter();\n  var dispatch = useDispatch();\n  useImperativeHandle(ref, function () {\n    return {\n      handleFormSubmit: function handleFormSubmit() {\n        formik.handleSubmit();\n      }\n    };\n  });\n  var formik = useFormik({\n    initialValues: {\n      branchName: \"\",\n      city: \"\",\n      branchType: \"main\",\n      submit: null\n    },\n    validationSchema: Yup.object({\n      branchName: Yup.string().max(255).required(\"Please enter a branch name.\"),\n      city: Yup.object().required(\"Please select a city.\")\n    }),\n    onSubmit: function () {\n      var _onSubmit = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(values, helpers) {\n        var id, newBranch;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.prev = 0;\n                id = uuid();\n                newBranch = {\n                  id: id,\n                  branchName: values.branchName,\n                  city: JSON.stringify(values.city),\n                  branchType: values.branchType,\n                  user: user.id\n                };\n                _context.next = 5;\n                return branchApi.createBranch(newBranch, dispatch);\n\n              case 5:\n                _context.next = 7;\n                return userApi.updateUser({\n                  onBoardingRequired: false,\n                  id: user.id,\n                  _version: user._version\n                });\n\n              case 7:\n                _context.next = 9;\n                return initialize();\n\n              case 9:\n                toast.success(\"Branch created!\");\n                router.push(\"/dashboard\");\n                _context.next = 20;\n                break;\n\n              case 13:\n                _context.prev = 13;\n                _context.t0 = _context[\"catch\"](0);\n                console.error(_context.t0);\n                toast.error(\"Something went wrong!\");\n                helpers.setStatus({\n                  success: false\n                });\n                helpers.setErrors({\n                  submit: _context.t0.message\n                });\n                helpers.setSubmitting(false);\n\n              case 20:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, null, [[0, 13]]);\n      }));\n\n      function onSubmit(_x, _x2) {\n        return _onSubmit.apply(this, arguments);\n      }\n\n      return onSubmit;\n    }()\n  });\n  return /*#__PURE__*/_jsxDEV(\"form\", _objectSpread(_objectSpread({\n    onSubmit: formik.handleSubmit\n  }, props), {}, {\n    children: /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      spacing: 5,\n      alignItems: \"center\",\n      sx: {\n        mb: 4,\n        mt: 2\n      },\n      children: [/*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        md: 4,\n        xs: 12,\n        children: /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h6\",\n          children: \"Tell us your city\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 11\n        }, _this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, _this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        md: 8,\n        xs: 12,\n        children: /*#__PURE__*/_jsxDEV(GoogleMaps, {\n          formik: formik,\n          error: Boolean(formik.touched.city && formik.errors.city),\n          label: \"Your city in India\",\n          field: \"city\",\n          setFieldValue: formik.setFieldValue,\n          handleBlur: formik.handleBlur,\n          values: formik.values\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 11\n        }, _this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }, _this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12,\n        children: /*#__PURE__*/_jsxDEV(Divider, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 11\n        }, _this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }, _this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        md: 4,\n        xs: 12,\n        children: /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h6\",\n          children: \"Please pick a branch name\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 11\n        }, _this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }, _this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        md: 8,\n        xs: 12,\n        children: /*#__PURE__*/_jsxDEV(TextField, {\n          error: Boolean(formik.touched.branchName && formik.errors.branchName),\n          fullWidth: true,\n          helperText: formik.touched.branchName && formik.errors.branchName,\n          label: \"Your branch name\",\n          name: \"branchName\",\n          onBlur: formik.handleBlur,\n          onChange: formik.handleChange,\n          value: formik.values.branchName\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 11\n        }, _this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 9\n      }, _this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, _this)\n  }), void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 5\n  }, _this);\n}, \"jHGjwWLirC7KQPZudUEYQEMDTms=\", false, function () {\n  return [useAuth, useRouter, useDispatch, useImperativeHandle, useFormik];\n}));\n_c2 = BranchCreateForm;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"BranchCreateForm$forwardRef\");\n$RefreshReg$(_c2, \"BranchCreateForm\");","map":{"version":3,"sources":["/Users/pulkitshah/Desktop/truckarv2/renderer/components/dashboard/branch/branch-create-form.js"],"names":["forwardRef","useImperativeHandle","useRouter","toast","Yup","useFormik","v4","uuid","Divider","Grid","TextField","Typography","GoogleMaps","useAuth","useDispatch","branchApi","userApi","BranchCreateForm","ref","handleNext","props","user","initialize","router","dispatch","handleFormSubmit","formik","handleSubmit","initialValues","branchName","city","branchType","submit","validationSchema","object","string","max","required","onSubmit","values","helpers","id","newBranch","JSON","stringify","createBranch","updateUser","onBoardingRequired","_version","success","push","console","error","setStatus","setErrors","message","setSubmitting","mb","mt","Boolean","touched","errors","setFieldValue","handleBlur","handleChange"],"mappings":"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","sourcesContent":["import { forwardRef, useImperativeHandle } from \"react\";\nimport { useRouter } from \"next/router\";\nimport toast from \"react-hot-toast\";\nimport * as Yup from \"yup\";\nimport { useFormik } from \"formik\";\nimport { v4 as uuid } from \"uuid\";\nimport { Divider, Grid, TextField, Typography } from \"@mui/material\";\nimport GoogleMaps from \"../branch/google-places-autocomplete\";\nimport { useAuth } from \"../../../hooks/use-auth\";\nimport { useDispatch } from \"../../../store\";\nimport { branchApi } from \"../../../api/branch-api\";\nimport { userApi } from \"../../../api/user-api\";\n\nexport const BranchCreateForm = forwardRef(({ handleNext, ...props }, ref) => {\n  const { user, initialize } = useAuth();\n  const router = useRouter();\n  const dispatch = useDispatch();\n\n  useImperativeHandle(ref, () => ({\n    handleFormSubmit() {\n      formik.handleSubmit();\n    },\n  }));\n\n  const formik = useFormik({\n    initialValues: {\n      branchName: \"\",\n      city: \"\",\n      branchType: \"main\",\n      submit: null,\n    },\n    validationSchema: Yup.object({\n      branchName: Yup.string().max(255).required(\"Please enter a branch name.\"),\n      city: Yup.object().required(\"Please select a city.\"),\n    }),\n    onSubmit: async (values, helpers) => {\n      try {\n        const id = uuid();\n        const newBranch = {\n          id: id,\n          branchName: values.branchName,\n          city: JSON.stringify(values.city),\n          branchType: values.branchType,\n          user: user.id,\n        };\n        await branchApi.createBranch(newBranch, dispatch);\n        await userApi.updateUser({\n          onBoardingRequired: false,\n          id: user.id,\n          _version: user._version,\n        });\n\n        await initialize();\n        toast.success(\"Branch created!\");\n        router.push(\"/dashboard\");\n      } catch (err) {\n        console.error(err);\n        toast.error(\"Something went wrong!\");\n        helpers.setStatus({ success: false });\n        helpers.setErrors({ submit: err.message });\n        helpers.setSubmitting(false);\n      }\n    },\n  });\n\n  return (\n    <form onSubmit={formik.handleSubmit} {...props}>\n      <Grid container spacing={5} alignItems=\"center\" sx={{ mb: 4, mt: 2 }}>\n        <Grid item md={4} xs={12}>\n          <Typography variant=\"h6\">Tell us your city</Typography>\n        </Grid>\n        <Grid item md={8} xs={12}>\n          <GoogleMaps\n            formik={formik}\n            error={Boolean(formik.touched.city && formik.errors.city)}\n            label={\"Your city in India\"}\n            field={\"city\"}\n            setFieldValue={formik.setFieldValue}\n            handleBlur={formik.handleBlur}\n            values={formik.values}\n          />\n        </Grid>\n        <Grid item xs={12}>\n          <Divider />\n        </Grid>\n        <Grid item md={4} xs={12}>\n          <Typography variant=\"h6\">Please pick a branch name</Typography>\n        </Grid>\n        <Grid item md={8} xs={12}>\n          <TextField\n            error={Boolean(\n              formik.touched.branchName && formik.errors.branchName\n            )}\n            fullWidth\n            helperText={formik.touched.branchName && formik.errors.branchName}\n            label=\"Your branch name\"\n            name=\"branchName\"\n            onBlur={formik.handleBlur}\n            onChange={formik.handleChange}\n            value={formik.values.branchName}\n          />\n        </Grid>\n      </Grid>\n    </form>\n  );\n});\n"]},"metadata":{},"sourceType":"module"}