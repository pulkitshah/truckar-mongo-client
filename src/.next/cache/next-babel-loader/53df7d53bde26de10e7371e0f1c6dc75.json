{"ast":null,"code":"import React from \"react\";\nimport { useQuery } from \"@apollo/client\";\nimport gql from \"graphql-tag\";\n\nconst getDeliveries = user => {\n  const {\n    deliveriesPoll,\n    fetchMore,\n    loading\n  } = getDeliveriesOfUser(user);\n  return {\n    loading,\n    deliveriesPoll,\n    fetchMore\n  };\n}; // TODO: Add the GraphQL query for fetching all deliveries.\n\n\nconst GetDeliveriesOfUserQuery = gql`\n  query AllDeliveries($user: ObjectId!, $limit: Int) {\n    deliveries(query: { user: $user }, limit: $limit) {\n      _id\n    }\n  }\n`;\n\nfunction getDeliveriesOfUser(user) {\n  var _data$deliveries;\n\n  const queryResult = useQuery(GetDeliveriesOfUserQuery, {\n    variables: {\n      user: user._id,\n      offset: 0,\n      limit: 10000\n    }\n  }, {});\n  const {\n    data,\n    loading,\n    fetchMore,\n    error,\n    startPolling,\n    stopPolling\n  } = queryResult;\n  React.useEffect(() => {\n    // check server for updates every 1000ms\n    startPolling(1000); // stop polling server for data when component unmounts\n\n    return () => stopPolling();\n  }, [startPolling, stopPolling]);\n\n  if (error) {\n    throw new Error(JSON.stringify(error, null, 2));\n  } // If the query has finished, return the deliveries from the result data\n  // Otherwise, return an empty list\n\n\n  const deliveriesPoll = (_data$deliveries = data === null || data === void 0 ? void 0 : data.deliveries) !== null && _data$deliveries !== void 0 ? _data$deliveries : [];\n  return {\n    deliveriesPoll,\n    fetchMoreDeliveries: fetchMore,\n    deliveriesloading: loading\n  };\n}\n\nexport default getDeliveries;","map":{"version":3,"sources":["/Users/pulkitshah/Desktop/truckarv2/renderer/graphql/deliveries.js"],"names":["React","useQuery","gql","getDeliveries","user","deliveriesPoll","fetchMore","loading","getDeliveriesOfUser","GetDeliveriesOfUserQuery","queryResult","variables","_id","offset","limit","data","error","startPolling","stopPolling","useEffect","Error","JSON","stringify","deliveries","fetchMoreDeliveries","deliveriesloading"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,QAAyB,gBAAzB;AACA,OAAOC,GAAP,MAAgB,aAAhB;;AAEA,MAAMC,aAAa,GAAIC,IAAD,IAAU;AAC9B,QAAM;AAAEC,IAAAA,cAAF;AAAkBC,IAAAA,SAAlB;AAA6BC,IAAAA;AAA7B,MACJC,mBAAmB,CAACJ,IAAD,CADrB;AAEA,SAAO;AACLG,IAAAA,OADK;AAELF,IAAAA,cAFK;AAGLC,IAAAA;AAHK,GAAP;AAKD,CARD,C,CAUA;;;AAEA,MAAMG,wBAAwB,GAAGP,GAAI;AACrC;AACA;AACA;AACA;AACA;AACA,CANA;;AAQA,SAASM,mBAAT,CAA6BJ,IAA7B,EAAmC;AAAA;;AACjC,QAAMM,WAAW,GAAGT,QAAQ,CAC1BQ,wBAD0B,EAE1B;AACEE,IAAAA,SAAS,EAAE;AACTP,MAAAA,IAAI,EAAEA,IAAI,CAACQ,GADF;AAETC,MAAAA,MAAM,EAAE,CAFC;AAGTC,MAAAA,KAAK,EAAE;AAHE;AADb,GAF0B,EAS1B,EAT0B,CAA5B;AAWA,QAAM;AAAEC,IAAAA,IAAF;AAAQR,IAAAA,OAAR;AAAiBD,IAAAA,SAAjB;AAA4BU,IAAAA,KAA5B;AAAmCC,IAAAA,YAAnC;AAAiDC,IAAAA;AAAjD,MACJR,WADF;AAGAV,EAAAA,KAAK,CAACmB,SAAN,CAAgB,MAAM;AACpB;AACAF,IAAAA,YAAY,CAAC,IAAD,CAAZ,CAFoB,CAGpB;;AACA,WAAO,MAAMC,WAAW,EAAxB;AACD,GALD,EAKG,CAACD,YAAD,EAAeC,WAAf,CALH;;AAOA,MAAIF,KAAJ,EAAW;AACT,UAAM,IAAII,KAAJ,CAAUC,IAAI,CAACC,SAAL,CAAeN,KAAf,EAAsB,IAAtB,EAA4B,CAA5B,CAAV,CAAN;AACD,GAxBgC,CAyBjC;AACA;;;AACA,QAAMX,cAAc,uBAAGU,IAAH,aAAGA,IAAH,uBAAGA,IAAI,CAAEQ,UAAT,+DAAuB,EAA3C;AAEA,SAAO;AACLlB,IAAAA,cADK;AAELmB,IAAAA,mBAAmB,EAAElB,SAFhB;AAGLmB,IAAAA,iBAAiB,EAAElB;AAHd,GAAP;AAKD;;AASD,eAAeJ,aAAf","sourcesContent":["import React from \"react\";\nimport { useQuery } from \"@apollo/client\";\nimport gql from \"graphql-tag\";\n\nconst getDeliveries = (user) => {\n  const { deliveriesPoll, fetchMore, loading } =\n    getDeliveriesOfUser(user);\n  return {\n    loading,\n    deliveriesPoll,\n    fetchMore,\n  };\n};\n\n// TODO: Add the GraphQL query for fetching all deliveries.\n\nconst GetDeliveriesOfUserQuery = gql`\n  query AllDeliveries($user: ObjectId!, $limit: Int) {\n    deliveries(query: { user: $user }, limit: $limit) {\n      _id\n    }\n  }\n`;\n\nfunction getDeliveriesOfUser(user) {\n  const queryResult = useQuery(\n    GetDeliveriesOfUserQuery,\n    {\n      variables: {\n        user: user._id,\n        offset: 0,\n        limit: 10000,\n      },\n    },\n    {}\n  );\n  const { data, loading, fetchMore, error, startPolling, stopPolling } =\n    queryResult;\n\n  React.useEffect(() => {\n    // check server for updates every 1000ms\n    startPolling(1000);\n    // stop polling server for data when component unmounts\n    return () => stopPolling();\n  }, [startPolling, stopPolling]);\n  \n  if (error) {\n    throw new Error(JSON.stringify(error, null, 2));\n  }\n  // If the query has finished, return the deliveries from the result data\n  // Otherwise, return an empty list\n  const deliveriesPoll = data?.deliveries ?? [];\n\n  return {\n    deliveriesPoll,\n    fetchMoreDeliveries: fetchMore,\n    deliveriesloading: loading,\n  };\n}\n\n\n\n\n\n\n\n\nexport default getDeliveries;\n"]},"metadata":{},"sourceType":"module"}