{"ast":null,"code":"import _defineProperty from \"/Users/pulkitshah/Desktop/truckarv2/node_modules/next/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"/Users/pulkitshah/Desktop/truckarv2/node_modules/next/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/pulkitshah/Desktop/truckarv2/renderer/components/dashboard/autocompletes/driver-autocomplete/driver-autocomplete.js\",\n    _this = this,\n    _s = $RefreshSig$();\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useState, useEffect, useCallback } from \"react\";\nimport PropTypes from \"prop-types\";\nimport Autocomplete from \"@mui/material\";\nimport { CircularProgress, Grid, TextField } from \"@material-ui/core\";\n\nvar DriverAutocomplete = function DriverAutocomplete(_ref) {\n  _s();\n\n  var className = _ref.className,\n      touched = _ref.touched,\n      setFieldValue = _ref.setFieldValue,\n      errors = _ref.errors,\n      handleBlur = _ref.handleBlur,\n      values = _ref.values,\n      driver = _ref.driver,\n      setDriver = _ref.setDriver;\n\n  var _useState = useState(false),\n      open = _useState[0],\n      setOpen = _useState[1];\n\n  var _useState2 = useState([]),\n      drivers = _useState2[0],\n      setDrivers = _useState2[1];\n\n  var _React$useState = React.useState(\"\"),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      inputValue = _React$useState2[0],\n      setInputValue = _React$useState2[1];\n\n  useEffect(function () {\n    console.log(\"driver has changed\");\n    setFieldValue(\"driver\", driver);\n  }, [setFieldValue, driver]);\n\n  var handleOnChange = function handleOnChange(event, newValue) {\n    setFieldValue(\"driver\", newValue); // setFieldValue('driver', newValue);\n  };\n\n  var handleInputChange = function handleInputChange(event, newInputValue) {\n    setInputValue(newInputValue); // setFieldValue('driver', newInputValue);\n  };\n\n  return /*#__PURE__*/_jsxDEV(Grid, {\n    item: true,\n    children: /*#__PURE__*/_jsxDEV(Autocomplete, {\n      autoSelect: true,\n      blurOnSelect: true,\n      id: \"driver\",\n      open: open,\n      onOpen: function onOpen() {\n        setOpen(true);\n      },\n      onClose: function onClose() {\n        setOpen(false);\n      },\n      getOptionSelected: function getOptionSelected(option, value) {\n        if (value) return option.name === value.name.replace(/\\w\\S*/g, function (txt) {\n          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();\n        });\n      },\n      getOptionLabel: function getOptionLabel(option) {\n        return option && option.name.replace(/\\w\\S*/g, function (txt) {\n          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();\n        });\n      },\n      options: drivers,\n      loading: loading,\n      value: values.driver,\n      onChange: handleOnChange,\n      inputValue: inputValue,\n      onInputChange: handleInputChange,\n      renderInput: function renderInput(params) {\n        return /*#__PURE__*/_jsxDEV(TextField, _objectSpread(_objectSpread({}, params), {}, {\n          name: \"driver\",\n          label: \"Driver\",\n          variant: \"outlined\",\n          error: Boolean(touched.driver && errors.driver),\n          fullWidth: true,\n          helperText: touched.driver && errors.driver,\n          onBlur: handleBlur,\n          InputProps: _objectSpread(_objectSpread({}, params.InputProps), {}, {\n            endAdornment: /*#__PURE__*/_jsxDEV(React.Fragment, {\n              children: [loading ? /*#__PURE__*/_jsxDEV(CircularProgress, {\n                color: \"inherit\",\n                size: 20\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 90,\n                columnNumber: 21\n              }, _this) : null, params.InputProps.endAdornment]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 88,\n              columnNumber: 17\n            }, _this)\n          })\n        }), void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 11\n        }, _this);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, _this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 5\n  }, _this);\n};\n\n_s(DriverAutocomplete, \"57grHKJDsIlPBs5GOFPpvmP6rmw=\");\n\n_c = DriverAutocomplete;\nDriverAutocomplete.propTypes = {\n  className: PropTypes.string\n};\nexport default DriverAutocomplete;\n\nvar _c;\n\n$RefreshReg$(_c, \"DriverAutocomplete\");","map":{"version":3,"sources":["/Users/pulkitshah/Desktop/truckarv2/renderer/components/dashboard/autocompletes/driver-autocomplete/driver-autocomplete.js"],"names":["React","useState","useEffect","useCallback","PropTypes","Autocomplete","CircularProgress","Grid","TextField","DriverAutocomplete","className","touched","setFieldValue","errors","handleBlur","values","driver","setDriver","open","setOpen","drivers","setDrivers","inputValue","setInputValue","console","log","handleOnChange","event","newValue","handleInputChange","newInputValue","option","value","name","replace","txt","charAt","toUpperCase","substr","toLowerCase","loading","params","Boolean","InputProps","endAdornment","propTypes","string"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useCallback } from \"react\";\nimport PropTypes from \"prop-types\";\nimport Autocomplete from \"@mui/material\";\n\nimport { CircularProgress, Grid, TextField } from \"@material-ui/core\";\n\nconst DriverAutocomplete = ({\n  className,\n  touched,\n  setFieldValue,\n  errors,\n  handleBlur,\n  values,\n  driver,\n  setDriver,\n}) => {\n  const [open, setOpen] = useState(false);\n  const [drivers, setDrivers] = useState([]);\n  const [inputValue, setInputValue] = React.useState(\"\");\n\n  useEffect(() => {\n    console.log(\"driver has changed\");\n    setFieldValue(\"driver\", driver);\n  }, [setFieldValue, driver]);\n\n  const handleOnChange = (event, newValue) => {\n    setFieldValue(\"driver\", newValue);\n\n    // setFieldValue('driver', newValue);\n  };\n\n  const handleInputChange = (event, newInputValue) => {\n    setInputValue(newInputValue);\n    // setFieldValue('driver', newInputValue);\n  };\n\n  return (\n    <Grid item>\n      <Autocomplete\n        autoSelect={true}\n        blurOnSelect={true}\n        id=\"driver\"\n        open={open}\n        onOpen={() => {\n          setOpen(true);\n        }}\n        onClose={() => {\n          setOpen(false);\n        }}\n        getOptionSelected={(option, value) => {\n          if (value)\n            return (\n              option.name ===\n              value.name.replace(/\\w\\S*/g, function (txt) {\n                return (\n                  txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase()\n                );\n              })\n            );\n        }}\n        getOptionLabel={(option) => {\n          return (\n            option &&\n            option.name.replace(/\\w\\S*/g, function (txt) {\n              return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();\n            })\n          );\n        }}\n        options={drivers}\n        loading={loading}\n        value={values.driver}\n        onChange={handleOnChange}\n        inputValue={inputValue}\n        onInputChange={handleInputChange}\n        renderInput={(params) => (\n          <TextField\n            {...params}\n            name=\"driver\"\n            label=\"Driver\"\n            variant=\"outlined\"\n            error={Boolean(touched.driver && errors.driver)}\n            fullWidth\n            helperText={touched.driver && errors.driver}\n            onBlur={handleBlur}\n            InputProps={{\n              ...params.InputProps,\n              endAdornment: (\n                <React.Fragment>\n                  {loading ? (\n                    <CircularProgress color=\"inherit\" size={20} />\n                  ) : null}\n                  {params.InputProps.endAdornment}\n                </React.Fragment>\n              ),\n            }}\n          />\n        )}\n      />\n    </Grid>\n  );\n};\n\nDriverAutocomplete.propTypes = {\n  className: PropTypes.string,\n};\n\nexport default DriverAutocomplete;\n"]},"metadata":{},"sourceType":"module"}