{"ast":null,"code":"import { API } from \"aws-amplify\";\nimport { driversByUser } from \"../graphql/queries\";\nimport { createDriver, updateDriver } from \"../graphql/mutations\";\nimport { Driver } from \"../models\";\nimport { DataStore, Predicates } from \"@aws-amplify/datastore\";\nimport moment from \"moment\";\nimport { slice } from \"../slices/drivers\";\nconst now = new Date();\n\nclass DriverApi {\n  async getDriversByUser(user, dispatch) {\n    try {\n      //////////////////////// GraphQL API ////////////////////////\n      const response = await API.graphql({\n        query: driversByUser,\n        variables: {\n          user: user.id.toString()\n        }\n      });\n      const drivers = response.data.driversByUser.items; //////////////////////// GraphQL API ////////////////////////\n      //////////////////////// DataStore API ////////////////////////\n      // const drivers = await DataStore.query(Driver, (c) =>\n      //   c.user(\"eq\", user.id)\n      // );\n      //////////////////////// DataStore API ////////////////////////\n      // console.log(drivers);\n      // Dispatch - Reducer\n\n      dispatch(slice.actions.getDrivers(drivers));\n      return drivers;\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  async createDriver(createdDriver, dispatch) {\n    const createdAt = moment().toISOString();\n    let newDriver = createdDriver;\n    newDriver.createdAt = createdAt; //////////////////////// GraphQL API ////////////////////////\n\n    const response = await API.graphql({\n      query: createDriver,\n      variables: {\n        input: newDriver\n      },\n      authMode: \"AMAZON_COGNITO_USER_POOLS\"\n    });\n    const driver = response.data.createDriver; //////////////////////// GraphQL API ////////////////////////\n    //////////////////////// DataStore API ////////////////////////\n    // const driver = await DataStore.save(new Driver(newDriver));\n    //////////////////////// DataStore API ////////////////////////\n    // console.log(driver);\n    // Dispatch - Reducer\n\n    dispatch(slice.actions.createDriver({\n      driver\n    }));\n    return driver;\n  }\n\n  async updateDriver(editedDriver, dispatch) {\n    //////////////////////// GraphQL API ////////////////////////\n    const response = await API.graphql({\n      query: updateDriver,\n      variables: {\n        input: editedDriver\n      },\n      authMode: \"AMAZON_COGNITO_USER_POOLS\"\n    });\n    const driver = response.data.updateDriver; //////////////////////// GraphQL API ////////////////////////\n    // console.log(driver);\n    // Dispatch - Reducer\n\n    dispatch(slice.actions.updateDriver({\n      driver\n    }));\n    return response;\n  }\n\n  async validateDuplicateName(name, user) {\n    const response = await API.graphql({\n      query: driversByUser,\n      variables: {\n        user: user.id.toString()\n      }\n    });\n    const drivers = response.data.driversByUser.items;\n    const driver = drivers.find(driver => {\n      return driver.name === name;\n    });\n    return Boolean(!driver);\n  }\n\n  async validateDuplicateMobile(mobile, user) {\n    const response = await API.graphql({\n      query: driversByUser,\n      variables: {\n        user: user.id.toString()\n      }\n    });\n    const drivers = response.data.driversByUser.items;\n    const driver = drivers.find(driver => {\n      return driver.mobile === mobile;\n    });\n    return Boolean(!driver);\n  }\n\n}\n\nexport const driverApi = new DriverApi();","map":{"version":3,"sources":["/Users/pulkitshah/Desktop/truckarv2/renderer/api/driver-api.js"],"names":["API","driversByUser","createDriver","updateDriver","Driver","DataStore","Predicates","moment","slice","now","Date","DriverApi","getDriversByUser","user","dispatch","response","graphql","query","variables","id","toString","drivers","data","items","actions","getDrivers","error","console","log","createdDriver","createdAt","toISOString","newDriver","input","authMode","driver","editedDriver","validateDuplicateName","name","find","Boolean","validateDuplicateMobile","mobile","driverApi"],"mappings":"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","sourcesContent":["import { API } from \"aws-amplify\";\nimport { driversByUser } from \"../graphql/queries\";\nimport { createDriver, updateDriver } from \"../graphql/mutations\";\nimport { Driver } from \"../models\";\nimport { DataStore, Predicates } from \"@aws-amplify/datastore\";\nimport moment from \"moment\";\nimport { slice } from \"../slices/drivers\";\n\nconst now = new Date();\n\nclass DriverApi {\n  async getDriversByUser(user, dispatch) {\n    try {\n      //////////////////////// GraphQL API ////////////////////////\n\n      const response = await API.graphql({\n        query: driversByUser,\n        variables: { user: user.id.toString() },\n      });\n      const drivers = response.data.driversByUser.items;\n\n      //////////////////////// GraphQL API ////////////////////////\n\n      //////////////////////// DataStore API ////////////////////////\n\n      // const drivers = await DataStore.query(Driver, (c) =>\n      //   c.user(\"eq\", user.id)\n      // );\n\n      //////////////////////// DataStore API ////////////////////////\n\n      // console.log(drivers);\n\n      // Dispatch - Reducer\n\n      dispatch(slice.actions.getDrivers(drivers));\n\n      return drivers;\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  async createDriver(createdDriver, dispatch) {\n    const createdAt = moment().toISOString();\n    let newDriver = createdDriver;\n    newDriver.createdAt = createdAt;\n\n    //////////////////////// GraphQL API ////////////////////////\n\n    const response = await API.graphql({\n      query: createDriver,\n      variables: { input: newDriver },\n      authMode: \"AMAZON_COGNITO_USER_POOLS\",\n    });\n\n    const driver = response.data.createDriver;\n\n    //////////////////////// GraphQL API ////////////////////////\n\n    //////////////////////// DataStore API ////////////////////////\n\n    // const driver = await DataStore.save(new Driver(newDriver));\n\n    //////////////////////// DataStore API ////////////////////////\n\n    // console.log(driver);\n\n    // Dispatch - Reducer\n\n    dispatch(slice.actions.createDriver({ driver }));\n\n    return driver;\n  }\n\n  async updateDriver(editedDriver, dispatch) {\n    //////////////////////// GraphQL API ////////////////////////\n\n    const response = await API.graphql({\n      query: updateDriver,\n      variables: { input: editedDriver },\n      authMode: \"AMAZON_COGNITO_USER_POOLS\",\n    });\n\n    const driver = response.data.updateDriver;\n\n    //////////////////////// GraphQL API ////////////////////////\n\n    // console.log(driver);\n\n    // Dispatch - Reducer\n\n    dispatch(slice.actions.updateDriver({ driver }));\n\n    return response;\n  }\n\n  async validateDuplicateName(name, user) {\n    const response = await API.graphql({\n      query: driversByUser,\n      variables: { user: user.id.toString() },\n    });\n    const drivers = response.data.driversByUser.items;\n    const driver = drivers.find((driver) => {\n      return driver.name === name;\n    });\n    return Boolean(!driver);\n  }\n\n  async validateDuplicateMobile(mobile, user) {\n    const response = await API.graphql({\n      query: driversByUser,\n      variables: { user: user.id.toString() },\n    });\n    const drivers = response.data.driversByUser.items;\n    const driver = drivers.find((driver) => {\n      return driver.mobile === mobile;\n    });\n    return Boolean(!driver);\n  }\n}\n\nexport const driverApi = new DriverApi();\n"]},"metadata":{},"sourceType":"module"}