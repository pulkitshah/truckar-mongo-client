{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nimport _ from \"lodash\";\nconst initialState = {\n  drivers: [],\n  driverIds: [],\n  isNextPageLoading: true\n};\nexport const slice = createSlice({\n  name: \"driver\",\n  initialState,\n  reducers: {\n    getDrivers(state, action) {\n      const drivers = action.payload;\n      state.drivers = drivers;\n      state.isNextPageLoading = false;\n    },\n\n    createDriver(state, action) {\n      const {\n        driver\n      } = action.payload;\n      state.drivers = [...state.drivers, driver];\n    },\n\n    selectDriver(state, action) {\n      const {\n        driverId = null\n      } = action.payload;\n      state.isModalOpen = true;\n      state.selectedDriverId = driverId;\n    },\n\n    updateDriver(state, action) {\n      const {\n        driver\n      } = action.payload;\n      state.drivers = _.map(state.drivers, _driver => {\n        if (_driver.id === driver.id) {\n          return driver;\n        }\n\n        return _driver;\n      });\n    },\n\n    deleteDriver(state, action) {\n      const {\n        driverId\n      } = action.payload;\n      state.drivers = _.reject(state.drivers, {\n        id: driverId\n      });\n    },\n\n    selectRange(state, action) {\n      const {\n        start,\n        end\n      } = action.payload;\n      state.isModalOpen = true;\n      state.selectedRange = {\n        start,\n        end\n      };\n    },\n\n    openModal(state) {\n      state.isModalOpen = true;\n    },\n\n    closeModal(state) {\n      state.isModalOpen = false;\n      state.selectedDriverId = null;\n      state.selectedRange = null;\n    }\n\n  }\n});\nexport const reducer = slice.reducer;\nexport default slice;","map":{"version":3,"sources":["/Users/pulkitshah/Desktop/truckarv2/renderer/slices/drivers.js"],"names":["createSlice","_","initialState","drivers","driverIds","isNextPageLoading","slice","name","reducers","getDrivers","state","action","payload","createDriver","driver","selectDriver","driverId","isModalOpen","selectedDriverId","updateDriver","map","_driver","id","deleteDriver","reject","selectRange","start","end","selectedRange","openModal","closeModal","reducer"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B;AACA,OAAOC,CAAP,MAAc,QAAd;AAEA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,OAAO,EAAE,EADU;AAEnBC,EAAAA,SAAS,EAAE,EAFQ;AAGnBC,EAAAA,iBAAiB,EAAE;AAHA,CAArB;AAMA,OAAO,MAAMC,KAAK,GAAGN,WAAW,CAAC;AAC/BO,EAAAA,IAAI,EAAE,QADyB;AAE/BL,EAAAA,YAF+B;AAG/BM,EAAAA,QAAQ,EAAE;AACRC,IAAAA,UAAU,CAACC,KAAD,EAAQC,MAAR,EAAgB;AACxB,YAAMR,OAAO,GAAGQ,MAAM,CAACC,OAAvB;AACAF,MAAAA,KAAK,CAACP,OAAN,GAAgBA,OAAhB;AACAO,MAAAA,KAAK,CAACL,iBAAN,GAA0B,KAA1B;AACD,KALO;;AAMRQ,IAAAA,YAAY,CAACH,KAAD,EAAQC,MAAR,EAAgB;AAC1B,YAAM;AAAEG,QAAAA;AAAF,UAAaH,MAAM,CAACC,OAA1B;AAEAF,MAAAA,KAAK,CAACP,OAAN,GAAgB,CAAC,GAAGO,KAAK,CAACP,OAAV,EAAmBW,MAAnB,CAAhB;AACD,KAVO;;AAWRC,IAAAA,YAAY,CAACL,KAAD,EAAQC,MAAR,EAAgB;AAC1B,YAAM;AAAEK,QAAAA,QAAQ,GAAG;AAAb,UAAsBL,MAAM,CAACC,OAAnC;AAEAF,MAAAA,KAAK,CAACO,WAAN,GAAoB,IAApB;AACAP,MAAAA,KAAK,CAACQ,gBAAN,GAAyBF,QAAzB;AACD,KAhBO;;AAiBRG,IAAAA,YAAY,CAACT,KAAD,EAAQC,MAAR,EAAgB;AAC1B,YAAM;AAAEG,QAAAA;AAAF,UAAaH,MAAM,CAACC,OAA1B;AAEAF,MAAAA,KAAK,CAACP,OAAN,GAAgBF,CAAC,CAACmB,GAAF,CAAMV,KAAK,CAACP,OAAZ,EAAsBkB,OAAD,IAAa;AAChD,YAAIA,OAAO,CAACC,EAAR,KAAeR,MAAM,CAACQ,EAA1B,EAA8B;AAC5B,iBAAOR,MAAP;AACD;;AAED,eAAOO,OAAP;AACD,OANe,CAAhB;AAOD,KA3BO;;AA4BRE,IAAAA,YAAY,CAACb,KAAD,EAAQC,MAAR,EAAgB;AAC1B,YAAM;AAAEK,QAAAA;AAAF,UAAeL,MAAM,CAACC,OAA5B;AAEAF,MAAAA,KAAK,CAACP,OAAN,GAAgBF,CAAC,CAACuB,MAAF,CAASd,KAAK,CAACP,OAAf,EAAwB;AACtCmB,QAAAA,EAAE,EAAEN;AADkC,OAAxB,CAAhB;AAGD,KAlCO;;AAmCRS,IAAAA,WAAW,CAACf,KAAD,EAAQC,MAAR,EAAgB;AACzB,YAAM;AAAEe,QAAAA,KAAF;AAASC,QAAAA;AAAT,UAAiBhB,MAAM,CAACC,OAA9B;AAEAF,MAAAA,KAAK,CAACO,WAAN,GAAoB,IAApB;AACAP,MAAAA,KAAK,CAACkB,aAAN,GAAsB;AACpBF,QAAAA,KADoB;AAEpBC,QAAAA;AAFoB,OAAtB;AAID,KA3CO;;AA4CRE,IAAAA,SAAS,CAACnB,KAAD,EAAQ;AACfA,MAAAA,KAAK,CAACO,WAAN,GAAoB,IAApB;AACD,KA9CO;;AA+CRa,IAAAA,UAAU,CAACpB,KAAD,EAAQ;AAChBA,MAAAA,KAAK,CAACO,WAAN,GAAoB,KAApB;AACAP,MAAAA,KAAK,CAACQ,gBAAN,GAAyB,IAAzB;AACAR,MAAAA,KAAK,CAACkB,aAAN,GAAsB,IAAtB;AACD;;AAnDO;AAHqB,CAAD,CAAzB;AA0DP,OAAO,MAAMG,OAAO,GAAGzB,KAAK,CAACyB,OAAtB;AAEP,eAAezB,KAAf","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\nimport _ from \"lodash\";\n\nconst initialState = {\n  drivers: [],\n  driverIds: [],\n  isNextPageLoading: true,\n};\n\nexport const slice = createSlice({\n  name: \"driver\",\n  initialState,\n  reducers: {\n    getDrivers(state, action) {\n      const drivers = action.payload;\n      state.drivers = drivers;\n      state.isNextPageLoading = false;\n    },\n    createDriver(state, action) {\n      const { driver } = action.payload;\n\n      state.drivers = [...state.drivers, driver];\n    },\n    selectDriver(state, action) {\n      const { driverId = null } = action.payload;\n\n      state.isModalOpen = true;\n      state.selectedDriverId = driverId;\n    },\n    updateDriver(state, action) {\n      const { driver } = action.payload;\n\n      state.drivers = _.map(state.drivers, (_driver) => {\n        if (_driver.id === driver.id) {\n          return driver;\n        }\n\n        return _driver;\n      });\n    },\n    deleteDriver(state, action) {\n      const { driverId } = action.payload;\n\n      state.drivers = _.reject(state.drivers, {\n        id: driverId,\n      });\n    },\n    selectRange(state, action) {\n      const { start, end } = action.payload;\n\n      state.isModalOpen = true;\n      state.selectedRange = {\n        start,\n        end,\n      };\n    },\n    openModal(state) {\n      state.isModalOpen = true;\n    },\n    closeModal(state) {\n      state.isModalOpen = false;\n      state.selectedDriverId = null;\n      state.selectedRange = null;\n    },\n  },\n});\n\nexport const reducer = slice.reducer;\n\nexport default slice;\n"]},"metadata":{},"sourceType":"module"}