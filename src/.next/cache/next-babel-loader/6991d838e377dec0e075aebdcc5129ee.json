{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/pulkitshah/Desktop/truckarv2/renderer/components/dashboard/order/delivery-details.js\";\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from \"react\";\nimport { FormikProvider, FieldArray, getIn } from \"formik\";\nimport { Grid, Typography, Button } from \"@mui/material\";\nimport { DistanceMatrixService } from \"@react-google-maps/api\";\nimport { Plus as PlusIcon } from \"../../../icons/plus\";\nimport GoogleMaps from \"./google-places-autocomplete\";\n\nconst DeliveryForm = (_ref) => {\n  let {\n    formik\n  } = _ref,\n      rest = _objectWithoutProperties(_ref, [\"formik\"]);\n\n  const [noOfDeliveries, setNoOfDeliveries] = React.useState(1);\n  const [googleResponse, setResponse] = React.useState([]);\n\n  let distanceCallback = response => {\n    if (response !== null) {\n      console.log(response);\n      const index = googleResponse.findIndex(obj => obj.origin === response.originAddresses[0] && obj.destination === response.destinationAddresses[0]);\n      console.log(index);\n\n      if (index < 0) {\n        setResponse([...googleResponse, {\n          origin: response.originAddresses[0],\n          destination: response.destinationAddresses[0] // distance: response.rows[0].elements[0].distance.text,\n          // duration: response.rows[0].elements[0].duration.text,\n\n        }]);\n      }\n\n      console.log(googleResponse);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: /*#__PURE__*/_jsxDEV(FormikProvider, {\n      value: formik,\n      children: /*#__PURE__*/_jsxDEV(FieldArray, {\n        name: \"deliveryDetails\",\n        error: formik.errors,\n        children: ({\n          remove,\n          push\n        }) => /*#__PURE__*/_jsxDEV(React.Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(Grid, {\n            container: true,\n            spacing: 3,\n            justifyContent: \"space-between\",\n            alignItems: \"center\",\n            sx: {\n              mb: 3\n            },\n            children: [/*#__PURE__*/_jsxDEV(Grid, {\n              item: true,\n              children: /*#__PURE__*/_jsxDEV(Typography, {\n                variant: \"h6\",\n                children: [\"Total Deliveries: \", noOfDeliveries]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 50,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 49,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Grid, {\n              item: true,\n              children: /*#__PURE__*/_jsxDEV(Button, {\n                variant: \"contained\",\n                color: \"secondary\",\n                startIcon: /*#__PURE__*/_jsxDEV(PlusIcon, {\n                  fontSize: \"small\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 58,\n                  columnNumber: 32\n                }, this),\n                onClick: () => {\n                  setNoOfDeliveries(noOfDeliveries + 1);\n                  push({\n                    loading: \"\",\n                    unloading: \"\"\n                  });\n                },\n                children: \"Add Delivery\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 55,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 54,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 42,\n            columnNumber: 15\n          }, this), formik.values.deliveryDetails.length > 0 && formik.values.deliveryDetails.map((delivery, index) => {\n            const loading = `deliveryDetails[${index}].loading`;\n            const touchedLoading = getIn(formik.touched, loading);\n            const errorLoading = getIn(formik.errors, loading);\n            const unloading = `deliveryDetails[${index}].unloading`;\n            const touchedUnloading = getIn(formik.touched, unloading);\n            const errorUnloading = getIn(formik.errors, unloading);\n            return /*#__PURE__*/_jsxDEV(Grid, {\n              container: true,\n              spacing: 3,\n              className: \"row\",\n              alignItems: \"center\",\n              sx: {\n                mb: 2\n              },\n              children: [/*#__PURE__*/_jsxDEV(Grid, {\n                item: true,\n                md: 4,\n                xs: 12,\n                className: \"col\",\n                children: /*#__PURE__*/_jsxDEV(GoogleMaps, {\n                  label: \"Loading\",\n                  error: errorLoading,\n                  touched: touchedLoading,\n                  name: loading,\n                  setFieldValue: formik.setFieldValue,\n                  handleBlur: formik.handleBlur,\n                  values: formik.values,\n                  index: index,\n                  type: \"loading\",\n                  formik: formik\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 88,\n                  columnNumber: 25\n                }, this)\n              }, index, false, {\n                fileName: _jsxFileName,\n                lineNumber: 87,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(Grid, {\n                item: true,\n                md: 4,\n                xs: 12,\n                className: \"col\",\n                children: /*#__PURE__*/_jsxDEV(GoogleMaps, {\n                  label: \"Unloading\",\n                  error: errorUnloading,\n                  touched: touchedUnloading,\n                  name: loading,\n                  setFieldValue: formik.setFieldValue,\n                  handleBlur: formik.handleBlur,\n                  values: formik.values,\n                  index: index,\n                  type: \"unloading\",\n                  formik: formik\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 102,\n                  columnNumber: 25\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 101,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(Grid, {\n                item: true,\n                md: 2,\n                xs: 12,\n                className: \"col\",\n                children: [/*#__PURE__*/_jsxDEV(Typography, {\n                  variant: \"h6\",\n                  children: \"240 Kms\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 116,\n                  columnNumber: 25\n                }, this), /*#__PURE__*/_jsxDEV(DistanceMatrixService, {\n                  options: {\n                    origins: [delivery.loading.description],\n                    destinations: [delivery.unloading.description],\n                    travelMode: \"TRANSIT\"\n                  } // required\n                  ,\n                  callback: distanceCallback\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 117,\n                  columnNumber: 25\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 115,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(Grid, {\n                item: true,\n                className: \"col\",\n                children: /*#__PURE__*/_jsxDEV(Button, {\n                  disabled: index < 1,\n                  color: \"secondary\",\n                  onClick: () => {\n                    setNoOfDeliveries(noOfDeliveries - 1);\n                    remove(index);\n                  },\n                  children: \"Remove\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 128,\n                  columnNumber: 25\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 127,\n                columnNumber: 23\n              }, this)]\n            }, index, true, {\n              fileName: _jsxFileName,\n              lineNumber: 79,\n              columnNumber: 21\n            }, this);\n          })]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 5\n  }, this);\n};\n\nexport default DeliveryForm;","map":{"version":3,"sources":["/Users/pulkitshah/Desktop/truckarv2/renderer/components/dashboard/order/delivery-details.js"],"names":["React","FormikProvider","FieldArray","getIn","Grid","Typography","Button","DistanceMatrixService","Plus","PlusIcon","GoogleMaps","DeliveryForm","formik","rest","noOfDeliveries","setNoOfDeliveries","useState","googleResponse","setResponse","distanceCallback","response","console","log","index","findIndex","obj","origin","originAddresses","destination","destinationAddresses","errors","remove","push","mb","loading","unloading","values","deliveryDetails","length","map","delivery","touchedLoading","touched","errorLoading","touchedUnloading","errorUnloading","setFieldValue","handleBlur","origins","description","destinations","travelMode"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { FormikProvider, FieldArray, getIn } from \"formik\";\nimport { Grid, Typography, Button } from \"@mui/material\";\nimport { DistanceMatrixService } from \"@react-google-maps/api\";\n\nimport { Plus as PlusIcon } from \"../../../icons/plus\";\nimport GoogleMaps from \"./google-places-autocomplete\";\n\nconst DeliveryForm = ({ formik, ...rest }) => {\n  const [noOfDeliveries, setNoOfDeliveries] = React.useState(1);\n  const [googleResponse, setResponse] = React.useState([]);\n\n  let distanceCallback = (response) => {\n    if (response !== null) {\n      console.log(response);\n      const index = googleResponse.findIndex(\n        (obj) =>\n          obj.origin === response.originAddresses[0] &&\n          obj.destination === response.destinationAddresses[0]\n      );\n      console.log(index);\n      if (index < 0) {\n        setResponse([\n          ...googleResponse,\n          {\n            origin: response.originAddresses[0],\n            destination: response.destinationAddresses[0],\n            // distance: response.rows[0].elements[0].distance.text,\n            // duration: response.rows[0].elements[0].duration.text,\n          },\n        ]);\n      }\n      console.log(googleResponse);\n    }\n  };\n  return (\n    <React.Fragment>\n      <FormikProvider value={formik}>\n        <FieldArray name=\"deliveryDetails\" error={formik.errors}>\n          {({ remove, push }) => (\n            <React.Fragment>\n              <Grid\n                container\n                spacing={3}\n                justifyContent=\"space-between\"\n                alignItems={\"center\"}\n                sx={{ mb: 3 }}\n              >\n                <Grid item>\n                  <Typography variant=\"h6\">\n                    Total Deliveries: {noOfDeliveries}\n                  </Typography>\n                </Grid>\n                <Grid item>\n                  <Button\n                    variant=\"contained\"\n                    color=\"secondary\"\n                    startIcon={<PlusIcon fontSize=\"small\" />}\n                    onClick={() => {\n                      setNoOfDeliveries(noOfDeliveries + 1);\n                      push({ loading: \"\", unloading: \"\" });\n                    }}\n                  >\n                    Add Delivery\n                  </Button>\n                </Grid>\n              </Grid>\n\n              {formik.values.deliveryDetails.length > 0 &&\n                formik.values.deliveryDetails.map((delivery, index) => {\n                  const loading = `deliveryDetails[${index}].loading`;\n                  const touchedLoading = getIn(formik.touched, loading);\n                  const errorLoading = getIn(formik.errors, loading);\n\n                  const unloading = `deliveryDetails[${index}].unloading`;\n                  const touchedUnloading = getIn(formik.touched, unloading);\n                  const errorUnloading = getIn(formik.errors, unloading);\n                  return (\n                    <Grid\n                      container\n                      spacing={3}\n                      className=\"row\"\n                      key={index}\n                      alignItems={\"center\"}\n                      sx={{ mb: 2 }}\n                    >\n                      <Grid item md={4} xs={12} className=\"col\" key={index}>\n                        <GoogleMaps\n                          label={\"Loading\"}\n                          error={errorLoading}\n                          touched={touchedLoading}\n                          name={loading}\n                          setFieldValue={formik.setFieldValue}\n                          handleBlur={formik.handleBlur}\n                          values={formik.values}\n                          index={index}\n                          type=\"loading\"\n                          formik={formik}\n                        />\n                      </Grid>\n                      <Grid item md={4} xs={12} className=\"col\">\n                        <GoogleMaps\n                          label={\"Unloading\"}\n                          error={errorUnloading}\n                          touched={touchedUnloading}\n                          name={loading}\n                          setFieldValue={formik.setFieldValue}\n                          handleBlur={formik.handleBlur}\n                          values={formik.values}\n                          index={index}\n                          type=\"unloading\"\n                          formik={formik}\n                        />\n                      </Grid>\n                      <Grid item md={2} xs={12} className=\"col\">\n                        <Typography variant=\"h6\">240 Kms</Typography>\n                        <DistanceMatrixService\n                          options={{\n                            origins: [delivery.loading.description],\n                            destinations: [delivery.unloading.description],\n                            travelMode: \"TRANSIT\",\n                          }}\n                          // required\n                          callback={distanceCallback}\n                        />\n                      </Grid>\n                      <Grid item className=\"col\">\n                        <Button\n                          disabled={index < 1}\n                          color=\"secondary\"\n                          onClick={() => {\n                            setNoOfDeliveries(noOfDeliveries - 1);\n                            remove(index);\n                          }}\n                        >\n                          Remove\n                        </Button>\n                      </Grid>\n                    </Grid>\n                  );\n                })}\n            </React.Fragment>\n          )}\n        </FieldArray>\n      </FormikProvider>\n    </React.Fragment>\n  );\n};\n\nexport default DeliveryForm;\n"]},"metadata":{},"sourceType":"module"}