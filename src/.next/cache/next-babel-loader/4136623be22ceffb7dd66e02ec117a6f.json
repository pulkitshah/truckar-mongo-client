{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/pulkitshah/Desktop/truckarv2/renderer/components/dashboard/welcome/branch-create-form.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport { forwardRef, useImperativeHandle } from \"react\";\nimport toast from \"react-hot-toast\";\nimport * as Yup from \"yup\";\nimport { useFormik } from \"formik\";\nimport { Divider, Grid, TextField, Typography } from \"@mui/material\";\nimport GoogleMaps from \"./google-places-autocomplete\";\nimport { useAuth } from \"../../../hooks/use-auth\";\nimport { createBranch } from \"../../../graphql/mutations\";\nexport const BranchCreateForm = /*#__PURE__*/forwardRef((_ref, ref) => {\n  let {\n    handleNext,\n    setActiveStep\n  } = _ref,\n      props = _objectWithoutProperties(_ref, [\"handleNext\", \"setActiveStep\"]);\n\n  const {\n    user\n  } = useAuth();\n  console.log(user);\n  useImperativeHandle(ref, () => ({\n    handleFormSubmit() {\n      console.log(\"ad\");\n      formik.handleSubmit();\n    }\n\n  }));\n  const formik = useFormik({\n    initialValues: {\n      branchName: \"\",\n      city: \"\",\n      branchType: \"main\",\n      submit: null\n    },\n    validationSchema: Yup.object({\n      branchName: Yup.string().max(255).required(\"Please enter a branch name.\"),\n      // addressLine1: Yup.string()\n      //   .max(255)\n      //   .required(\"Address Line 1 is required\"),\n      city: Yup.object().required(\"Please select a city.\")\n    }),\n    onSubmit: async (values, helpers) => {\n      try {\n        console.log(values);\n        console.log(user);\n        const newBranch = {\n          //   id: uuid(),\n          orderNo: parseInt(values.orderNo),\n          user: user.id,\n          saleDate: values.saleDate.format()\n        };\n        const response = await API.graphql({\n          query: createBranch,\n          variables: {\n            input: newBranch\n          },\n          authMode: \"AMAZON_COGNITO_USER_POOLS\"\n        });\n        console.log(response); // NOTE: Make API request\n\n        toast.success(\"Branch created!\");\n        setActiveStep(1); // props.handlenext();\n        // router.push(\"/dashboard/branches\");\n      } catch (err) {\n        console.error(err);\n        toast.error(\"Something went wrong!\");\n        helpers.setStatus({\n          success: false\n        });\n        helpers.setErrors({\n          submit: err.message\n        });\n        helpers.setSubmitting(false);\n      }\n    }\n  });\n  return /*#__PURE__*/_jsxDEV(\"form\", _objectSpread(_objectSpread({\n    onSubmit: formik.handleSubmit\n  }, props), {}, {\n    children: /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      spacing: 5,\n      alignItems: \"center\",\n      sx: {\n        mb: 4,\n        mt: 2\n      },\n      children: [/*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        md: 4,\n        xs: 12,\n        children: /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h6\",\n          children: \"Tell us your city\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        md: 8,\n        xs: 12,\n        children: /*#__PURE__*/_jsxDEV(GoogleMaps, {\n          formik: formik,\n          error: Boolean(formik.touched.city && formik.errors.city),\n          label: \"Your city in India\",\n          field: \"city\",\n          setFieldValue: formik.setFieldValue,\n          handleBlur: formik.handleBlur,\n          values: formik.values\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12,\n        children: /*#__PURE__*/_jsxDEV(Divider, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        md: 4,\n        xs: 12,\n        children: /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h6\",\n          children: \"Please pick a name\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        md: 8,\n        xs: 12,\n        children: /*#__PURE__*/_jsxDEV(TextField, {\n          error: Boolean(formik.touched.branchName && formik.errors.branchName),\n          fullWidth: true,\n          helperText: formik.touched.branchName && formik.errors.branchName,\n          label: \"Your branch name\",\n          name: \"branchName\",\n          onBlur: formik.handleBlur,\n          onChange: formik.handleChange,\n          value: formik.values.branchName\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 9\n    }, this)\n  }), void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 7\n  }, this);\n});","map":{"version":3,"sources":["/Users/pulkitshah/Desktop/truckarv2/renderer/components/dashboard/welcome/branch-create-form.js"],"names":["forwardRef","useImperativeHandle","toast","Yup","useFormik","Divider","Grid","TextField","Typography","GoogleMaps","useAuth","createBranch","BranchCreateForm","ref","handleNext","setActiveStep","props","user","console","log","handleFormSubmit","formik","handleSubmit","initialValues","branchName","city","branchType","submit","validationSchema","object","string","max","required","onSubmit","values","helpers","newBranch","orderNo","parseInt","id","saleDate","format","response","API","graphql","query","variables","input","authMode","success","err","error","setStatus","setErrors","message","setSubmitting","mb","mt","Boolean","touched","errors","setFieldValue","handleBlur","handleChange"],"mappings":"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","sourcesContent":["import { forwardRef, useImperativeHandle } from \"react\";\nimport toast from \"react-hot-toast\";\nimport * as Yup from \"yup\";\nimport { useFormik } from \"formik\";\nimport { Divider, Grid, TextField, Typography } from \"@mui/material\";\nimport GoogleMaps from \"./google-places-autocomplete\";\nimport { useAuth } from \"../../../hooks/use-auth\";\nimport { createBranch } from \"../../../graphql/mutations\";\n\nexport const BranchCreateForm = forwardRef(\n  ({ handleNext, setActiveStep, ...props }, ref) => {\n    const { user } = useAuth();\n    console.log(user);\n\n    useImperativeHandle(ref, () => ({\n      handleFormSubmit() {\n        console.log(\"ad\");\n        formik.handleSubmit();\n      },\n    }));\n\n    const formik = useFormik({\n      initialValues: {\n        branchName: \"\",\n        city: \"\",\n        branchType: \"main\",\n        submit: null,\n      },\n      validationSchema: Yup.object({\n        branchName: Yup.string()\n          .max(255)\n          .required(\"Please enter a branch name.\"),\n        // addressLine1: Yup.string()\n        //   .max(255)\n        //   .required(\"Address Line 1 is required\"),\n        city: Yup.object().required(\"Please select a city.\"),\n      }),\n      onSubmit: async (values, helpers) => {\n        try {\n          console.log(values);\n          console.log(user);\n\n          const newBranch = {\n            //   id: uuid(),\n            orderNo: parseInt(values.orderNo),\n            user: user.id,\n            saleDate: values.saleDate.format(),\n          };\n\n          const response = await API.graphql({\n            query: createBranch,\n            variables: { input: newBranch },\n            authMode: \"AMAZON_COGNITO_USER_POOLS\",\n          });\n\n          console.log(response);\n          // NOTE: Make API request\n          toast.success(\"Branch created!\");\n          setActiveStep(1);\n          // props.handlenext();\n          // router.push(\"/dashboard/branches\");\n        } catch (err) {\n          console.error(err);\n          toast.error(\"Something went wrong!\");\n          helpers.setStatus({ success: false });\n          helpers.setErrors({ submit: err.message });\n          helpers.setSubmitting(false);\n        }\n      },\n    });\n\n    return (\n      <form onSubmit={formik.handleSubmit} {...props}>\n        <Grid container spacing={5} alignItems=\"center\" sx={{ mb: 4, mt: 2 }}>\n          <Grid item md={4} xs={12}>\n            <Typography variant=\"h6\">Tell us your city</Typography>\n          </Grid>\n          <Grid item md={8} xs={12}>\n            <GoogleMaps\n              formik={formik}\n              error={Boolean(formik.touched.city && formik.errors.city)}\n              label={\"Your city in India\"}\n              field={\"city\"}\n              setFieldValue={formik.setFieldValue}\n              handleBlur={formik.handleBlur}\n              values={formik.values}\n            />\n          </Grid>\n          <Grid item xs={12}>\n            <Divider />\n          </Grid>\n          <Grid item md={4} xs={12}>\n            <Typography variant=\"h6\">Please pick a name</Typography>\n          </Grid>\n          <Grid item md={8} xs={12}>\n            <TextField\n              error={Boolean(\n                formik.touched.branchName && formik.errors.branchName\n              )}\n              fullWidth\n              helperText={formik.touched.branchName && formik.errors.branchName}\n              label=\"Your branch name\"\n              name=\"branchName\"\n              onBlur={formik.handleBlur}\n              onChange={formik.handleChange}\n              value={formik.values.branchName}\n            />\n          </Grid>\n        </Grid>\n      </form>\n    );\n  }\n);\n"]},"metadata":{},"sourceType":"module"}