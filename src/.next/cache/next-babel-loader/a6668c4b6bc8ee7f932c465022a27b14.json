{"ast":null,"code":"import _taggedTemplateLiteral from \"/Users/pulkitshah/Desktop/truckarv2/node_modules/next/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\n\nvar _s = $RefreshSig$();\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  query AllOrders($user: ObjectId!, $limit: Int) {\\n    orders(query: { user: $user }, limit: $limit, sortBy: _ID_DESC) {\\n      _id\\n      orderNo\\n      saleDate\\n      customer {\\n        _id\\n        name\\n      }\\n    }\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React from \"react\";\nimport { useQuery } from \"@apollo/client\";\nimport gql from \"graphql-tag\";\n\nvar getOrders = function getOrders(user) {\n  var _getOrdersOfUser = getOrdersOfUser(user),\n      ordersPoll = _getOrdersOfUser.ordersPoll,\n      fetchMore = _getOrdersOfUser.fetchMore,\n      loading = _getOrdersOfUser.loading;\n\n  return {\n    loading: loading,\n    ordersPoll: ordersPoll,\n    fetchMore: fetchMore\n  };\n}; // TODO: Add the GraphQL query for fetching all deliveries.\n\n\nvar GetOrdersOfUserQuery = gql(_templateObject());\n\nfunction getOrdersOfUser(user) {\n  _s();\n\n  var _data$orders;\n\n  var queryResult = useQuery(GetOrdersOfUserQuery, {\n    variables: {\n      user: user._id,\n      offset: 0,\n      limit: 10000\n    }\n  }, {});\n  var data = queryResult.data,\n      loading = queryResult.loading,\n      fetchMore = queryResult.fetchMore,\n      error = queryResult.error,\n      startPolling = queryResult.startPolling,\n      stopPolling = queryResult.stopPolling;\n  React.useEffect(function () {\n    // check server for updates every 1000ms\n    startPolling(1000); // stop polling server for data when component unmounts\n    // return () => stopPolling();\n  }, [startPolling, stopPolling]);\n\n  if (error) {\n    throw new Error(JSON.stringify(error, null, 2));\n  } // If the query has finished, return the deliveries from the result data\n  // Otherwise, return an empty list\n\n\n  var ordersPoll = (_data$orders = data === null || data === void 0 ? void 0 : data.orders) !== null && _data$orders !== void 0 ? _data$orders : [];\n  console.log(data);\n  return {\n    ordersPoll: ordersPoll,\n    fetchMore: fetchMore,\n    loading: loading\n  };\n}\n\n_s(getOrdersOfUser, \"Ob+mMjC5CDfgdbm980HlPvB7r40=\", false, function () {\n  return [useQuery];\n});\n\nexport default getOrders;","map":{"version":3,"sources":["/Users/pulkitshah/Desktop/truckarv2/renderer/graphql/orders.js"],"names":["React","useQuery","gql","getOrders","user","getOrdersOfUser","ordersPoll","fetchMore","loading","GetOrdersOfUserQuery","queryResult","variables","_id","offset","limit","data","error","startPolling","stopPolling","useEffect","Error","JSON","stringify","orders","console","log"],"mappings":";;;;;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,QAAyB,gBAAzB;AACA,OAAOC,GAAP,MAAgB,aAAhB;;AAEA,IAAMC,SAAS,GAAG,SAAZA,SAAY,CAACC,IAAD,EAAU;AAAA,yBAExBC,eAAe,CAACD,IAAD,CAFS;AAAA,MAClBE,UADkB,oBAClBA,UADkB;AAAA,MACNC,SADM,oBACNA,SADM;AAAA,MACKC,OADL,oBACKA,OADL;;AAG1B,SAAO;AACLA,IAAAA,OAAO,EAAPA,OADK;AAELF,IAAAA,UAAU,EAAVA,UAFK;AAGLC,IAAAA,SAAS,EAATA;AAHK,GAAP;AAKD,CARD,C,CAUA;;;AAEA,IAAME,oBAAoB,GAAGP,GAAH,mBAA1B;;AAcA,SAASG,eAAT,CAAyBD,IAAzB,EAA+B;AAAA;;AAAA;;AAC7B,MAAMM,WAAW,GAAGT,QAAQ,CAC1BQ,oBAD0B,EAE1B;AACEE,IAAAA,SAAS,EAAE;AACTP,MAAAA,IAAI,EAAEA,IAAI,CAACQ,GADF;AAETC,MAAAA,MAAM,EAAE,CAFC;AAGTC,MAAAA,KAAK,EAAE;AAHE;AADb,GAF0B,EAS1B,EAT0B,CAA5B;AAD6B,MAYrBC,IAZqB,GAa3BL,WAb2B,CAYrBK,IAZqB;AAAA,MAYfP,OAZe,GAa3BE,WAb2B,CAYfF,OAZe;AAAA,MAYND,SAZM,GAa3BG,WAb2B,CAYNH,SAZM;AAAA,MAYKS,KAZL,GAa3BN,WAb2B,CAYKM,KAZL;AAAA,MAYYC,YAZZ,GAa3BP,WAb2B,CAYYO,YAZZ;AAAA,MAY0BC,WAZ1B,GAa3BR,WAb2B,CAY0BQ,WAZ1B;AAe7BlB,EAAAA,KAAK,CAACmB,SAAN,CAAgB,YAAM;AACpB;AACAF,IAAAA,YAAY,CAAC,IAAD,CAAZ,CAFoB,CAGpB;AACA;AACD,GALD,EAKG,CAACA,YAAD,EAAeC,WAAf,CALH;;AAOA,MAAIF,KAAJ,EAAW;AACT,UAAM,IAAII,KAAJ,CAAUC,IAAI,CAACC,SAAL,CAAeN,KAAf,EAAsB,IAAtB,EAA4B,CAA5B,CAAV,CAAN;AACD,GAxB4B,CAyB7B;AACA;;;AACA,MAAMV,UAAU,mBAAGS,IAAH,aAAGA,IAAH,uBAAGA,IAAI,CAAEQ,MAAT,uDAAmB,EAAnC;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAYV,IAAZ;AAEA,SAAO;AACLT,IAAAA,UAAU,EAAVA,UADK;AAELC,IAAAA,SAAS,EAATA,SAFK;AAGLC,IAAAA,OAAO,EAAPA;AAHK,GAAP;AAKD;;GAnCQH,e;UACaJ,Q;;;AA2CtB,eAAeE,SAAf","sourcesContent":["import React from \"react\";\nimport { useQuery } from \"@apollo/client\";\nimport gql from \"graphql-tag\";\n\nconst getOrders = (user) => {\n  const { ordersPoll, fetchMore, loading } =\n    getOrdersOfUser(user);\n  return {\n    loading,\n    ordersPoll,\n    fetchMore,\n  };\n};\n\n// TODO: Add the GraphQL query for fetching all deliveries.\n\nconst GetOrdersOfUserQuery = gql`\n  query AllOrders($user: ObjectId!, $limit: Int) {\n    orders(query: { user: $user }, limit: $limit, sortBy: _ID_DESC) {\n      _id\n      orderNo\n      saleDate\n      customer {\n        _id\n        name\n      }\n    }\n  }\n`;\n\nfunction getOrdersOfUser(user) {\n  const queryResult = useQuery(\n    GetOrdersOfUserQuery,\n    {\n      variables: {\n        user: user._id,\n        offset: 0,\n        limit: 10000,\n      },\n    },\n    {}\n  );\n  const { data, loading, fetchMore, error, startPolling, stopPolling } =\n    queryResult;\n\n  React.useEffect(() => {\n    // check server for updates every 1000ms\n    startPolling(1000);\n    // stop polling server for data when component unmounts\n    // return () => stopPolling();\n  }, [startPolling, stopPolling]);\n\n  if (error) {\n    throw new Error(JSON.stringify(error, null, 2));\n  }\n  // If the query has finished, return the deliveries from the result data\n  // Otherwise, return an empty list\n  const ordersPoll = data?.orders ?? [];\n  console.log(data)\n\n  return {\n    ordersPoll,\n    fetchMore,\n    loading,\n  };\n}\n\n\n\n\n\n\n\n\nexport default getOrders;\n"]},"metadata":{},"sourceType":"module"}