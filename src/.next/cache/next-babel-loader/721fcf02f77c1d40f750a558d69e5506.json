{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/pulkitshah/Desktop/truckarv2/renderer/components/dashboard/autocompletes/saleType-autocomplete/saleType-autocomplete.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Autocomplete, Grid, TextField } from \"@mui/material\";\n\nconst SaleTypeAutocomplete = ({\n  formik\n}) => {\n  const {\n    0: open,\n    1: setOpen\n  } = useState(false);\n  const [inputValue, setInputValue] = React.useState(\"\");\n  const saleTypes = [{\n    value: \"quantity\",\n    unit: \"MT\",\n    label: \"Per MT\"\n  }, {\n    value: \"quantity\",\n    unit: \"Kg\",\n    label: \"Per Kg\"\n  }, {\n    value: \"quantity\",\n    unit: \"Box\",\n    label: \"Per Box\"\n  }, {\n    value: \"quantity\",\n    unit: \"Pc\",\n    label: \"Per Pcs\"\n  }, {\n    value: \"time\",\n    unit: \"Day\",\n    label: \"Per Days\"\n  }, {\n    value: \"fixed\",\n    label: \"Fixed\"\n  }];\n\n  const handleOnChange = (event, newValue) => {\n    formik.setFieldValue(\"saleType\", newValue);\n  };\n\n  const handleInputChange = (event, newInputValue) => {\n    setInputValue(newInputValue);\n  };\n\n  return /*#__PURE__*/_jsxDEV(Grid, {\n    item: true,\n    children: /*#__PURE__*/_jsxDEV(Autocomplete, {\n      autoSelect: true,\n      blurOnSelect: true,\n      id: \"saleType\",\n      open: open,\n      onOpen: () => {\n        setOpen(true);\n      },\n      onClose: () => {\n        setOpen(false);\n      },\n      getOptionSelected: (option, value) => {\n        if (value) return option.label === value.label.replace(/\\w\\S*/g, function (txt) {\n          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();\n        });\n      },\n      getOptionLabel: option => {\n        return option && option.label;\n      },\n      freeSolo: false,\n      options: saleTypes,\n      value: formik.values.saleType,\n      onChange: handleOnChange,\n      inputValue: inputValue,\n      onInputChange: handleInputChange,\n      renderInput: params => /*#__PURE__*/_jsxDEV(TextField, _objectSpread(_objectSpread({}, params), {}, {\n        name: \"saleType\",\n        label: \"Sale Type\",\n        variant: \"outlined\",\n        error: Boolean(formik.touched.saleType && formik.errors.saleType),\n        fullWidth: true,\n        helperText: formik.touched.saleType && formik.errors.saleType,\n        onBlur: formik.handleBlur\n      }), void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 5\n  }, this);\n};\n\nSaleTypeAutocomplete.propTypes = {\n  className: PropTypes.string\n};\nexport default SaleTypeAutocomplete;","map":{"version":3,"sources":["/Users/pulkitshah/Desktop/truckarv2/renderer/components/dashboard/autocompletes/saleType-autocomplete/saleType-autocomplete.js"],"names":["React","useState","PropTypes","Autocomplete","Grid","TextField","SaleTypeAutocomplete","formik","open","setOpen","inputValue","setInputValue","saleTypes","value","unit","label","handleOnChange","event","newValue","setFieldValue","handleInputChange","newInputValue","option","replace","txt","charAt","toUpperCase","substr","toLowerCase","values","saleType","params","Boolean","touched","errors","handleBlur","propTypes","className","string"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Autocomplete, Grid, TextField } from \"@mui/material\";\n\nconst SaleTypeAutocomplete = ({ formik }) => {\n  const [open, setOpen] = useState(false);\n  const [inputValue, setInputValue] = React.useState(\"\");\n\n  const saleTypes = [\n    {\n      value: \"quantity\",\n      unit: \"MT\",\n      label: \"Per MT\",\n    },\n    {\n      value: \"quantity\",\n      unit: \"Kg\",\n      label: \"Per Kg\",\n    },\n    {\n      value: \"quantity\",\n      unit: \"Box\",\n      label: \"Per Box\",\n    },\n    {\n      value: \"quantity\",\n      unit: \"Pc\",\n      label: \"Per Pcs\",\n    },\n    {\n      value: \"time\",\n      unit: \"Day\",\n      label: \"Per Days\",\n    },\n    {\n      value: \"fixed\",\n      label: \"Fixed\",\n    },\n  ];\n\n  const handleOnChange = (event, newValue) => {\n    formik.setFieldValue(\"saleType\", newValue);\n  };\n\n  const handleInputChange = (event, newInputValue) => {\n    setInputValue(newInputValue);\n  };\n\n  return (\n    <Grid item>\n      <Autocomplete\n        autoSelect={true}\n        blurOnSelect={true}\n        id=\"saleType\"\n        open={open}\n        onOpen={() => {\n          setOpen(true);\n        }}\n        onClose={() => {\n          setOpen(false);\n        }}\n        getOptionSelected={(option, value) => {\n          if (value)\n            return (\n              option.label ===\n              value.label.replace(/\\w\\S*/g, function (txt) {\n                return (\n                  txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase()\n                );\n              })\n            );\n        }}\n        getOptionLabel={(option) => {\n          return option && option.label;\n        }}\n        freeSolo={false}\n        options={saleTypes}\n        value={formik.values.saleType}\n        onChange={handleOnChange}\n        inputValue={inputValue}\n        onInputChange={handleInputChange}\n        renderInput={(params) => (\n          <TextField\n            {...params}\n            name=\"saleType\"\n            label=\"Sale Type\"\n            variant=\"outlined\"\n            error={Boolean(formik.touched.saleType && formik.errors.saleType)}\n            fullWidth\n            helperText={formik.touched.saleType && formik.errors.saleType}\n            onBlur={formik.handleBlur}\n          />\n        )}\n      />\n    </Grid>\n  );\n};\n\nSaleTypeAutocomplete.propTypes = {\n  className: PropTypes.string,\n};\n\nexport default SaleTypeAutocomplete;\n"]},"metadata":{},"sourceType":"module"}