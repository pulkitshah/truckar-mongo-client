{"ast":null,"code":"import { API } from \"aws-amplify\";\nimport { partiesByUser } from \"../graphql/queries\";\nimport { createParty, updateParty } from \"../graphql/mutations\";\nimport { Party } from \"../models\";\nimport { DataStore, Predicates } from \"@aws-amplify/datastore\";\nimport moment from \"moment\";\nimport { slice } from \"../slices/parties\";\nconst now = new Date();\n\nclass PartyApi {\n  async getPartiesByUser(user, dispatch) {\n    try {\n      //////////////////////// GraphQL API ////////////////////////\n      const response = await API.graphql({\n        query: partiesByUser,\n        variables: {\n          user: user.id.toString()\n        }\n      });\n      const parties = response.data.partiesByUser.items; //////////////////////// GraphQL API ////////////////////////\n      //////////////////////// DataStore API ////////////////////////\n      // const parties = await DataStore.query(Party, (c) =>\n      //   c.user(\"eq\", user.id)\n      // );\n      //////////////////////// DataStore API ////////////////////////\n      // console.log(parties);\n      // Dispatch - Reducer\n\n      dispatch(slice.actions.getParties(parties));\n      return parties;\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  async createParty(createdParty, dispatch) {\n    const createdAt = moment().toISOString();\n    let newParty = createdParty;\n    newParty.createdAt = createdAt; //////////////////////// GraphQL API ////////////////////////\n\n    const response = await API.graphql({\n      query: createParty,\n      variables: {\n        input: newParty\n      },\n      authMode: \"AMAZON_COGNITO_USER_POOLS\"\n    });\n    const party = response.data.createParty; //////////////////////// GraphQL API ////////////////////////\n    //////////////////////// DataStore API ////////////////////////\n    // const party = await DataStore.save(new Party(newParty));\n    //////////////////////// DataStore API ////////////////////////\n    // console.log(party);\n    // Dispatch - Reducer\n\n    dispatch(slice.actions.createParty({\n      party\n    }));\n    return party;\n  }\n\n  async updateParty(editedParty, dispatch) {\n    //////////////////////// GraphQL API ////////////////////////\n    const response = await API.graphql({\n      query: updateParty,\n      variables: {\n        input: editedParty\n      },\n      authMode: \"AMAZON_COGNITO_USER_POOLS\"\n    });\n    const party = response.data.updateParty; //////////////////////// GraphQL API ////////////////////////\n    // console.log(party);\n    // Dispatch - Reducer\n\n    dispatch(slice.actions.updateParty({\n      party\n    }));\n    return response;\n  }\n\n  async validateDuplicateMobile(mobile, user) {\n    const response = await API.graphql({\n      query: partiesByUser,\n      variables: {\n        user: user.id.toString()\n      }\n    });\n    const parties = response.data.partiesByUser.items;\n    console.log(parties);\n    const party = parties.find(party => {\n      return party.mobile === mobile;\n    });\n    console.log(party);\n  }\n\n}\n\nexport const partyApi = new PartyApi();","map":{"version":3,"sources":["/Users/pulkitshah/Desktop/truckarv2/renderer/api/party-api.js"],"names":["API","partiesByUser","createParty","updateParty","Party","DataStore","Predicates","moment","slice","now","Date","PartyApi","getPartiesByUser","user","dispatch","response","graphql","query","variables","id","toString","parties","data","items","actions","getParties","error","console","log","createdParty","createdAt","toISOString","newParty","input","authMode","party","editedParty","validateDuplicateMobile","mobile","find","partyApi"],"mappings":"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","sourcesContent":["import { API } from \"aws-amplify\";\nimport { partiesByUser } from \"../graphql/queries\";\nimport { createParty, updateParty } from \"../graphql/mutations\";\nimport { Party } from \"../models\";\nimport { DataStore, Predicates } from \"@aws-amplify/datastore\";\nimport moment from \"moment\";\nimport { slice } from \"../slices/parties\";\n\nconst now = new Date();\n\nclass PartyApi {\n  async getPartiesByUser(user, dispatch) {\n    try {\n      //////////////////////// GraphQL API ////////////////////////\n\n      const response = await API.graphql({\n        query: partiesByUser,\n        variables: { user: user.id.toString() },\n      });\n      const parties = response.data.partiesByUser.items;\n\n      //////////////////////// GraphQL API ////////////////////////\n\n      //////////////////////// DataStore API ////////////////////////\n\n      // const parties = await DataStore.query(Party, (c) =>\n      //   c.user(\"eq\", user.id)\n      // );\n\n      //////////////////////// DataStore API ////////////////////////\n\n      // console.log(parties);\n\n      // Dispatch - Reducer\n\n      dispatch(slice.actions.getParties(parties));\n\n      return parties;\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  async createParty(createdParty, dispatch) {\n    const createdAt = moment().toISOString();\n    let newParty = createdParty;\n    newParty.createdAt = createdAt;\n\n    //////////////////////// GraphQL API ////////////////////////\n\n    const response = await API.graphql({\n      query: createParty,\n      variables: { input: newParty },\n      authMode: \"AMAZON_COGNITO_USER_POOLS\",\n    });\n\n    const party = response.data.createParty;\n\n    //////////////////////// GraphQL API ////////////////////////\n\n    //////////////////////// DataStore API ////////////////////////\n\n    // const party = await DataStore.save(new Party(newParty));\n\n    //////////////////////// DataStore API ////////////////////////\n\n    // console.log(party);\n\n    // Dispatch - Reducer\n\n    dispatch(slice.actions.createParty({ party }));\n\n    return party;\n  }\n\n  async updateParty(editedParty, dispatch) {\n    //////////////////////// GraphQL API ////////////////////////\n\n    const response = await API.graphql({\n      query: updateParty,\n      variables: { input: editedParty },\n      authMode: \"AMAZON_COGNITO_USER_POOLS\",\n    });\n\n    const party = response.data.updateParty;\n\n    //////////////////////// GraphQL API ////////////////////////\n\n    // console.log(party);\n\n    // Dispatch - Reducer\n\n    dispatch(slice.actions.updateParty({ party }));\n\n    return response;\n  }\n\n  async validateDuplicateMobile(mobile, user) {\n    const response = await API.graphql({\n      query: partiesByUser,\n      variables: { user: user.id.toString() },\n    });\n    const parties = response.data.partiesByUser.items;\n    console.log(parties);\n    const party = parties.find((party) => {\n      return party.mobile === mobile;\n    });\n    console.log(party);\n  }\n}\n\nexport const partyApi = new PartyApi();\n"]},"metadata":{},"sourceType":"module"}