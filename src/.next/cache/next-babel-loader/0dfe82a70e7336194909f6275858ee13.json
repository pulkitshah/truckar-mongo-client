{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/pulkitshah/Desktop/truckarv2/renderer/components/dashboard/autocompletes/saleType-autocomplete/saleType-autocomplete.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useState, useEffect, useCallback } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Autocomplete, Grid, TextField } from \"@mui/material\";\nimport { useDispatch } from \"../../../../store\";\n\nconst saleTypeAutocomplete = ({\n  formik,\n  setFieldValue,\n  saleType\n}) => {\n  const {\n    0: open,\n    1: setOpen\n  } = useState(false);\n  const [inputValue, setInputValue] = React.useState(\"\");\n  const saleTypes = [{\n    value: \"quantity\",\n    unit: \"MT\",\n    label: \"Per MT\"\n  }, {\n    value: \"quantity\",\n    unit: \"Kg\",\n    label: \"Per Kg\"\n  }, {\n    value: \"quantity\",\n    unit: \"Box\",\n    label: \"Per Box\"\n  }, {\n    value: \"quantity\",\n    unit: \"Pcs\",\n    label: \"Per Pcs\"\n  }, {\n    value: \"time\",\n    unit: \"Days\",\n    label: \"Per Days\"\n  }, {\n    value: \"fixed\",\n    label: \"Fixed\"\n  }];\n  useEffect(() => {\n    console.log(saleType);\n    formik.setFieldValue(\"saleType\", saleType);\n  }, [setFieldValue, saleType]);\n\n  const handleOnChange = (event, newValue) => {\n    formik.setFieldValue(\"saleType\", newValue);\n  };\n\n  const handleInputChange = (event, newInputValue) => {\n    setInputValue(newInputValue);\n  };\n\n  return /*#__PURE__*/_jsxDEV(Autocomplete, {\n    autoSelect: true,\n    blurOnSelect: true,\n    id: \"saleType\",\n    open: open,\n    onOpen: () => {\n      setOpen(true);\n    },\n    onClose: () => {\n      setOpen(false);\n    },\n    getOptionSelected: (option, value) => {\n      if (value) return option.label === value.label.replace(/\\w\\S*/g, function (txt) {\n        return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();\n      });\n    },\n    getOptionLabel: option => {\n      return option && option.label;\n    },\n    options: saleTypes,\n    value: formik.values.saleType,\n    onChange: handleOnChange,\n    inputValue: inputValue,\n    onInputChange: handleInputChange,\n    renderInput: params => /*#__PURE__*/_jsxDEV(TextField, _objectSpread(_objectSpread({}, params), {}, {\n      name: \"saleType\",\n      label: \"Sale Type\",\n      variant: \"outlined\",\n      error: Boolean(formik.touched.saleType && formik.errors.saleType),\n      fullWidth: true,\n      helperText: formik.touched.saleType && formik.errors.saleType,\n      onBlur: formik.handleBlur\n    }), void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 5\n  }, this);\n};\n\nsaleTypeAutocomplete.propTypes = {\n  className: PropTypes.string\n};\nexport default saleTypeAutocomplete;","map":{"version":3,"sources":["/Users/pulkitshah/Desktop/truckarv2/renderer/components/dashboard/autocompletes/saleType-autocomplete/saleType-autocomplete.js"],"names":["React","useState","useEffect","useCallback","PropTypes","Autocomplete","Grid","TextField","useDispatch","saleTypeAutocomplete","formik","setFieldValue","saleType","open","setOpen","inputValue","setInputValue","saleTypes","value","unit","label","console","log","handleOnChange","event","newValue","handleInputChange","newInputValue","option","replace","txt","charAt","toUpperCase","substr","toLowerCase","values","params","Boolean","touched","errors","handleBlur","propTypes","className","string"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useCallback } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Autocomplete, Grid, TextField } from \"@mui/material\";\nimport { useDispatch } from \"../../../../store\";\n\nconst saleTypeAutocomplete = ({ formik, setFieldValue, saleType }) => {\n  const [open, setOpen] = useState(false);\n  const [inputValue, setInputValue] = React.useState(\"\");\n\n  const saleTypes = [\n    {\n      value: \"quantity\",\n      unit: \"MT\",\n      label: \"Per MT\",\n    },\n    {\n      value: \"quantity\",\n      unit: \"Kg\",\n      label: \"Per Kg\",\n    },\n    {\n      value: \"quantity\",\n      unit: \"Box\",\n      label: \"Per Box\",\n    },\n    {\n      value: \"quantity\",\n      unit: \"Pcs\",\n      label: \"Per Pcs\",\n    },\n    {\n      value: \"time\",\n      unit: \"Days\",\n      label: \"Per Days\",\n    },\n    {\n      value: \"fixed\",\n      label: \"Fixed\",\n    },\n  ];\n\n  useEffect(() => {\n    console.log(saleType);\n    formik.setFieldValue(\"saleType\", saleType);\n  }, [setFieldValue, saleType]);\n\n  const handleOnChange = (event, newValue) => {\n    formik.setFieldValue(\"saleType\", newValue);\n  };\n\n  const handleInputChange = (event, newInputValue) => {\n    setInputValue(newInputValue);\n  };\n\n  return (\n    <Autocomplete\n      autoSelect={true}\n      blurOnSelect={true}\n      id=\"saleType\"\n      open={open}\n      onOpen={() => {\n        setOpen(true);\n      }}\n      onClose={() => {\n        setOpen(false);\n      }}\n      getOptionSelected={(option, value) => {\n        if (value)\n          return (\n            option.label ===\n            value.label.replace(/\\w\\S*/g, function (txt) {\n              return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();\n            })\n          );\n      }}\n      getOptionLabel={(option) => {\n        return option && option.label;\n      }}\n      options={saleTypes}\n      value={formik.values.saleType}\n      onChange={handleOnChange}\n      inputValue={inputValue}\n      onInputChange={handleInputChange}\n      renderInput={(params) => (\n        <TextField\n          {...params}\n          name=\"saleType\"\n          label=\"Sale Type\"\n          variant=\"outlined\"\n          error={Boolean(formik.touched.saleType && formik.errors.saleType)}\n          fullWidth\n          helperText={formik.touched.saleType && formik.errors.saleType}\n          onBlur={formik.handleBlur}\n        />\n      )}\n    />\n  );\n};\n\nsaleTypeAutocomplete.propTypes = {\n  className: PropTypes.string,\n};\n\nexport default saleTypeAutocomplete;\n"]},"metadata":{},"sourceType":"module"}