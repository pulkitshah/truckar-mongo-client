{"ast":null,"code":"import _regeneratorRuntime from \"/Users/pulkitshah/Desktop/truckarv2/node_modules/next/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/pulkitshah/Desktop/truckarv2/node_modules/next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/pulkitshah/Desktop/truckarv2/node_modules/next/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/pulkitshah/Desktop/truckarv2/node_modules/next/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { API } from \"aws-amplify\";\nimport { organisationsByUser } from \"../graphql/queries\";\nimport { createOrganisation as _createOrganisation, updateOrganisation as _updateOrganisation } from \"../graphql/mutations\";\nimport { Organisation } from \"../models\";\nimport { DataStore, Predicates } from \"@aws-amplify/datastore\";\nimport moment from \"moment\";\nimport { slice } from \"../slices/organisations\";\nvar now = new Date();\n\nvar OrganisationApi = /*#__PURE__*/function () {\n  function OrganisationApi() {\n    _classCallCheck(this, OrganisationApi);\n  }\n\n  _createClass(OrganisationApi, [{\n    key: \"getOrganisationsByUser\",\n    value: function () {\n      var _getOrganisationsByUser = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(user, dispatch) {\n        var organisationesDB;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.prev = 0;\n                _context.next = 3;\n                return DataStore.query(Organisation, function (c) {\n                  return c.user(\"eq\", user.id);\n                });\n\n              case 3:\n                organisationesDB = _context.sent;\n                //////////////////////// DataStore API ////////////////////////\n                // console.log(organisationesDB);\n                // Dispatch - Reducer\n                dispatch(slice.actions.getOrganisations(organisationesDB));\n                return _context.abrupt(\"return\", organisationesDB);\n\n              case 8:\n                _context.prev = 8;\n                _context.t0 = _context[\"catch\"](0);\n                console.log(_context.t0);\n\n              case 11:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, null, [[0, 8]]);\n      }));\n\n      function getOrganisationsByUser(_x, _x2) {\n        return _getOrganisationsByUser.apply(this, arguments);\n      }\n\n      return getOrganisationsByUser;\n    }()\n  }, {\n    key: \"createOrganisation\",\n    value: function () {\n      var _createOrganisation2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(newOrganisation) {\n        var createdAt, newOrg, response, organisation;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                createdAt = moment().toISOString();\n                newOrg = newOrganisation;\n                newOrg.createdAt = createdAt; //////////////////////// GraphQL API ////////////////////////\n\n                _context2.next = 5;\n                return API.graphql({\n                  query: _createOrganisation,\n                  variables: {\n                    input: newOrg\n                  },\n                  authMode: \"AMAZON_COGNITO_USER_POOLS\"\n                });\n\n              case 5:\n                response = _context2.sent;\n                organisation = response.data.createOrganisation; //////////////////////// GraphQL API ////////////////////////\n                //////////////////////// DataStore API ////////////////////////\n                // const organisation = await DataStore.save(new Organisation(newOrg));\n                //////////////////////// DataStore API ////////////////////////\n\n                console.log(organisation);\n                return _context2.abrupt(\"return\", organisation);\n\n              case 9:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      function createOrganisation(_x3) {\n        return _createOrganisation2.apply(this, arguments);\n      }\n\n      return createOrganisation;\n    }()\n  }, {\n    key: \"updateOrganisation\",\n    value: function () {\n      var _updateOrganisation2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(editedOrganisation, dispatch) {\n        var response, organisation;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.next = 2;\n                return API.graphql({\n                  query: _updateOrganisation,\n                  variables: {\n                    input: editedOrganisation\n                  },\n                  authMode: \"AMAZON_COGNITO_USER_POOLS\"\n                });\n\n              case 2:\n                response = _context3.sent;\n                organisation = response.data.updateOrganisation; //////////////////////// GraphQL API ////////////////////////\n\n                dispatch(slice.actions.updateOrganisation({\n                  organisation: organisation\n                }));\n                return _context3.abrupt(\"return\", response);\n\n              case 6:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      }));\n\n      function updateOrganisation(_x4, _x5) {\n        return _updateOrganisation2.apply(this, arguments);\n      }\n\n      return updateOrganisation;\n    }()\n  }]);\n\n  return OrganisationApi;\n}();\n\nexport var organisationApi = new OrganisationApi();","map":{"version":3,"sources":["/Users/pulkitshah/Desktop/truckarv2/renderer/api/organisation-api.js"],"names":["API","organisationsByUser","createOrganisation","updateOrganisation","Organisation","DataStore","Predicates","moment","slice","now","Date","OrganisationApi","user","dispatch","query","c","id","organisationesDB","actions","getOrganisations","console","log","newOrganisation","createdAt","toISOString","newOrg","graphql","variables","input","authMode","response","organisation","data","editedOrganisation","organisationApi"],"mappings":";;;;AAAA,SAASA,GAAT,QAAoB,aAApB;AACA,SAASC,mBAAT,QAAoC,oBAApC;AACA,SAASC,kBAAkB,IAAlBA,mBAAT,EAA6BC,kBAAkB,IAAlBA,mBAA7B,QAAuD,sBAAvD;AACA,SAASC,YAAT,QAA6B,WAA7B;AACA,SAASC,SAAT,EAAoBC,UAApB,QAAsC,wBAAtC;AACA,OAAOC,MAAP,MAAmB,QAAnB;AACA,SAASC,KAAT,QAAsB,yBAAtB;AAEA,IAAMC,GAAG,GAAG,IAAIC,IAAJ,EAAZ;;IAEMC,e;;;;;;;;8GACyBC,I,EAAMC,Q;;;;;;;;uBAcAR,SAAS,CAACS,KAAV,CAAgBV,YAAhB,EAA8B,UAACW,CAAD;AAAA,yBAC3DA,CAAC,CAACH,IAAF,CAAO,IAAP,EAAaA,IAAI,CAACI,EAAlB,CAD2D;AAAA,iBAA9B,C;;;AAAzBC,gBAAAA,gB;AAIN;AAEA;AAEA;AAEAJ,gBAAAA,QAAQ,CAACL,KAAK,CAACU,OAAN,CAAcC,gBAAd,CAA+BF,gBAA/B,CAAD,CAAR;iDAEOA,gB;;;;;AAEPG,gBAAAA,OAAO,CAACC,GAAR;;;;;;;;;;;;;;;;;;;4GAIqBC,e;;;;;;AACjBC,gBAAAA,S,GAAYhB,MAAM,GAAGiB,WAAT,E;AACdC,gBAAAA,M,GAASH,e;AACbG,gBAAAA,MAAM,CAACF,SAAP,GAAmBA,SAAnB,C,CAEA;;;uBAEuBvB,GAAG,CAAC0B,OAAJ,CAAY;AACjCZ,kBAAAA,KAAK,EAAEZ,mBAD0B;AAEjCyB,kBAAAA,SAAS,EAAE;AAAEC,oBAAAA,KAAK,EAAEH;AAAT,mBAFsB;AAGjCI,kBAAAA,QAAQ,EAAE;AAHuB,iBAAZ,C;;;AAAjBC,gBAAAA,Q;AAMAC,gBAAAA,Y,GAAeD,QAAQ,CAACE,IAAT,CAAc9B,kB,EAEnC;AAEA;AAEA;AAEA;;AAEAkB,gBAAAA,OAAO,CAACC,GAAR,CAAYU,YAAZ;kDACOA,Y;;;;;;;;;;;;;;;;;;;4GAGgBE,kB,EAAoBpB,Q;;;;;;;uBAGpBb,GAAG,CAAC0B,OAAJ,CAAY;AACjCZ,kBAAAA,KAAK,EAAEX,mBAD0B;AAEjCwB,kBAAAA,SAAS,EAAE;AAAEC,oBAAAA,KAAK,EAAEK;AAAT,mBAFsB;AAGjCJ,kBAAAA,QAAQ,EAAE;AAHuB,iBAAZ,C;;;AAAjBC,gBAAAA,Q;AAMAC,gBAAAA,Y,GAAeD,QAAQ,CAACE,IAAT,CAAc7B,kB,EAEnC;;AAEAU,gBAAAA,QAAQ,CAACL,KAAK,CAACU,OAAN,CAAcf,kBAAd,CAAiC;AAAE4B,kBAAAA,YAAY,EAAZA;AAAF,iBAAjC,CAAD,CAAR;kDAEOD,Q;;;;;;;;;;;;;;;;;;;;;AAIX,OAAO,IAAMI,eAAe,GAAG,IAAIvB,eAAJ,EAAxB","sourcesContent":["import { API } from \"aws-amplify\";\nimport { organisationsByUser } from \"../graphql/queries\";\nimport { createOrganisation, updateOrganisation } from \"../graphql/mutations\";\nimport { Organisation } from \"../models\";\nimport { DataStore, Predicates } from \"@aws-amplify/datastore\";\nimport moment from \"moment\";\nimport { slice } from \"../slices/organisations\";\n\nconst now = new Date();\n\nclass OrganisationApi {\n  async getOrganisationsByUser(user, dispatch) {\n    try {\n      //////////////////////// GraphQL API ////////////////////////\n\n      // const response = await API.graphql({\n      //   query: organisationsByUser,\n      //   variables: { user: user.id.toString() },\n      // });\n      // const organisationesDB = response.data.organisationsByUser.items\n\n      //////////////////////// GraphQL API ////////////////////////\n\n      //////////////////////// DataStore API ////////////////////////\n\n      const organisationesDB = await DataStore.query(Organisation, (c) =>\n        c.user(\"eq\", user.id)\n      );\n\n      //////////////////////// DataStore API ////////////////////////\n\n      // console.log(organisationesDB);\n\n      // Dispatch - Reducer\n\n      dispatch(slice.actions.getOrganisations(organisationesDB));\n\n      return organisationesDB;\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  async createOrganisation(newOrganisation) {\n    const createdAt = moment().toISOString();\n    let newOrg = newOrganisation;\n    newOrg.createdAt = createdAt;\n\n    //////////////////////// GraphQL API ////////////////////////\n\n    const response = await API.graphql({\n      query: createOrganisation,\n      variables: { input: newOrg },\n      authMode: \"AMAZON_COGNITO_USER_POOLS\",\n    });\n\n    const organisation = response.data.createOrganisation;\n\n    //////////////////////// GraphQL API ////////////////////////\n\n    //////////////////////// DataStore API ////////////////////////\n\n    // const organisation = await DataStore.save(new Organisation(newOrg));\n\n    //////////////////////// DataStore API ////////////////////////\n\n    console.log(organisation);\n    return organisation;\n  }\n\n  async updateOrganisation(editedOrganisation, dispatch) {\n    //////////////////////// GraphQL API ////////////////////////\n\n    const response = await API.graphql({\n      query: updateOrganisation,\n      variables: { input: editedOrganisation },\n      authMode: \"AMAZON_COGNITO_USER_POOLS\",\n    });\n\n    const organisation = response.data.updateOrganisation;\n\n    //////////////////////// GraphQL API ////////////////////////\n\n    dispatch(slice.actions.updateOrganisation({ organisation }));\n\n    return response;\n  }\n}\n\nexport const organisationApi = new OrganisationApi();\n"]},"metadata":{},"sourceType":"module"}