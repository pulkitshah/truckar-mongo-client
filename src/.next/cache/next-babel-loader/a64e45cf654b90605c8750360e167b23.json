{"ast":null,"code":"import _defineProperty from \"/Users/pulkitshah/Desktop/truckarv2/node_modules/next/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"/Users/pulkitshah/Desktop/truckarv2/node_modules/next/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/pulkitshah/Desktop/truckarv2/renderer/components/dashboard/party/party-address-card.js\",\n    _this = this,\n    _s2 = $RefreshSig$();\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport PropTypes from \"prop-types\";\nimport { Button, Card, CardActions, CardHeader, Divider, useMediaQuery } from \"@mui/material\";\nimport { PropertyList } from \"../../property-list\";\nimport { PropertyListItem } from \"../../property-list-item\";\nimport { useDispatch } from \"../../../store\";\nimport GoogleMaps from \"./google-places-autocomplete\";\nimport React from \"react\";\nexport var AddressCard = function AddressCard(props) {\n  _s2();\n\n  var _s = $RefreshSig$();\n\n  var address = props.address;\n  var mdUp = useMediaQuery(function (theme) {\n    return theme.breakpoints.up(\"md\");\n  });\n  var align = mdUp ? \"horizontal\" : \"vertical\";\n\n  var _useState = useState(true),\n      _useState2 = _slicedToArray(_useState, 2),\n      status = _useState2[0],\n      setStatus = _useState2[1];\n\n  var toggleStatus = function toggleStatus() {\n    setStatus(!status);\n  };\n\n  var addressCard = /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Card, _objectSpread(_objectSpread({}, other), {}, {\n      children: [/*#__PURE__*/_jsxDEV(CardHeader, {\n        title: address.name,\n        action: /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"outlined\",\n          color: \"primary\",\n          onClick: toggleStatus,\n          children: \"Edit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 13\n        }, _this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 9\n      }, _this), /*#__PURE__*/_jsxDEV(Divider, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 9\n      }, _this), /*#__PURE__*/_jsxDEV(PropertyList, {\n        children: [/*#__PURE__*/_jsxDEV(PropertyListItem, {\n          align: align,\n          divider: true,\n          label: \"GSTIN\",\n          value: address.gstin\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 11\n        }, _this), /*#__PURE__*/_jsxDEV(PropertyListItem, {\n          align: align,\n          divider: true,\n          label: \"PAN\",\n          value: address.pan\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 11\n        }, _this), /*#__PURE__*/_jsxDEV(PropertyListItem, {\n          align: align,\n          divider: true,\n          label: \"Address Line 1\",\n          value: address.billingAddressLine1\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 11\n        }, _this), /*#__PURE__*/_jsxDEV(PropertyListItem, {\n          align: align,\n          divider: true,\n          label: \"Address Line 2\",\n          value: address.billingAddressLine2\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 11\n        }, _this), /*#__PURE__*/_jsxDEV(PropertyListItem, {\n          align: align,\n          disableGutters: true,\n          label: \"City\",\n          value: JSON.parse(address.city).description\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 11\n        }, _this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 9\n      }, _this)]\n    }), void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }, _this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 5\n  }, _this);\n\n  var PartyAddressForm = function PartyAddressForm(props) {\n    _s();\n\n    var onCancel = props.onCancel,\n        address = props.address;\n    var dispatch = useDispatch();\n  };\n\n  _s(PartyAddressForm, \"rgTLoBID190wEKCp9+G8W6F7A5M=\", false, function () {\n    return [useDispatch];\n  });\n\n  return status ? {\n    addressCard: addressCard\n  } : {\n    PartyAddressForm: PartyAddressForm\n  };\n};\n\n_s2(AddressCard, \"C3mJ7BUoZ6s4DrMMBGjOFkpE7VA=\", false, function () {\n  return [useMediaQuery];\n});\n\n_c = AddressCard;\n\nvar _c;\n\n$RefreshReg$(_c, \"AddressCard\");","map":{"version":3,"sources":["/Users/pulkitshah/Desktop/truckarv2/renderer/components/dashboard/party/party-address-card.js"],"names":["PropTypes","Button","Card","CardActions","CardHeader","Divider","useMediaQuery","PropertyList","PropertyListItem","useDispatch","GoogleMaps","React","AddressCard","props","address","mdUp","theme","breakpoints","up","align","useState","status","setStatus","toggleStatus","addressCard","other","name","gstin","pan","billingAddressLine1","billingAddressLine2","JSON","parse","city","description","PartyAddressForm","onCancel","dispatch"],"mappings":"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","sourcesContent":["import PropTypes from \"prop-types\";\nimport {\n  Button,\n  Card,\n  CardActions,\n  CardHeader,\n  Divider,\n  useMediaQuery,\n} from \"@mui/material\";\nimport { PropertyList } from \"../../property-list\";\nimport { PropertyListItem } from \"../../property-list-item\";\nimport { useDispatch } from \"../../../store\";\nimport GoogleMaps from \"./google-places-autocomplete\";\n\nimport React from \"react\";\n\nexport const AddressCard = (props) => {\n  const { address } = props;\n  const mdUp = useMediaQuery((theme) => theme.breakpoints.up(\"md\"));\n\n  const align = mdUp ? \"horizontal\" : \"vertical\";\n\n  const [status, setStatus] = useState(true);\n  const toggleStatus = () => {\n    setStatus(!status);\n  };\n\n  let addressCard = (\n    <React.Fragment>\n      <Card {...other}>\n        <CardHeader\n          title={address.name}\n          action={\n            <Button variant=\"outlined\" color=\"primary\" onClick={toggleStatus}>\n              Edit\n            </Button>\n          }\n        />\n        <Divider />\n        <PropertyList>\n          <PropertyListItem\n            align={align}\n            divider\n            label=\"GSTIN\"\n            value={address.gstin}\n          />\n          <PropertyListItem\n            align={align}\n            divider\n            label=\"PAN\"\n            value={address.pan}\n          />\n          <PropertyListItem\n            align={align}\n            divider\n            label=\"Address Line 1\"\n            value={address.billingAddressLine1}\n          />\n          <PropertyListItem\n            align={align}\n            divider\n            label=\"Address Line 2\"\n            value={address.billingAddressLine2}\n          />\n          <PropertyListItem\n            align={align}\n            disableGutters\n            label=\"City\"\n            value={JSON.parse(address.city).description}\n          />\n        </PropertyList>\n      </Card>\n    </React.Fragment>\n  );\n\n  const PartyAddressForm = (props) => {\n    const { onCancel, address } = props;\n    const dispatch = useDispatch();\n  };\n\n  return status ? { addressCard } : { PartyAddressForm };\n};\n"]},"metadata":{},"sourceType":"module"}