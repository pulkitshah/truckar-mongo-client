{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/pulkitshah/Desktop/truckarv2/renderer/graphql/RealmApolloProvider.js\";\nimport React from \"react\";\nimport { useRealmApp } from \"../../renderer/contexts/jwt-context\";\nimport { ApolloClient, HttpLink, InMemoryCache, ApolloProvider } from \"@apollo/client\"; // Create an ApolloClient that connects to the provided Realm.App's GraphQL API\n\nconst createRealmApolloClient = app => {\n  const link = new HttpLink({\n    // Realm apps use a standard GraphQL endpoint, identified by their App ID\n    uri: `https://realm.mongodb.com/api/client/v2.0/app/${app.id}/graphql`,\n    // A custom fetch handler adds the logged in user's access token to GraphQL requests\n    fetch: async (uri, options) => {\n      if (!app.currentUser) {\n        throw new Error(`Must be logged in to use the GraphQL API`);\n      } // Refreshing a user's custom data also refreshes their access token\n\n\n      await app.currentUser.refreshCustomData(); // The handler adds a bearer token Authorization header to the otherwise unchanged request\n\n      options.headers.Authorization = `Bearer ${app.currentUser.accessToken}`;\n      return fetch(uri, options);\n    },\n    connectToDevTools: true\n  });\n  const cache = new InMemoryCache();\n  return new ApolloClient({\n    link,\n    cache\n  });\n};\n\nexport default function RealmApolloProvider({\n  children\n}) {\n  const app = useRealmApp();\n  const [client, setClient] = React.useState(createRealmApolloClient(app));\n  React.useEffect(() => {\n    setClient(createRealmApolloClient(app));\n  }, [app]);\n  return /*#__PURE__*/_jsxDEV(ApolloProvider, {\n    client: client,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 10\n  }, this);\n}","map":{"version":3,"sources":["/Users/pulkitshah/Desktop/truckarv2/renderer/graphql/RealmApolloProvider.js"],"names":["React","useRealmApp","ApolloClient","HttpLink","InMemoryCache","ApolloProvider","createRealmApolloClient","app","link","uri","id","fetch","options","currentUser","Error","refreshCustomData","headers","Authorization","accessToken","connectToDevTools","cache","RealmApolloProvider","children","client","setClient","useState","useEffect"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,WAAT,QAA4B,qCAA5B;AACA,SACEC,YADF,EAEEC,QAFF,EAGEC,aAHF,EAIEC,cAJF,QAKO,gBALP,C,CAOA;;AACA,MAAMC,uBAAuB,GAAIC,GAAD,IAAS;AACvC,QAAMC,IAAI,GAAG,IAAIL,QAAJ,CAAa;AACxB;AACAM,IAAAA,GAAG,EAAG,iDAAgDF,GAAG,CAACG,EAAG,UAFrC;AAGxB;AACAC,IAAAA,KAAK,EAAE,OAAOF,GAAP,EAAYG,OAAZ,KAAwB;AAC7B,UAAI,CAACL,GAAG,CAACM,WAAT,EAAsB;AACpB,cAAM,IAAIC,KAAJ,CAAW,0CAAX,CAAN;AACD,OAH4B,CAI7B;;;AACA,YAAMP,GAAG,CAACM,WAAJ,CAAgBE,iBAAhB,EAAN,CAL6B,CAM7B;;AACAH,MAAAA,OAAO,CAACI,OAAR,CAAgBC,aAAhB,GAAiC,UAASV,GAAG,CAACM,WAAJ,CAAgBK,WAAY,EAAtE;AACA,aAAOP,KAAK,CAACF,GAAD,EAAMG,OAAN,CAAZ;AACD,KAbuB;AAcxBO,IAAAA,iBAAiB,EAAE;AAdK,GAAb,CAAb;AAiBA,QAAMC,KAAK,GAAG,IAAIhB,aAAJ,EAAd;AAEA,SAAO,IAAIF,YAAJ,CAAiB;AAAEM,IAAAA,IAAF;AAAQY,IAAAA;AAAR,GAAjB,CAAP;AACD,CArBD;;AAuBA,eAAe,SAASC,mBAAT,CAA6B;AAAEC,EAAAA;AAAF,CAA7B,EAA2C;AACxD,QAAMf,GAAG,GAAGN,WAAW,EAAvB;AACA,QAAM,CAACsB,MAAD,EAASC,SAAT,IAAsBxB,KAAK,CAACyB,QAAN,CAAenB,uBAAuB,CAACC,GAAD,CAAtC,CAA5B;AACAP,EAAAA,KAAK,CAAC0B,SAAN,CAAgB,MAAM;AACpBF,IAAAA,SAAS,CAAClB,uBAAuB,CAACC,GAAD,CAAxB,CAAT;AACD,GAFD,EAEG,CAACA,GAAD,CAFH;AAGA,sBAAO,QAAC,cAAD;AAAgB,IAAA,MAAM,EAAEgB,MAAxB;AAAA,cAAiCD;AAAjC;AAAA;AAAA;AAAA;AAAA,UAAP;AACD","sourcesContent":["import React from \"react\";\nimport { useRealmApp } from \"../../renderer/contexts/jwt-context\";\nimport {\n  ApolloClient,\n  HttpLink,\n  InMemoryCache,\n  ApolloProvider,\n} from \"@apollo/client\";\n\n// Create an ApolloClient that connects to the provided Realm.App's GraphQL API\nconst createRealmApolloClient = (app) => {\n  const link = new HttpLink({\n    // Realm apps use a standard GraphQL endpoint, identified by their App ID\n    uri: `https://realm.mongodb.com/api/client/v2.0/app/${app.id}/graphql`,\n    // A custom fetch handler adds the logged in user's access token to GraphQL requests\n    fetch: async (uri, options) => {\n      if (!app.currentUser) {\n        throw new Error(`Must be logged in to use the GraphQL API`);\n      }\n      // Refreshing a user's custom data also refreshes their access token\n      await app.currentUser.refreshCustomData();\n      // The handler adds a bearer token Authorization header to the otherwise unchanged request\n      options.headers.Authorization = `Bearer ${app.currentUser.accessToken}`;\n      return fetch(uri, options);\n    },\n    connectToDevTools: true,\n  });\n\n  const cache = new InMemoryCache();\n\n  return new ApolloClient({ link, cache });\n};\n\nexport default function RealmApolloProvider({ children }) {\n  const app = useRealmApp();\n  const [client, setClient] = React.useState(createRealmApolloClient(app));\n  React.useEffect(() => {\n    setClient(createRealmApolloClient(app));\n  }, [app]);\n  return <ApolloProvider client={client}>{children}</ApolloProvider>;\n}\n"]},"metadata":{},"sourceType":"module"}