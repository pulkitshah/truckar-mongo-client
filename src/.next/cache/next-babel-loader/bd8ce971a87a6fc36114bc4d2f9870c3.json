{"ast":null,"code":"import _regeneratorRuntime from \"/Users/pulkitshah/Desktop/truckarv2/node_modules/next/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/pulkitshah/Desktop/truckarv2/node_modules/next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { nanoid } from \"nanoid\";\nimport axios from \"../utils/axios\"; // var electron = require('electron');\n\nimport electron from \"electron\";\nvar ipcRenderer = electron.ipcRenderer || false;\n\nfunction waitForEvent(emitter, channel) {\n  // https://www.derpturkey.com/event-emitter-to-promise/\n  return new Promise(function (resolve) {\n    emitter.once(channel, function (event, data) {\n      resolve(data);\n    });\n  });\n}\n\nexport var fetchApiResult = !ipcRenderer ? /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(url, method, payload) {\n    var response;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            _context.next = 3;\n            return axios[method](\"http://localhost:3001\".concat(url), payload);\n\n          case 3:\n            response = _context.sent;\n            return _context.abrupt(\"return\", response);\n\n          case 7:\n            _context.prev = 7;\n            _context.t0 = _context[\"catch\"](0);\n\n            if (!_context.t0.error) {\n              _context.next = 14;\n              break;\n            }\n\n            // The request was made and the server responded with a status code\n            // that falls out of the range of 2xx\n            console.log(_context.t0.error);\n            throw new Error(_context.t0.error);\n\n          case 14:\n            if (!_context.t0.request) {\n              _context.next = 19;\n              break;\n            }\n\n            // The request was made but no response was received\n            // `error.request` is an instance of XMLHttpRequest in the browser and an instance of\n            // http.ClientRequest in node.js\n            console.log(_context.t0.request);\n            throw new Error(\"Check Internet Connection\");\n\n          case 19:\n            // Something happened in setting up the request that triggered an Error\n            console.log(\"Error\", _context.t0);\n            throw new Error(\"Something went wrong. Please contact Customer Support.\");\n\n          case 21:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[0, 7]]);\n  }));\n\n  return function (_x, _x2, _x3) {\n    return _ref.apply(this, arguments);\n  };\n}() : /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(url, method, payload) {\n    var id, response;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            id = nanoid();\n            console.log(\"electron\");\n            console.log(electron);\n            _context2.prev = 3;\n            _context2.next = 6;\n            return axios[method](\"http://localhost:3001\".concat(url), payload);\n\n          case 6:\n            response = _context2.sent;\n            return _context2.abrupt(\"return\", response);\n\n          case 10:\n            _context2.prev = 10;\n            _context2.t0 = _context2[\"catch\"](3);\n\n            if (!_context2.t0.response) {\n              _context2.next = 15;\n              break;\n            }\n\n            _context2.next = 22;\n            break;\n\n          case 15:\n            if (!_context2.t0.request) {\n              _context2.next = 20;\n              break;\n            }\n\n            // The request was made but no response was received\n            // `error.request` is an instance of XMLHttpRequest in the browser and an instance of\n            // http.ClientRequest in node.js\n            console.log(_context2.t0.request);\n            throw new Error(\"Check Internet Connection\");\n\n          case 20:\n            // Something happened in setting up the request that triggered an Error\n            console.log(\"Error\", _context2.t0.message);\n            throw new Error(\"Something went wrong. Please contact Customer Support.\");\n\n          case 22:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2, null, [[3, 10]]);\n  }));\n\n  return function (_x4, _x5, _x6) {\n    return _ref2.apply(this, arguments);\n  };\n}();","map":{"version":3,"sources":["/Users/pulkitshah/Desktop/truckarv2/renderer/helper/fetchApiResult.js"],"names":["nanoid","axios","electron","ipcRenderer","waitForEvent","emitter","channel","Promise","resolve","once","event","data","fetchApiResult","url","method","payload","response","error","console","log","Error","request","id","message"],"mappings":";;AAAA,SAASA,MAAT,QAAuB,QAAvB;AACA,OAAOC,KAAP,MAAkB,gBAAlB,C,CAEA;;AACA,OAAOC,QAAP,MAAqB,UAArB;AACA,IAAMC,WAAW,GAAGD,QAAQ,CAACC,WAAT,IAAwB,KAA5C;;AAEA,SAASC,YAAT,CAAsBC,OAAtB,EAA+BC,OAA/B,EAAwC;AACtC;AACA,SAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAa;AAC9BH,IAAAA,OAAO,CAACI,IAAR,CAAaH,OAAb,EAAsB,UAACI,KAAD,EAAQC,IAAR,EAAiB;AACrCH,MAAAA,OAAO,CAACG,IAAD,CAAP;AACD,KAFD;AAGD,GAJM,CAAP;AAKD;;AACD,OAAO,IAAMC,cAAc,GAAG,CAACT,WAAD;AAAA,sEAC1B,iBAAOU,GAAP,EAAYC,MAAZ,EAAoBC,OAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAE2Bd,KAAK,CAACa,MAAD,CAAL,gCACGD,GADH,GAErBE,OAFqB,CAF3B;;AAAA;AAEUC,YAAAA,QAFV;AAAA,6CAOWA,QAPX;;AAAA;AAAA;AAAA;;AAAA,iBASQ,YAAMC,KATd;AAAA;AAAA;AAAA;;AAUM;AACA;AACAC,YAAAA,OAAO,CAACC,GAAR,CAAY,YAAMF,KAAlB;AAZN,kBAaY,IAAIG,KAAJ,CAAU,YAAMH,KAAhB,CAbZ;;AAAA;AAAA,iBAce,YAAMI,OAdrB;AAAA;AAAA;AAAA;;AAeM;AACA;AACA;AACAH,YAAAA,OAAO,CAACC,GAAR,CAAY,YAAME,OAAlB;AAlBN,kBAmBY,IAAID,KAAJ,CAAU,2BAAV,CAnBZ;;AAAA;AAqBM;AACAF,YAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ;AAtBN,kBAuBY,IAAIC,KAAJ,CACJ,wDADI,CAvBZ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAD0B;;AAAA;AAAA;AAAA;AAAA;AAAA,uEA8B1B,kBAAOP,GAAP,EAAYC,MAAZ,EAAoBC,OAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AACQO,YAAAA,EADR,GACatB,MAAM,EADnB;AAEEkB,YAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ;AACAD,YAAAA,OAAO,CAACC,GAAR,CAAYjB,QAAZ;AAHF;AAAA;AAAA,mBAK2BD,KAAK,CAACa,MAAD,CAAL,gCACGD,GADH,GAErBE,OAFqB,CAL3B;;AAAA;AAKUC,YAAAA,QALV;AAAA,8CASWA,QATX;;AAAA;AAAA;AAAA;;AAAA,iBAWQ,aAAMA,QAXd;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA,iBAee,aAAMK,OAfrB;AAAA;AAAA;AAAA;;AAgBM;AACA;AACA;AACAH,YAAAA,OAAO,CAACC,GAAR,CAAY,aAAME,OAAlB;AAnBN,kBAoBY,IAAID,KAAJ,CAAU,2BAAV,CApBZ;;AAAA;AAsBM;AACAF,YAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqB,aAAMI,OAA3B;AAvBN,kBAwBY,IAAIH,KAAJ,CACJ,wDADI,CAxBZ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GA9B0B;;AAAA;AAAA;AAAA;AAAA,GAAvB","sourcesContent":["import { nanoid } from \"nanoid\";\nimport axios from \"../utils/axios\";\n\n// var electron = require('electron');\nimport electron from \"electron\";\nconst ipcRenderer = electron.ipcRenderer || false;\n\nfunction waitForEvent(emitter, channel) {\n  // https://www.derpturkey.com/event-emitter-to-promise/\n  return new Promise((resolve) => {\n    emitter.once(channel, (event, data) => {\n      resolve(data);\n    });\n  });\n}\nexport const fetchApiResult = !ipcRenderer\n  ? async (url, method, payload) => {\n      try {\n        const response = await axios[method](\n          `http://localhost:3001${url}`,\n          payload\n        );\n\n        return response;\n      } catch (error) {\n        if (error.error) {\n          // The request was made and the server responded with a status code\n          // that falls out of the range of 2xx\n          console.log(error.error);\n          throw new Error(error.error);\n        } else if (error.request) {\n          // The request was made but no response was received\n          // `error.request` is an instance of XMLHttpRequest in the browser and an instance of\n          // http.ClientRequest in node.js\n          console.log(error.request);\n          throw new Error(\"Check Internet Connection\");\n        } else {\n          // Something happened in setting up the request that triggered an Error\n          console.log(\"Error\", error);\n          throw new Error(\n            \"Something went wrong. Please contact Customer Support.\"\n          );\n        }\n      }\n    }\n  : async (url, method, payload) => {\n      const id = nanoid();\n      console.log(\"electron\");\n      console.log(electron);\n      try {\n        const response = await axios[method](\n          `http://localhost:3001${url}`,\n          payload\n        );\n        return response;\n      } catch (error) {\n        if (error.response) {\n          // The request was made and the server responded with a status code\n          // that falls out of the range of 2xx\n          // throw new Error(error.response.data.error);\n        } else if (error.request) {\n          // The request was made but no response was received\n          // `error.request` is an instance of XMLHttpRequest in the browser and an instance of\n          // http.ClientRequest in node.js\n          console.log(error.request);\n          throw new Error(\"Check Internet Connection\");\n        } else {\n          // Something happened in setting up the request that triggered an Error\n          console.log(\"Error\", error.message);\n          throw new Error(\n            \"Something went wrong. Please contact Customer Support.\"\n          );\n        }\n\n        // ipcRenderer.send('api', { id, url, method, payload });\n        // return await waitForEvent(ipcRenderer, id);\n      }\n    };\n"]},"metadata":{},"sourceType":"module"}