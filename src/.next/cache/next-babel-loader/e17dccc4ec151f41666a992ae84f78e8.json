{"ast":null,"code":"import { API } from \"aws-amplify\";\nimport { ordersByUser } from \"../graphql/queries\";\nimport { createOrder, updateOrder } from \"../graphql/mutations\";\nimport { Order } from \"../models\";\nimport { DataStore, Predicates } from \"@aws-amplify/datastore\";\nimport moment from \"moment\";\nimport { slice } from \"../slices/orders\";\nconst now = new Date();\n\nclass OrderApi {\n  async getOrdersByUser(user) {\n    const ordersDB = await API.graphql({\n      query: ordersByUser,\n      variables: {\n        user: user.id.toString()\n      }\n    });\n    return ordersDB;\n  }\n\n  async createOrder(newOrder, dispatch) {\n    const createdAt = moment().toISOString();\n    let newOrg = newOrder;\n    newOrg.createdAt = createdAt; //////////////////////// GraphQL API ////////////////////////\n\n    const response = await API.graphql({\n      query: createOrder,\n      variables: {\n        input: newOrg\n      },\n      authMode: \"AMAZON_COGNITO_USER_POOLS\"\n    });\n    const order = response.data.createOrder; //////////////////////// GraphQL API ////////////////////////\n    //////////////////////// DataStore API ////////////////////////\n    // const order = await DataStore.save(new Order(newOrg));\n    //////////////////////// DataStore API ////////////////////////\n\n    console.log(order); // Dispatch - Reducer\n\n    dispatch(slice.actions.createOrder({\n      order\n    }));\n    return order;\n  }\n\n  async validateDuplicateOrderNo(orderNo, user) {\n    const response = await API.graphql({\n      query: ordersByUser,\n      variables: {\n        user: user.id.toString()\n      }\n    });\n    const orders = response.data.ordersByUser.items;\n    const order = orders.find(order => {\n      return order.orderNo === orderNo;\n    });\n    return Boolean(!order);\n  }\n\n}\n\nexport const orderApi = new OrderApi();","map":{"version":3,"sources":["/Users/pulkitshah/Desktop/truckarv2/renderer/api/order-api.js"],"names":["API","ordersByUser","createOrder","updateOrder","Order","DataStore","Predicates","moment","slice","now","Date","OrderApi","getOrdersByUser","user","ordersDB","graphql","query","variables","id","toString","newOrder","dispatch","createdAt","toISOString","newOrg","response","input","authMode","order","data","console","log","actions","validateDuplicateOrderNo","orderNo","orders","items","find","Boolean","orderApi"],"mappings":"AAAA,SAASA,GAAT,QAAoB,aAApB;AACA,SAASC,YAAT,QAA6B,oBAA7B;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,sBAAzC;AACA,SAASC,KAAT,QAAsB,WAAtB;AACA,SAASC,SAAT,EAAoBC,UAApB,QAAsC,wBAAtC;AACA,OAAOC,MAAP,MAAmB,QAAnB;AACA,SAASC,KAAT,QAAsB,kBAAtB;AACA,MAAMC,GAAG,GAAG,IAAIC,IAAJ,EAAZ;;AAEA,MAAMC,QAAN,CAAe;AACb,QAAMC,eAAN,CAAsBC,IAAtB,EAA4B;AAC1B,UAAMC,QAAQ,GAAG,MAAMd,GAAG,CAACe,OAAJ,CAAY;AACjCC,MAAAA,KAAK,EAAEf,YAD0B;AAEjCgB,MAAAA,SAAS,EAAE;AAAEJ,QAAAA,IAAI,EAAEA,IAAI,CAACK,EAAL,CAAQC,QAAR;AAAR;AAFsB,KAAZ,CAAvB;AAIA,WAAOL,QAAP;AACD;;AAED,QAAMZ,WAAN,CAAkBkB,QAAlB,EAA4BC,QAA5B,EAAsC;AACpC,UAAMC,SAAS,GAAGf,MAAM,GAAGgB,WAAT,EAAlB;AACA,QAAIC,MAAM,GAAGJ,QAAb;AACAI,IAAAA,MAAM,CAACF,SAAP,GAAmBA,SAAnB,CAHoC,CAKpC;;AAEA,UAAMG,QAAQ,GAAG,MAAMzB,GAAG,CAACe,OAAJ,CAAY;AACjCC,MAAAA,KAAK,EAAEd,WAD0B;AAEjCe,MAAAA,SAAS,EAAE;AAAES,QAAAA,KAAK,EAAEF;AAAT,OAFsB;AAGjCG,MAAAA,QAAQ,EAAE;AAHuB,KAAZ,CAAvB;AAMA,UAAMC,KAAK,GAAGH,QAAQ,CAACI,IAAT,CAAc3B,WAA5B,CAboC,CAepC;AAEA;AAEA;AAEA;;AAEA4B,IAAAA,OAAO,CAACC,GAAR,CAAYH,KAAZ,EAvBoC,CAyBpC;;AAEAP,IAAAA,QAAQ,CAACb,KAAK,CAACwB,OAAN,CAAc9B,WAAd,CAA0B;AAAE0B,MAAAA;AAAF,KAA1B,CAAD,CAAR;AAEA,WAAOA,KAAP;AACD;;AAED,QAAMK,wBAAN,CAA+BC,OAA/B,EAAwCrB,IAAxC,EAA8C;AAC5C,UAAMY,QAAQ,GAAG,MAAMzB,GAAG,CAACe,OAAJ,CAAY;AACjCC,MAAAA,KAAK,EAAEf,YAD0B;AAEjCgB,MAAAA,SAAS,EAAE;AAAEJ,QAAAA,IAAI,EAAEA,IAAI,CAACK,EAAL,CAAQC,QAAR;AAAR;AAFsB,KAAZ,CAAvB;AAIA,UAAMgB,MAAM,GAAGV,QAAQ,CAACI,IAAT,CAAc5B,YAAd,CAA2BmC,KAA1C;AACA,UAAMR,KAAK,GAAGO,MAAM,CAACE,IAAP,CAAaT,KAAD,IAAW;AACnC,aAAOA,KAAK,CAACM,OAAN,KAAkBA,OAAzB;AACD,KAFa,CAAd;AAGA,WAAOI,OAAO,CAAC,CAACV,KAAF,CAAd;AACD;;AAnDY;;AAsDf,OAAO,MAAMW,QAAQ,GAAG,IAAI5B,QAAJ,EAAjB","sourcesContent":["import { API } from \"aws-amplify\";\nimport { ordersByUser } from \"../graphql/queries\";\nimport { createOrder, updateOrder } from \"../graphql/mutations\";\nimport { Order } from \"../models\";\nimport { DataStore, Predicates } from \"@aws-amplify/datastore\";\nimport moment from \"moment\";\nimport { slice } from \"../slices/orders\";\nconst now = new Date();\n\nclass OrderApi {\n  async getOrdersByUser(user) {\n    const ordersDB = await API.graphql({\n      query: ordersByUser,\n      variables: { user: user.id.toString() },\n    });\n    return ordersDB;\n  }\n\n  async createOrder(newOrder, dispatch) {\n    const createdAt = moment().toISOString();\n    let newOrg = newOrder;\n    newOrg.createdAt = createdAt;\n\n    //////////////////////// GraphQL API ////////////////////////\n\n    const response = await API.graphql({\n      query: createOrder,\n      variables: { input: newOrg },\n      authMode: \"AMAZON_COGNITO_USER_POOLS\",\n    });\n\n    const order = response.data.createOrder;\n\n    //////////////////////// GraphQL API ////////////////////////\n\n    //////////////////////// DataStore API ////////////////////////\n\n    // const order = await DataStore.save(new Order(newOrg));\n\n    //////////////////////// DataStore API ////////////////////////\n\n    console.log(order);\n\n    // Dispatch - Reducer\n\n    dispatch(slice.actions.createOrder({ order }));\n\n    return order;\n  }\n\n  async validateDuplicateOrderNo(orderNo, user) {\n    const response = await API.graphql({\n      query: ordersByUser,\n      variables: { user: user.id.toString() },\n    });\n    const orders = response.data.ordersByUser.items;\n    const order = orders.find((order) => {\n      return order.orderNo === orderNo;\n    });\n    return Boolean(!order);\n  }\n}\n\nexport const orderApi = new OrderApi();\n"]},"metadata":{},"sourceType":"module"}