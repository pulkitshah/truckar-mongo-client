{"ast":null,"code":"import { API } from \"aws-amplify\";\nimport { partiesByUser } from \"../graphql/queries\";\nimport { createParty, updateParty, getPartiesByUser } from \"../graphql/mutations\";\nimport { listParties } from \"../graphql/queries\";\nimport { Party } from \"../models\";\nimport { DataStore, Predicates } from \"@aws-amplify/datastore\";\nimport moment from \"moment\";\nimport { slice } from \"../slices/parties\";\nconst now = new Date();\n\nclass PartyApi {\n  async getPartiesByUser(user, dispatch) {\n    try {\n      //////////////////////// GraphQL API ////////////////////////\n      // const response = await API.graphql({\n      //   query: partiesByUser,\n      //   variables: { user: user.id.toString() },\n      // });\n      const response = await API.graphql(graphqlOperation(listParties, {\n        user: user.id.toString()\n      }));\n      const parties = response.data.partiesByUser.items; //////////////////////// GraphQL API ////////////////////////\n      //////////////////////// DataStore API ////////////////////////\n      // const parties = await DataStore.query(Party, (c) =>\n      //   c.user(\"eq\", user.id)\n      // );\n      //////////////////////// DataStore API ////////////////////////\n\n      console.log(parties); // Dispatch - Reducer\n\n      dispatch(slice.actions.getParties(parties));\n      return parties;\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  async createParty(createdParty, dispatch) {\n    const createdAt = moment().toISOString();\n    let newParty = createdParty;\n    newParty.createdAt = createdAt; //////////////////////// GraphQL API ////////////////////////\n\n    const response = await API.graphql({\n      query: createParty,\n      variables: {\n        input: newParty\n      },\n      authMode: \"AMAZON_COGNITO_USER_POOLS\"\n    });\n    const party = response.data.createParty; //////////////////////// GraphQL API ////////////////////////\n    //////////////////////// DataStore API ////////////////////////\n    // const party = await DataStore.save(new Party(newParty));\n    //////////////////////// DataStore API ////////////////////////\n    // console.log(party);\n    // Dispatch - Reducer\n\n    dispatch(slice.actions.createParty({\n      party\n    }));\n    return party;\n  }\n\n  async updateParty(editedParty, dispatch) {\n    //////////////////////// GraphQL API ////////////////////////\n    const response = await API.graphql({\n      query: updateParty,\n      variables: {\n        input: editedParty\n      },\n      authMode: \"AMAZON_COGNITO_USER_POOLS\"\n    });\n    const party = response.data.updateParty; //////////////////////// GraphQL API ////////////////////////\n    // console.log(party);\n    // Dispatch - Reducer\n\n    dispatch(slice.actions.updateParty({\n      party\n    }));\n    return response;\n  }\n\n  async validateDuplicateName(name, user) {\n    const response = await API.graphql({\n      query: partiesByUser,\n      variables: {\n        user: user.id.toString()\n      }\n    });\n    const parties = response.data.partiesByUser.items;\n    const party = parties.find(party => {\n      return party.name === name;\n    });\n    return Boolean(!party);\n  }\n\n  async validateDuplicateMobile(mobile, user) {\n    const response = await API.graphql({\n      query: partiesByUser,\n      variables: {\n        user: user.id.toString()\n      }\n    });\n    const parties = response.data.partiesByUser.items;\n    const party = parties.find(party => {\n      return party.mobile === mobile;\n    });\n    return Boolean(!party);\n  }\n\n}\n\nexport const partyApi = new PartyApi();","map":{"version":3,"sources":["/Users/pulkitshah/Desktop/truckarv2/renderer/api/party-api.js"],"names":["API","partiesByUser","createParty","updateParty","getPartiesByUser","listParties","Party","DataStore","Predicates","moment","slice","now","Date","PartyApi","user","dispatch","response","graphql","graphqlOperation","id","toString","parties","data","items","console","log","actions","getParties","error","createdParty","createdAt","toISOString","newParty","query","variables","input","authMode","party","editedParty","validateDuplicateName","name","find","Boolean","validateDuplicateMobile","mobile","partyApi"],"mappings":"AAAA,SAASA,GAAT,QAAoB,aAApB;AACA,SAASC,aAAT,QAA8B,oBAA9B;AACA,SACEC,WADF,EAEEC,WAFF,EAGEC,gBAHF,QAIO,sBAJP;AAKA,SAASC,WAAT,QAA4B,oBAA5B;AACA,SAASC,KAAT,QAAsB,WAAtB;AACA,SAASC,SAAT,EAAoBC,UAApB,QAAsC,wBAAtC;AACA,OAAOC,MAAP,MAAmB,QAAnB;AACA,SAASC,KAAT,QAAsB,mBAAtB;AAEA,MAAMC,GAAG,GAAG,IAAIC,IAAJ,EAAZ;;AAEA,MAAMC,QAAN,CAAe;AACb,QAAMT,gBAAN,CAAuBU,IAAvB,EAA6BC,QAA7B,EAAuC;AACrC,QAAI;AACF;AAEA;AACA;AACA;AACA;AACA,YAAMC,QAAQ,GAAG,MAAMhB,GAAG,CAACiB,OAAJ,CACrBC,gBAAgB,CAACb,WAAD,EAAc;AAAES,QAAAA,IAAI,EAAEA,IAAI,CAACK,EAAL,CAAQC,QAAR;AAAR,OAAd,CADK,CAAvB;AAGA,YAAMC,OAAO,GAAGL,QAAQ,CAACM,IAAT,CAAcrB,aAAd,CAA4BsB,KAA5C,CAVE,CAYF;AAEA;AAEA;AACA;AACA;AAEA;;AAEAC,MAAAA,OAAO,CAACC,GAAR,CAAYJ,OAAZ,EAtBE,CAwBF;;AAEAN,MAAAA,QAAQ,CAACL,KAAK,CAACgB,OAAN,CAAcC,UAAd,CAAyBN,OAAzB,CAAD,CAAR;AAEA,aAAOA,OAAP;AACD,KA7BD,CA6BE,OAAOO,KAAP,EAAc;AACdJ,MAAAA,OAAO,CAACC,GAAR,CAAYG,KAAZ;AACD;AACF;;AAED,QAAM1B,WAAN,CAAkB2B,YAAlB,EAAgCd,QAAhC,EAA0C;AACxC,UAAMe,SAAS,GAAGrB,MAAM,GAAGsB,WAAT,EAAlB;AACA,QAAIC,QAAQ,GAAGH,YAAf;AACAG,IAAAA,QAAQ,CAACF,SAAT,GAAqBA,SAArB,CAHwC,CAKxC;;AAEA,UAAMd,QAAQ,GAAG,MAAMhB,GAAG,CAACiB,OAAJ,CAAY;AACjCgB,MAAAA,KAAK,EAAE/B,WAD0B;AAEjCgC,MAAAA,SAAS,EAAE;AAAEC,QAAAA,KAAK,EAAEH;AAAT,OAFsB;AAGjCI,MAAAA,QAAQ,EAAE;AAHuB,KAAZ,CAAvB;AAMA,UAAMC,KAAK,GAAGrB,QAAQ,CAACM,IAAT,CAAcpB,WAA5B,CAbwC,CAexC;AAEA;AAEA;AAEA;AAEA;AAEA;;AAEAa,IAAAA,QAAQ,CAACL,KAAK,CAACgB,OAAN,CAAcxB,WAAd,CAA0B;AAAEmC,MAAAA;AAAF,KAA1B,CAAD,CAAR;AAEA,WAAOA,KAAP;AACD;;AAED,QAAMlC,WAAN,CAAkBmC,WAAlB,EAA+BvB,QAA/B,EAAyC;AACvC;AAEA,UAAMC,QAAQ,GAAG,MAAMhB,GAAG,CAACiB,OAAJ,CAAY;AACjCgB,MAAAA,KAAK,EAAE9B,WAD0B;AAEjC+B,MAAAA,SAAS,EAAE;AAAEC,QAAAA,KAAK,EAAEG;AAAT,OAFsB;AAGjCF,MAAAA,QAAQ,EAAE;AAHuB,KAAZ,CAAvB;AAMA,UAAMC,KAAK,GAAGrB,QAAQ,CAACM,IAAT,CAAcnB,WAA5B,CATuC,CAWvC;AAEA;AAEA;;AAEAY,IAAAA,QAAQ,CAACL,KAAK,CAACgB,OAAN,CAAcvB,WAAd,CAA0B;AAAEkC,MAAAA;AAAF,KAA1B,CAAD,CAAR;AAEA,WAAOrB,QAAP;AACD;;AAED,QAAMuB,qBAAN,CAA4BC,IAA5B,EAAkC1B,IAAlC,EAAwC;AACtC,UAAME,QAAQ,GAAG,MAAMhB,GAAG,CAACiB,OAAJ,CAAY;AACjCgB,MAAAA,KAAK,EAAEhC,aAD0B;AAEjCiC,MAAAA,SAAS,EAAE;AAAEpB,QAAAA,IAAI,EAAEA,IAAI,CAACK,EAAL,CAAQC,QAAR;AAAR;AAFsB,KAAZ,CAAvB;AAIA,UAAMC,OAAO,GAAGL,QAAQ,CAACM,IAAT,CAAcrB,aAAd,CAA4BsB,KAA5C;AACA,UAAMc,KAAK,GAAGhB,OAAO,CAACoB,IAAR,CAAcJ,KAAD,IAAW;AACpC,aAAOA,KAAK,CAACG,IAAN,KAAeA,IAAtB;AACD,KAFa,CAAd;AAGA,WAAOE,OAAO,CAAC,CAACL,KAAF,CAAd;AACD;;AAED,QAAMM,uBAAN,CAA8BC,MAA9B,EAAsC9B,IAAtC,EAA4C;AAC1C,UAAME,QAAQ,GAAG,MAAMhB,GAAG,CAACiB,OAAJ,CAAY;AACjCgB,MAAAA,KAAK,EAAEhC,aAD0B;AAEjCiC,MAAAA,SAAS,EAAE;AAAEpB,QAAAA,IAAI,EAAEA,IAAI,CAACK,EAAL,CAAQC,QAAR;AAAR;AAFsB,KAAZ,CAAvB;AAIA,UAAMC,OAAO,GAAGL,QAAQ,CAACM,IAAT,CAAcrB,aAAd,CAA4BsB,KAA5C;AACA,UAAMc,KAAK,GAAGhB,OAAO,CAACoB,IAAR,CAAcJ,KAAD,IAAW;AACpC,aAAOA,KAAK,CAACO,MAAN,KAAiBA,MAAxB;AACD,KAFa,CAAd;AAGA,WAAOF,OAAO,CAAC,CAACL,KAAF,CAAd;AACD;;AAhHY;;AAmHf,OAAO,MAAMQ,QAAQ,GAAG,IAAIhC,QAAJ,EAAjB","sourcesContent":["import { API } from \"aws-amplify\";\nimport { partiesByUser } from \"../graphql/queries\";\nimport {\n  createParty,\n  updateParty,\n  getPartiesByUser,\n} from \"../graphql/mutations\";\nimport { listParties } from \"../graphql/queries\";\nimport { Party } from \"../models\";\nimport { DataStore, Predicates } from \"@aws-amplify/datastore\";\nimport moment from \"moment\";\nimport { slice } from \"../slices/parties\";\n\nconst now = new Date();\n\nclass PartyApi {\n  async getPartiesByUser(user, dispatch) {\n    try {\n      //////////////////////// GraphQL API ////////////////////////\n\n      // const response = await API.graphql({\n      //   query: partiesByUser,\n      //   variables: { user: user.id.toString() },\n      // });\n      const response = await API.graphql(\n        graphqlOperation(listParties, { user: user.id.toString() })\n      );\n      const parties = response.data.partiesByUser.items;\n\n      //////////////////////// GraphQL API ////////////////////////\n\n      //////////////////////// DataStore API ////////////////////////\n\n      // const parties = await DataStore.query(Party, (c) =>\n      //   c.user(\"eq\", user.id)\n      // );\n\n      //////////////////////// DataStore API ////////////////////////\n\n      console.log(parties);\n\n      // Dispatch - Reducer\n\n      dispatch(slice.actions.getParties(parties));\n\n      return parties;\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  async createParty(createdParty, dispatch) {\n    const createdAt = moment().toISOString();\n    let newParty = createdParty;\n    newParty.createdAt = createdAt;\n\n    //////////////////////// GraphQL API ////////////////////////\n\n    const response = await API.graphql({\n      query: createParty,\n      variables: { input: newParty },\n      authMode: \"AMAZON_COGNITO_USER_POOLS\",\n    });\n\n    const party = response.data.createParty;\n\n    //////////////////////// GraphQL API ////////////////////////\n\n    //////////////////////// DataStore API ////////////////////////\n\n    // const party = await DataStore.save(new Party(newParty));\n\n    //////////////////////// DataStore API ////////////////////////\n\n    // console.log(party);\n\n    // Dispatch - Reducer\n\n    dispatch(slice.actions.createParty({ party }));\n\n    return party;\n  }\n\n  async updateParty(editedParty, dispatch) {\n    //////////////////////// GraphQL API ////////////////////////\n\n    const response = await API.graphql({\n      query: updateParty,\n      variables: { input: editedParty },\n      authMode: \"AMAZON_COGNITO_USER_POOLS\",\n    });\n\n    const party = response.data.updateParty;\n\n    //////////////////////// GraphQL API ////////////////////////\n\n    // console.log(party);\n\n    // Dispatch - Reducer\n\n    dispatch(slice.actions.updateParty({ party }));\n\n    return response;\n  }\n\n  async validateDuplicateName(name, user) {\n    const response = await API.graphql({\n      query: partiesByUser,\n      variables: { user: user.id.toString() },\n    });\n    const parties = response.data.partiesByUser.items;\n    const party = parties.find((party) => {\n      return party.name === name;\n    });\n    return Boolean(!party);\n  }\n\n  async validateDuplicateMobile(mobile, user) {\n    const response = await API.graphql({\n      query: partiesByUser,\n      variables: { user: user.id.toString() },\n    });\n    const parties = response.data.partiesByUser.items;\n    const party = parties.find((party) => {\n      return party.mobile === mobile;\n    });\n    return Boolean(!party);\n  }\n}\n\nexport const partyApi = new PartyApi();\n"]},"metadata":{},"sourceType":"module"}