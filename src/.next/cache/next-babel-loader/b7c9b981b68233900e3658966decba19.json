{"ast":null,"code":"export var getSumOfExpenses = function getSumOfExpenses(expenses) {\n  if (expenses && expenses.length > 0) {\n    var total = 0;\n\n    for (var i = 0; i < expenses.length; i++) {\n      total += parseFloat(expenses[i].expenseAmount || 0);\n    }\n\n    return total;\n  } else {\n    return 0;\n  }\n};\nexport var getSumOfExpensesByCategory = function getSumOfExpensesByCategory(expenses) {\n  console.log(expenses);\n  var result = expenses.reduce(function (acc, n) {\n    if (acc.hasOwnProperty(n.expenseName.name)) acc[n.expenseName.name] += parseFloat(n.expenseAmount);else acc[n.expenseName.name] = parseFloat(n.expenseAmount);\n    return acc;\n  }, {});\n  return result;\n};\nexport var getSumOfExpensesByCategoryForOthers = function getSumOfExpensesByCategoryForOthers(expenses) {\n  console.log(expenses);\n  var result = 0;\n\n  if (expenses) {\n    result = expenses.reduce(function (acc, n) {\n      if (acc.hasOwnProperty(n.expenseName)) acc[n.expenseName] += parseFloat(n.expenseAmount);else acc[n.expenseName] = parseFloat(n.expenseAmount);\n      return acc;\n    }, {});\n  }\n\n  return result;\n};\nexport var getSumOfExpensesByDisplayForOthers = function getSumOfExpensesByDisplayForOthers(expenses) {\n  console.log(expenses);\n  var result = expenses.reduce(function (acc, n) {\n    if (acc.hasOwnProperty(n.expenseDisplay)) acc[n.expenseDisplay] += parseFloat(n.expenseAmount);else acc[n.expenseDisplay] = parseFloat(n.expenseAmount);\n    return acc;\n  }, {});\n  return result;\n};\nexport var calculateAmountForDelivery = function calculateAmountForDelivery(trips, delivery, type) {\n  var sumOfBillWeight = 0;\n  trips.map(function (trip) {\n    if (Boolean(trip.billWeight)) {\n      return sumOfBillWeight = sumOfBillWeight + parseFloat(trip.billWeight);\n    }\n\n    return sumOfBillWeight;\n  });\n  var amount = 0;\n\n  if (type === 'sale') {\n    if (delivery.saleType === 'quantity' && Boolean(delivery.saleMinimumQuantity)) {\n      if (parseFloat(sumOfBillWeight) < parseFloat(delivery.saleMinimumQuantity)) {\n        amount = parseFloat(delivery.saleMinimumQuantity) * parseFloat(delivery.saleRate) * parseFloat(delivery.billWeight || 1) / parseFloat(sumOfBillWeight || trips.length);\n      } else {\n        amount = parseFloat(delivery.billWeight) * parseFloat(delivery.saleRate);\n      }\n    } else if (delivery.saleType === 'quantity') {\n      amount = parseFloat(delivery.billWeight) * parseFloat(delivery.saleRate);\n    } else {\n      if (trips[0]._id === delivery._id) {\n        amount = parseFloat(delivery.saleRate);\n      } else {\n        amount = parseFloat(0);\n      }\n    }\n\n    if (Boolean(amount || amount === 0)) {\n      return parseFloat(amount) + parseFloat(getSumOfExpenses(delivery.saleOthers) || 0);\n    } else {\n      return getSumOfExpenses(delivery.saleOthers) || 0;\n    }\n  } else {\n    if (delivery.transporter) {\n      if (delivery.purchaseType === 'quantity' && Boolean(delivery.purchaseMinimumQuantity)) {\n        if (parseFloat(sumOfBillWeight) < parseFloat(delivery.purchaseMinimumQuantity)) {\n          amount = parseFloat(delivery.purchaseMinimumQuantity) * parseFloat(delivery.purchaseRate) * parseFloat(delivery.billWeight || 1) / parseFloat(sumOfBillWeight || trips.length);\n        } else {\n          amount = parseFloat(delivery.billWeight) * parseFloat(delivery.purchaseRate);\n        }\n      } else if (delivery.purchaseType === 'quantity') {\n        amount = parseFloat(delivery.billWeight) * parseFloat(delivery.purchaseRate);\n      } else {\n        if (delivery.billWeight) {\n          amount = parseFloat(delivery.purchaseRate) * parseFloat(delivery.billWeight) / parseFloat(sumOfBillWeight);\n        } else {\n          amount = parseFloat(delivery.purchaseRate);\n        }\n      }\n    } else {\n      amount = getSumOfExpenses(delivery.tripExpenses);\n    }\n\n    if (amount) {\n      return parseFloat(amount) + parseFloat(delivery.purchaseOthers || 0);\n    } else {\n      return delivery.purchaseOthers || 0;\n    }\n  }\n};\nexport var calculateAmountForDeliveryForLr = function calculateAmountForDeliveryForLr(trips, delivery, type) {\n  var sumOfBillWeight = 0;\n  trips.map(function (trip) {\n    if (Boolean(trip.billWeight)) {\n      return sumOfBillWeight = sumOfBillWeight + parseFloat(trip.billWeight);\n    }\n\n    return sumOfBillWeight;\n  });\n  var amount = 0;\n\n  if (type === 'sale') {\n    if (delivery.saleType === 'quantity' && Boolean(delivery.saleMinimumQuantity)) {\n      if (parseFloat(sumOfBillWeight) < parseFloat(delivery.saleMinimumQuantity)) {\n        amount = parseFloat(delivery.saleMinimumQuantity) * parseFloat(delivery.saleRate) * parseFloat(delivery.billWeight || 1) / parseFloat(sumOfBillWeight || trips.length);\n      } else {\n        amount = parseFloat(delivery.billWeight) * parseFloat(delivery.saleRate);\n      }\n    } else if (delivery.saleType === 'quantity') {\n      amount = parseFloat(delivery.billWeight) * parseFloat(delivery.saleRate);\n    } else {\n      amount = parseFloat(delivery.saleRate);\n    }\n\n    console.log(delivery);\n    console.log(amount);\n\n    if (amount) {\n      return parseFloat(amount) + (delivery.saleOthers ? parseFloat(getSumOfExpensesByDisplayForOthers(delivery.saleOthers)['lorryReceipt']) || 0 : 0);\n    } else {\n      return delivery.saleOthers ? parseFloat(getSumOfExpensesByDisplayForOthers(delivery.saleOthers)['lorryReceipt']) : 0;\n    }\n  } else {\n    if (delivery.transporter) {\n      if (delivery.purchaseType === 'quantity' && Boolean(delivery.purchaseMinimumQuantity)) {\n        if (parseFloat(sumOfBillWeight) < parseFloat(delivery.purchaseMinimumQuantity)) {\n          amount = parseFloat(delivery.purchaseMinimumQuantity) * parseFloat(delivery.purchaseRate) * parseFloat(delivery.billWeight || 1) / parseFloat(sumOfBillWeight || trips.length);\n        } else {\n          amount = parseFloat(sumOfBillWeight) * parseFloat(delivery.purchaseRate);\n        }\n      } else if (delivery.purchaseType === 'quantity') {\n        amount = parseFloat(sumOfBillWeight) * parseFloat(delivery.purchaseRate);\n      } else {\n        if (delivery.billWeight) {\n          amount = parseFloat(delivery.purchaseRate) * parseFloat(delivery.billWeight) / parseFloat(sumOfBillWeight);\n        } else {\n          amount = parseFloat(delivery.purchaseRate);\n        }\n      }\n    } else {\n      amount = getSumOfExpenses(delivery.tripExpenses);\n    }\n\n    if (amount) {\n      return parseFloat(amount) + parseFloat(delivery.purchaseOthers || 0);\n    } else {\n      return delivery.purchaseOthers || 0;\n    }\n  }\n}; // export var calculateAmount = (trips, type, advance = false) => {\n//   let sumOfBillWeight = 0;\n//   trips.map(trip => {\n//     if (Boolean(trip.billWeight)) {\n//       return (sumOfBillWeight = sumOfBillWeight + parseFloat(trip.billWeight));\n//     }\n//     return sumOfBillWeight;\n//     // return sumOfBillWeight * parseFloat(trip.sale.saleRate);\n//   });\n//   let amount = 0;\n//   if (type === 'sale') {\n//     if (\n//       trips[0].saleType === 'quantity' &&\n//       Boolean(trips[0].saleMinimumQuantity)\n//     ) {\n//       if (\n//         parseFloat(sumOfBillWeight) < parseFloat(trips[0].saleMinimumQuantity)\n//       ) {\n//         amount =\n//           parseFloat(trips[0].saleMinimumQuantity) *\n//           parseFloat(trips[0].saleRate);\n//       } else {\n//         amount = parseFloat(sumOfBillWeight) * parseFloat(trips[0].saleRate);\n//       }\n//     } else if (trips[0].saleType === 'quantity') {\n//       amount = parseFloat(sumOfBillWeight) * parseFloat(trips[0].saleRate);\n//     } else {\n//       amount = parseFloat(trips[0].saleRate);\n//     }\n//   } else {\n//     if (trips[0].transporter) {\n//       if (\n//         trips[0].purchaseType === 'quantity' &&\n//         Boolean(trips[0].purchaseMinimumQuantity)\n//       ) {\n//         if (\n//           parseFloat(sumOfBillWeight) <\n//           parseFloat(trips[0].purchaseMinimumQuantity)\n//         ) {\n//           amount =\n//             parseFloat(trips[0].purchaseMinimumQuantity) *\n//             parseFloat(trips[0].purchaseRate);\n//         } else {\n//           amount =\n//             parseFloat(sumOfBillWeight) * parseFloat(trips[0].purchaseRate);\n//         }\n//       } else if (trips[0].purchaseType === 'quantity') {\n//         amount =\n//           parseFloat(sumOfBillWeight) * parseFloat(trips[0].purchaseRate);\n//       } else {\n//         amount = parseFloat(trips[0].purchaseRate);\n//       }\n//     } else {\n//       // Add for all purchase\n//       amount = 0;\n//     }\n//   }\n//   if (amount) {\n//     if (type === 'sale') {\n//       return (\n//         parseFloat(amount) +\n//         //Adding Sale others of every delivery\n//         trips.reduce(function(sum, current) {\n//           return parseFloat(sum) + (parseFloat(current.saleOthers) || 0);\n//         }, 0) -\n//         (advance && parseFloat(trips[0].saleAdvance || 0))\n//       );\n//     } else if (type === 'purchase') {\n//       return (\n//         parseFloat(amount) +\n//         //Adding Trip Expenses\n//         getSumOfExpenses(trips[0].tripExpenses) +\n//         //Adding Purchase others of every delivery\n//         trips.reduce(function(sum, current) {\n//           return parseFloat(sum) + (parseFloat(current.purchaseOthers) || 0);\n//         }, 0) -\n//         (advance && parseFloat(trips[0].purchaseAdvance || 0))\n//       );\n//     } else {\n//       console.log('Warning, check usage of Calculate Amount');\n//       return parseFloat(amount);\n//     }\n//   } else {\n//     return 0;\n//   }\n// };\n\nexport var checkTripStatus = function checkTripStatus(trips) {\n  var status = 'Completed';\n  trips.map(function (delivery) {\n    if (delivery.status === 'pending') {\n      status = 'Pending';\n    }\n\n    return status;\n  });\n  return status;\n}; // export var calculateAmount = (trips, type, advance = false) => {\n//   let sumOfBillWeight = 0;\n//   trips.map(trip => {\n//     if (Boolean(trip.billWeight)) {\n//       return (sumOfBillWeight = sumOfBillWeight + parseFloat(trip.billWeight));\n//     }\n//     return sumOfBillWeight;\n//     // return sumOfBillWeight * parseFloat(trip.sale.saleRate);\n//   });\n//   let amount = 0;\n//   switch (type) {\n//     case 'sale':\n//       if (\n//         trips[0].saleType === 'quantity' &&\n//         Boolean(trips[0].saleMinimumQuantity)\n//       ) {\n//         if (\n//           parseFloat(sumOfBillWeight) < parseFloat(trips[0].saleMinimumQuantity)\n//         ) {\n//           amount =\n//             parseFloat(trips[0].saleMinimumQuantity) *\n//             parseFloat(trips[0].saleRate);\n//         } else {\n//           amount = parseFloat(sumOfBillWeight) * parseFloat(trips[0].saleRate);\n//         }\n//       } else if (trips[0].saleType === 'quantity') {\n//         amount = parseFloat(sumOfBillWeight) * parseFloat(trips[0].saleRate);\n//       } else {\n//         amount = parseFloat(trips[0].saleRate);\n//       }\n//       return (\n//         parseFloat(amount) +\n//         //Adding Sale others of every delivery\n//         trips.reduce(function(sum, current) {\n//           return parseFloat(sum) + (parseFloat(current.saleOthers) || 0);\n//         }, 0) -\n//         (advance && parseFloat(trips[0].saleAdvance || 0))\n//       );\n//     case 'purchase':\n//       if (trips[0].transporter) {\n//         if (\n//           trips[0].purchaseType === 'quantity' &&\n//           Boolean(trips[0].purchaseMinimumQuantity)\n//         ) {\n//           if (\n//             parseFloat(sumOfBillWeight) <\n//             parseFloat(trips[0].purchaseMinimumQuantity)\n//           ) {\n//             amount =\n//               parseFloat(trips[0].purchaseMinimumQuantity) *\n//               parseFloat(trips[0].purchaseRate);\n//           } else {\n//             amount =\n//               parseFloat(sumOfBillWeight) * parseFloat(trips[0].purchaseRate);\n//           }\n//         } else if (trips[0].purchaseType === 'quantity') {\n//           amount =\n//             parseFloat(sumOfBillWeight) * parseFloat(trips[0].purchaseRate);\n//         } else if (trips[0].purchaseType === 'commission') {\n//           if (trips[0].commissionType === 'quantity') {\n//             if (\n//               parseFloat(sumOfBillWeight) <\n//               parseFloat(trips[0].saleMinimumQuantity)\n//             ) {\n//               amount =\n//                 parseFloat(trips[0].purchaseMinimumQuantity) *\n//                 parseFloat(trips[0].purchaseRate);\n//             } else {\n//               amount =\n//                 parseFloat(sumOfBillWeight) * parseFloat(trips[0].purchaseRate);\n//             }\n//           } else if (trips[0].commissionType === 'percentage') {\n//             if (\n//               parseFloat(sumOfBillWeight) <\n//               parseFloat(trips[0].saleMinimumQuantity)\n//             ) {\n//               amount =\n//                 parseFloat(trips[0].purchaseMinimumQuantity) *\n//                 parseFloat(trips[0].purchaseRate) *\n//                 parseFloat(trips[0].saleRate / 100);\n//             } else {\n//               amount =\n//                 (parseFloat(sumOfBillWeight) *\n//                   parseFloat(trips[0].purchaseRate) *\n//                   parseFloat(trips[0].saleRate)) /\n//                 100;\n//             }\n//           } else {\n//             amount = parseFloat(trips[0].purchaseRate);\n//           }\n//         } else {\n//           amount = parseFloat(trips[0].purchaseRate);\n//         }\n//       } else {\n//         amount = 0;\n//       }\n//       return (\n//         parseFloat(amount) +\n//         //Adding Purchase others of every delivery\n//         trips.reduce(function(sum, current) {\n//           return parseFloat(sum) + (parseFloat(current.purchaseOthers) || 0);\n//         }, 0) -\n//         (advance && parseFloat(trips[0].purchaseAdvance || 0))\n//       );\n//     case 'outflow':\n//       if (trips[0].transporter) {\n//         if (\n//           trips[0].purchaseType === 'quantity' &&\n//           Boolean(trips[0].purchaseMinimumQuantity)\n//         ) {\n//           if (\n//             parseFloat(sumOfBillWeight) <\n//             parseFloat(trips[0].purchaseMinimumQuantity)\n//           ) {\n//             amount =\n//               parseFloat(trips[0].purchaseMinimumQuantity) *\n//               parseFloat(trips[0].purchaseRate);\n//           } else {\n//             amount =\n//               parseFloat(sumOfBillWeight) * parseFloat(trips[0].purchaseRate);\n//           }\n//         } else if (trips[0].purchaseType === 'quantity') {\n//           amount =\n//             parseFloat(sumOfBillWeight) * parseFloat(trips[0].purchaseRate);\n//         } else if (trips[0].purchaseType === 'commission') {\n//           if (trips[0].commissionType === 'quantity') {\n//             if (\n//               parseFloat(sumOfBillWeight) <\n//               parseFloat(trips[0].saleMinimumQuantity)\n//             ) {\n//               amount =\n//                 parseFloat(trips[0].purchaseMinimumQuantity) *\n//                 parseFloat(trips[0].purchaseRate);\n//             } else {\n//               amount =\n//                 parseFloat(sumOfBillWeight) * parseFloat(trips[0].purchaseRate);\n//             }\n//           } else if (trips[0].commissionType === 'percentage') {\n//             if (\n//               parseFloat(sumOfBillWeight) <\n//               parseFloat(trips[0].saleMinimumQuantity)\n//             ) {\n//               amount =\n//                 parseFloat(trips[0].purchaseMinimumQuantity) *\n//                 parseFloat(trips[0].purchaseRate) *\n//                 parseFloat(trips[0].saleRate / 100);\n//             } else {\n//               amount =\n//                 (parseFloat(sumOfBillWeight) *\n//                   parseFloat(trips[0].purchaseRate) *\n//                   parseFloat(trips[0].saleRate)) /\n//                 100;\n//             }\n//           } else {\n//             amount = parseFloat(trips[0].purchaseRate);\n//           }\n//         } else {\n//           amount = parseFloat(trips[0].purchaseRate);\n//         }\n//       } else {\n//         amount = 0;\n//       }\n//       return (\n//         parseFloat(amount) +\n//         //Adding Trip Expenses\n//         (getSumOfExpenses(trips[0].tripExpenses) || 0) +\n//         //Adding Purchase others of every delivery\n//         trips.reduce(function(sum, current) {\n//           return parseFloat(sum) + (parseFloat(current.purchaseOthers) || 0);\n//         }, 0) -\n//         parseFloat(trips[0].purchaseAdvance || 0)\n//       );\n//     default:\n//       return 0;\n//   }\n// };\n\nexport var getInvoiceWeight = function getInvoiceWeight(trips, delivery, type) {\n  var sumOfBillWeight = 0;\n  var deliveryArray = [];\n  trips.map(function (trip) {\n    if (Boolean(trip.billWeight)) {\n      deliveryArray.push(\"\".concat(trip.billWeight, \" MT\"));\n      return sumOfBillWeight = sumOfBillWeight + parseFloat(trip.billWeight);\n    }\n\n    deliveryArray.push(\"\".concat(0, \" MT\"));\n    return sumOfBillWeight; // return sumOfBillWeight * parseFloat(trip.sale.saleRate);\n  });\n  var weight;\n  var guarantee = false;\n  var deliveryString = [];\n\n  if (parseFloat(sumOfBillWeight) < parseFloat(trips[0].saleMinimumQuantity)) {\n    deliveryString = deliveryArray.join(' + ');\n  } else {\n    deliveryString = \"\".concat(delivery.billWeight || 0, \" MT\");\n  }\n\n  switch (type) {\n    case 'sale':\n      if (parseFloat(sumOfBillWeight) < parseFloat(trips[0].saleMinimumQuantity)) {\n        weight = parseFloat(trips[0].saleMinimumQuantity);\n        guarantee = true;\n      } else {\n        weight = parseFloat(delivery.billWeight);\n      }\n\n      return {\n        deliveryString: deliveryString,\n        weight: weight,\n        guarantee: guarantee\n      };\n\n    case 'purchase':\n      if (parseFloat(sumOfBillWeight) < parseFloat(trips[0].purchaseMinimumQuantity)) {\n        weight = parseFloat(trips[0].purchaseMinimumQuantity);\n        guarantee = true;\n      } else {\n        weight = parseFloat(delivery.billWeight);\n      }\n\n      return {\n        deliveryString: deliveryString,\n        weight: weight,\n        guarantee: guarantee\n      };\n\n    default:\n      return {\n        deliveryString: deliveryString,\n        weight: 0,\n        guarantee: guarantee\n      };\n  }\n};\nexport var formatNumber = function formatNumber(number) {\n  // this puts commas into the number eg 1000 goes to 1,000,\n  // i pulled this from stack overflow, i have no idea how it works\n  return Math.round(number).toLocaleString('en-IN');\n};\nexport var dataFormatter = function dataFormatter(expr, value) {\n  if (typeof value === 'string') {\n    return value;\n  }\n\n  var o = value;\n\n  switch (expr) {\n    case 'Turnover':\n      o = value ? \"\\u20B9 \".concat(formatNumber(value)) : '₹ 0';\n      break;\n\n    case 'Expenses':\n      o = value ? \"\\u20B9 \".concat(formatNumber(value)) : '₹ 0';\n      break;\n\n    case 'Profit':\n      o = value ? \"\\u20B9 \".concat(formatNumber(value)) : '₹ 0';\n      break;\n\n    case 'Profit / Trip':\n      o = value ? \"\\u20B9 \".concat(formatNumber(value)) : '₹ 0';\n      break;\n\n    case 'Profit / Day':\n      o = value ? \"\\u20B9 \".concat(formatNumber(value)) : '₹ 0';\n      break;\n\n    case 'Profit / Turnover':\n      o = value ? Math.round(value * 10000) / 100 + ' %' : '0 %';\n      break;\n\n    default:\n      return o;\n  }\n\n  return o;\n};\nexport var calculateAmount = function calculateAmount(trips, type) {\n  var advance = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  var sumOfBillWeight = 0;\n  trips.map(function (trip) {\n    if (Boolean(trip.billWeight)) {\n      return sumOfBillWeight = sumOfBillWeight + parseFloat(trip.billWeight);\n    }\n\n    return sumOfBillWeight; // return sumOfBillWeight * parseFloat(trip.sale.saleRate);\n  });\n  var amount = 0;\n\n  switch (type) {\n    case 'sale':\n      switch (trips[0].saleType) {\n        case 'quantity':\n          amount = parseFloat(sumOfBillWeight) * parseFloat(trips[0].saleRate);\n\n          if (parseFloat(sumOfBillWeight) < parseFloat(trips[0].saleMinimumQuantity || 0)) {\n            amount = parseFloat(trips[0].saleMinimumQuantity || 0) * parseFloat(trips[0].saleRate);\n          }\n\n          break;\n\n        case 'fixed':\n          amount = parseFloat(trips[0].saleRate);\n          break;\n\n        default:\n          break;\n      }\n\n      return parseFloat(amount) + //Adding Sale others of every delivery\n      trips.reduce(function (sum, current) {\n        return parseFloat(sum) + parseFloat(getSumOfExpenses(current.saleOthers || 0));\n      }, 0) - (advance && parseFloat(trips[0].saleAdvance || 0));\n\n    case 'purchase':\n      if (trips[0].transporter) {\n        switch (trips[0].purchaseType) {\n          case 'quantity':\n            amount = parseFloat(sumOfBillWeight) * parseFloat(trips[0].purchaseRate);\n\n            if (parseFloat(sumOfBillWeight) < parseFloat(trips[0].purchaseMinimumQuantity || 0)) {\n              amount = parseFloat(trips[0].purchaseMinimumQuantity || 0) * parseFloat(trips[0].purchaseRate);\n            }\n\n            break;\n\n          case 'fixed':\n            amount = parseFloat(trips[0].purchaseRate);\n            break;\n\n          case 'commission':\n            switch (trips[0].commissionType) {\n              case 'quantity':\n                amount = calculateAmount(trips, 'sale') - parseFloat(sumOfBillWeight) * parseFloat(trips[0].purchaseRate);\n\n                if (parseFloat(sumOfBillWeight) < parseFloat(trips[0].saleMinimumQuantity || 0)) {\n                  amount = calculateAmount(trips, 'sale') - parseFloat(trips[0].saleMinimumQuantity) * parseFloat(trips[0].purchaseRate);\n                }\n\n                break;\n\n              case 'percentage':\n                amount = calculateAmount(trips, 'sale') - parseFloat(sumOfBillWeight) * parseFloat(trips[0].purchaseRate) * parseFloat(trips[0].saleRate) / 100;\n\n                if (parseFloat(sumOfBillWeight) < parseFloat(trips[0].saleMinimumQuantity || 0)) {\n                  amount = calculateAmount(trips, 'sale') - parseFloat(trips[0].saleMinimumQuantity) * parseFloat(trips[0].purchaseRate);\n                }\n\n                break;\n\n              case 'fixed':\n                amount = calculateAmount(trips, 'sale') - parseFloat(trips[0].purchaseRate);\n                break;\n\n              default:\n                amount = 0;\n            }\n\n            break;\n\n          default:\n            break;\n        }\n      } else {\n        amount = 0;\n      }\n\n      return parseFloat(amount) + //Adding Purchase others of every delivery\n      trips.reduce(function (sum, current) {\n        return parseFloat(sum) + (parseFloat(current.purchaseOthers) || 0);\n      }, 0) - (advance && parseFloat(trips[0].purchaseAdvance || 0));\n\n    case 'outflow':\n      amount = calculateAmount(trips, 'purchase');\n      return Math.round(parseFloat(amount) + ( //Adding Trip Expenses\n      getSumOfExpenses(trips[0].tripExpenses) || 0));\n\n    default:\n      return 0;\n  }\n};","map":{"version":3,"sources":["/Users/pulkitshah/Desktop/truckarv2/renderer/utils/AmountCalculation.js"],"names":["getSumOfExpenses","expenses","length","total","i","parseFloat","expenseAmount","getSumOfExpensesByCategory","console","log","result","reduce","acc","n","hasOwnProperty","expenseName","name","getSumOfExpensesByCategoryForOthers","getSumOfExpensesByDisplayForOthers","expenseDisplay","calculateAmountForDelivery","trips","delivery","type","sumOfBillWeight","map","trip","Boolean","billWeight","amount","saleType","saleMinimumQuantity","saleRate","_id","saleOthers","transporter","purchaseType","purchaseMinimumQuantity","purchaseRate","tripExpenses","purchaseOthers","calculateAmountForDeliveryForLr","checkTripStatus","status","getInvoiceWeight","deliveryArray","push","weight","guarantee","deliveryString","join","formatNumber","number","Math","round","toLocaleString","dataFormatter","expr","value","o","calculateAmount","advance","sum","current","saleAdvance","commissionType","purchaseAdvance"],"mappings":"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AT,IAA2B,CAAlC;AACD;AACF;AACF,CA/FM,C,CAiGP;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,IAAIE,eAAe,GAAG,SAAlBA,eAAkB,CAAArB,KAAK,EAAI;AACpC,MAAIsB,MAAM,GAAG,WAAb;AACAtB,EAAAA,KAAK,CAACI,GAAN,CAAU,UAAAH,QAAQ,EAAI;AACpB,QAAIA,QAAQ,CAACqB,MAAT,KAAoB,SAAxB,EAAmC;AACjgBAAgB,GAAG,SAAnBA,gBAAmB,CAACvB,KAAD,EAAQC,QAAR,EAAkBC,IAAlB,EAA2B;AACvD,MAAIC,eAAe,GAAG,CAAtB;AACA,MAAIqB,aAAa,GAAG,EAApB;AACAxB,EAAAA,KAAK,CAACI,GAAN,CAAU,UAAAC,IAAI,EAAI;AAChB,QAAIC,OAAO,CAACD,IAAI,CAACE,UAAN,CAAX,EAA8B;AAC5BiB,MAAAA,aAAa,CAACC,IAAd,WAAsBpB,IAAI,CAACE,UAA3B;AACA,aAAQJ,eAAe,GAAGA,eAAe,GAAGnB,UAAU,CAACqB,IAAI,CAACE,UAAN,CAAtD;AACD;;AACDiB,IAAAA,aAAa,CAACC,IAAd,WAAsB,CAAtB;AACA,WAAOtB,eAAP,CANgB,CAQhB;AACD,GATD;AAUA,MAAIuB,MAAJ;AACA,MAAIC,SAAS,GAAG,KAAhB;AACA,MAAIC,cAAc,GAAG,EAArB;;AACA,MAAI5C,UAAU,CAACmB,eAAD,CAAV,GAA8BnB,UAAU,CAACgB,KAAK,CAAC,CAAD,CAAL,CAASU,mBAAV,CAA5C,EAA4E;AAC1EkB,IAAAA,cAAc,GAAGJ,aAAa,CAACK,IAAd,CAAmB,KAAnB,CAAjB;AACD,GAFD,MAEO;AACLD,IAAAA,cAAc,aAAM3B,QAAQ,CAACM,UAAT,IAAuB,CAA7B,QAAd;AACD;;AACD,UAAQL,IAAR;AACE,SAAK,MAAL;AACE,UACElB,UAAU,CAACmB,eAAD,CAAV,GAA8BnB,UAAU,CAACgB,KAAK,CAAC,CAAD,CAAL,CAASU,mBAAV,CAD1C,EAEE;AACAgB,QAAAA,MAAM,GAAG1C,UAAU,CAACgB,KAAK,CAAC,CAAD,CAAL,CAASU,mBAAV,CAAnB;AACAiB,QAAAA,SAAS,GAAG,IAAZ;AACD,OALD,MAKO;AACLD,QAAAA,MAAM,GAAG1C,UAAU,CAACiB,QAAQ,CAACM,UAAV,CAAnB;AACD;;AACD,aAAO;AAAEqB,QAAAA,cAAc,EAAdA,cAAF;AAAkBF,QAAAA,MAAM,EAANA,MAAlB;AAA0BC,QAAAA,SAAS,EAATA;AAA1B,OAAP;;AACF,SAAK,UAAL;AACE,UACE3C,UAAU,CAACmB,eAAD,CAAV,GACAnB,UAAU,CAACgB,KAAK,CAAC,CAAD,CAAL,CAASgB,uBAAV,CAFZ,EAGE;AACAU,QAAAA,MAAM,GAAG1C,UAAU,CAACgB,KAAK,CAAC,CAAD,CAAL,CAASgB,uBAAV,CAAnB;AACAW,QAAAA,SAAS,GAAG,IAAZ;AACD,OAND,MAMO;AACLD,QAAAA,MAAM,GAAG1C,UAAU,CAACiB,QAAQ,CAACM,UAAV,CAAnB;AACD;;AACD,aAAO;AAAEqB,QAAAA,cAAc,EAAdA,cAAF;AAAkBF,QAAAA,MAAM,EAANA,MAAlB;AAA0BC,QAAAA,SAAS,EAATA;AAA1B,OAAP;;AAEF;AACE,aAAO;AAAEC,QAAAA,cAAc,EAAdA,cAAF;AAAkBF,QAAAA,MAAM,EAAE,CAA1B;AAA6BC,QAAAA,SAAS,EAATA;AAA7B,OAAP;AAxBJ;AA0BD,CA/CM;AAiDP,OAAO,IAAIG,YAAY,GAAG,SAAfA,YAAe,CAAAC,MAAM,EAAI;AAClC;AACA;AACA,SAAOC,IAAI,CAACC,KAAL,CAAWF,MAAX,EAAmBG,cAAnB,CAAkC,OAAlC,CAAP;AACD,CAJM;AAMP,OAAO,IAAIC,aAAa,GAAG,SAAhBA,aAAgB,CAACC,IAAD,EAAOC,KAAP,EAAiB;AAC1C,MAAI,OAAOA,KAAP,KAAiB,QAArB,EAA+B;AAC7B,WAAOA,KAAP;AACD;;AACD,MAAIC,CAAC,GAAGD,KAAR;;AACA,UAAQD,IAAR;AACE,SAAK,UAAL;AACEE,MAAAA,CAAC,GAAGD,KAAK,oBAAQP,YAAY,CAACO,KAAD,CAApB,IAAgC,KAAzC;AACA;;AACF,SAAK,UAAL;AACEC,MAAAA,CAAC,GAAGD,KAAK,oBAAQP,YAAY,CAACO,KAAD,CAApB,IAAgC,KAAzC;AACA;;AACF,SAAK,QAAL;AACEC,MAAAA,CAAC,GAAGD,KAAK,oBAAQP,YAAY,CAACO,KAAD,CAApB,IAAgC,KAAzC;AACA;;AACF,SAAK,eAAL;AACEC,MAAAA,CAAC,GAAGD,KAAK,oBAAQP,YAAY,CAACO,KAAD,CAApB,IAAgC,KAAzC;AACA;;AACF,SAAK,cAAL;AACEC,MAAAA,CAAC,GAAGD,KAAK,oBAAQP,YAAY,CAACO,KAAD,CAApB,IAAgC,KAAzC;AACA;;AACF,SAAK,mBAAL;AACEC,MAAAA,CAAC,GAAGD,KAAK,GAAGL,IAAI,CAACC,KAAL,CAAWI,KAAK,GAAG,KAAnB,IAA4B,GAA5B,GAAkC,IAArC,GAA4C,KAArD;AACA;;AAEF;AACE,aAAOC,CAAP;AArBJ;;AAuBA,SAAOA,CAAP;AACD,CA7BM;AA+BP,OAAO,IAAIC,eAAe,GAAG,SAAlBA,eAAkB,CAACvC,KAAD,EAAQE,IAAR,EAAkC;AAAA,MAApBsC,OAAoB,uEAAV,KAAU;AAC7D,MAAIrC,eAAe,GAAG,CAAtB;AACAH,EAAAA,KAAK,CAACI,GAAN,CAAU,UAAAC,IAAI,EAAI;AAChB,QAAIC,OAAO,CAACD,IAAI,CAACE,UAAN,CAAX,EAA8B;AAC5B,aAAQJ,eAAe,GAAGA,eAAe,GAAGnB,UAAU,CAACqB,IAAI,CAACE,UAAN,CAAtD;AACD;;AACD,WAAOJ,eAAP,CAJgB,CAMhB;AACD,GAPD;AAQA,MAAIK,MAAM,GAAG,CAAb;;AAEA,UAAQN,IAAR;AACE,SAAK,MAAL;AACE,cAAQF,KAAK,CAAC,CAAD,CAAL,CAASS,QAAjB;AACE,aAAK,UAAL;AACED,UAAAA,MAAM,GAAGxB,UAAU,CAACmB,eAAD,CAAV,GAA8BnB,UAAU,CAACgB,KAAK,CAAC,CAAD,CAAL,CAASW,QAAV,CAAjD;;AACA,cACE3B,UAAU,CAACmB,eAAD,CAAV,GACAnB,UAAU,CAACgB,KAAK,CAAC,CAAD,CAAL,CAASU,mBAAT,IAAgC,CAAjC,CAFZ,EAGE;AACAF,YAAAA,MAAM,GACJxB,UAAU,CAACgB,KAAK,CAAC,CAAD,CAAL,CAASU,mBAAT,IAAgC,CAAjC,CAAV,GACA1B,UAAU,CAACgB,KAAK,CAAC,CAAD,CAAL,CAASW,QAAV,CAFZ;AAGD;;AAED;;AACF,aAAK,OAAL;AACEH,UAAAA,MAAM,GAAGxB,UAAU,CAACgB,KAAK,CAAC,CAAD,CAAL,CAASW,QAAV,CAAnB;AACA;;AAEF;AACE;AAlBJ;;AAoBA,aACE3B,UAAU,CAACwB,MAAD,CAAV,GACA;AACAR,MAAAA,KAAK,CAACV,MAAN,CAAa,UAASmD,GAAT,EAAcC,OAAd,EAAuB;AAClC,eACE1D,UAAU,CAACyD,GAAD,CAAV,GACAzD,UAAU,CAACL,gBAAgB,CAAC+D,OAAO,CAAC7B,UAAR,IAAsB,CAAvB,CAAjB,CAFZ;AAID,OALD,EAKG,CALH,CAFA,IAQC2B,OAAO,IAAIxD,UAAU,CAACgB,KAAK,CAAC,CAAD,CAAL,CAAS2C,WAAT,IAAwB,CAAzB,CARtB,CADF;;AAYF,SAAK,UAAL;AACE,UAAI3C,KAAK,CAAC,CAAD,CAAL,CAASc,WAAb,EAA0B;AACxB,gBAAQd,KAAK,CAAC,CAAD,CAAL,CAASe,YAAjB;AACE,eAAK,UAAL;AACEP,YAAAA,MAAM,GACJxB,UAAU,CAACmB,eAAD,CAAV,GAA8BnB,UAAU,CAACgB,KAAK,CAAC,CAAD,CAAL,CAASiB,YAAV,CAD1C;;AAEA,gBACEjC,UAAU,CAACmB,eAAD,CAAV,GACAnB,UAAU,CAACgB,KAAK,CAAC,CAAD,CAAL,CAASgB,uBAAT,IAAoC,CAArC,CAFZ,EAGE;AACAR,cAAAA,MAAM,GACJxB,UAAU,CAACgB,KAAK,CAAC,CAAD,CAAL,CAASgB,uBAAT,IAAoC,CAArC,CAAV,GACAhC,UAAU,CAACgB,KAAK,CAAC,CAAD,CAAL,CAASiB,YAAV,CAFZ;AAGD;;AAED;;AACF,eAAK,OAAL;AACET,YAAAA,MAAM,GAAGxB,UAAU,CAACgB,KAAK,CAAC,CAAD,CAAL,CAASiB,YAAV,CAAnB;AACA;;AAEF,eAAK,YAAL;AACE,oBAAQjB,KAAK,CAAC,CAAD,CAAL,CAAS4C,cAAjB;AACE,mBAAK,UAAL;AACEpC,gBAAAA,MAAM,GACJ+B,eAAe,CAACvC,KAAD,EAAQ,MAAR,CAAf,GACAhB,UAAU,CAACmB,eAAD,CAAV,GACEnB,UAAU,CAACgB,KAAK,CAAC,CAAD,CAAL,CAASiB,YAAV,CAHd;;AAIA,oBACEjC,UAAU,CAACmB,eAAD,CAAV,GACAnB,UAAU,CAACgB,KAAK,CAAC,CAAD,CAAL,CAASU,mBAAT,IAAgC,CAAjC,CAFZ,EAGE;AACAF,kBAAAA,MAAM,GACJ+B,eAAe,CAACvC,KAAD,EAAQ,MAAR,CAAf,GACAhB,UAAU,CAACgB,KAAK,CAAC,CAAD,CAAL,CAASU,mBAAV,CAAV,GACE1B,UAAU,CAACgB,KAAK,CAAC,CAAD,CAAL,CAASiB,YAAV,CAHd;AAID;;AACD;;AAEF,mBAAK,YAAL;AACET,gBAAAA,MAAM,GACJ+B,eAAe,CAACvC,KAAD,EAAQ,MAAR,CAAf,GACChB,UAAU,CAACmB,eAAD,CAAV,GACCnB,UAAU,CAACgB,KAAK,CAAC,CAAD,CAAL,CAASiB,YAAV,CADX,GAECjC,UAAU,CAACgB,KAAK,CAAC,CAAD,CAAL,CAASW,QAAV,CAFZ,GAGE,GALJ;;AAMA,oBACE3B,UAAU,CAACmB,eAAD,CAAV,GACAnB,UAAU,CAACgB,KAAK,CAAC,CAAD,CAAL,CAASU,mBAAT,IAAgC,CAAjC,CAFZ,EAGE;AACAF,kBAAAA,MAAM,GACJ+B,eAAe,CAACvC,KAAD,EAAQ,MAAR,CAAf,GACAhB,UAAU,CAACgB,KAAK,CAAC,CAAD,CAAL,CAASU,mBAAV,CAAV,GACE1B,UAAU,CAACgB,KAAK,CAAC,CAAD,CAAL,CAASiB,YAAV,CAHd;AAID;;AACD;;AACF,mBAAK,OAAL;AACET,gBAAAA,MAAM,GACJ+B,eAAe,CAACvC,KAAD,EAAQ,MAAR,CAAf,GACAhB,UAAU,CAACgB,KAAK,CAAC,CAAD,CAAL,CAASiB,YAAV,CAFZ;AAGA;;AACF;AACET,gBAAAA,MAAM,GAAG,CAAT;AAxCJ;;AA2CA;;AAEF;AACE;AAjEJ;AAmED,OApED,MAoEO;AACLA,QAAAA,MAAM,GAAG,CAAT;AACD;;AACD,aACExB,UAAU,CAACwB,MAAD,CAAV,GACA;AACAR,MAAAA,KAAK,CAACV,MAAN,CAAa,UAASmD,GAAT,EAAcC,OAAd,EAAuB;AAClC,eAAO1D,UAAU,CAACyD,GAAD,CAAV,IAAmBzD,UAAU,CAAC0D,OAAO,CAACvB,cAAT,CAAV,IAAsC,CAAzD,CAAP;AACD,OAFD,EAEG,CAFH,CAFA,IAKCqB,OAAO,IAAIxD,UAAU,CAACgB,KAAK,CAAC,CAAD,CAAL,CAAS6C,eAAT,IAA4B,CAA7B,CALtB,CADF;;AASF,SAAK,SAAL;AACErC,MAAAA,MAAM,GAAG+B,eAAe,CAACvC,KAAD,EAAQ,UAAR,CAAxB;AACA,aAAOgC,IAAI,CAACC,KAAL,CACLjD,UAAU,CAACwB,MAAD,CAAV,KACE;AACC7B,MAAAA,gBAAgB,CAACqB,KAAK,CAAC,CAAD,CAAL,CAASkB,YAAV,CAAhB,IAA2C,CAF9C,CADK,CAAP;;AAMF;AACE,aAAO,CAAP;AA5HJ;AA8HD,CA1IM","sourcesContent":["export var getSumOfExpenses = expenses => {\n  if (expenses && expenses.length > 0) {\n    var total = 0;\n    for (var i = 0; i < expenses.length; i++) {\n      total += parseFloat(expenses[i].expenseAmount || 0);\n    }\n    return total;\n  } else {\n    return 0;\n  }\n};\n\nexport var getSumOfExpensesByCategory = expenses => {\n  console.log(expenses);\n  var result = expenses.reduce(\n    (acc, n) => {\n      if (acc.hasOwnProperty(n.expenseName.name))\n        acc[n.expenseName.name] += parseFloat(n.expenseAmount);\n      else acc[n.expenseName.name] = parseFloat(n.expenseAmount);\n\n      return acc;\n    },\n\n    {}\n  );\n  return result;\n};\n\nexport var getSumOfExpensesByCategoryForOthers = expenses => {\n  console.log(expenses);\n  var result = 0;\n  if (expenses) {\n    result = expenses.reduce(\n      (acc, n) => {\n        if (acc.hasOwnProperty(n.expenseName))\n          acc[n.expenseName] += parseFloat(n.expenseAmount);\n        else acc[n.expenseName] = parseFloat(n.expenseAmount);\n\n        return acc;\n      },\n\n      {}\n    );\n  }\n  return result;\n};\n\nexport var getSumOfExpensesByDisplayForOthers = expenses => {\n  console.log(expenses);\n  var result = expenses.reduce(\n    (acc, n) => {\n      if (acc.hasOwnProperty(n.expenseDisplay))\n        acc[n.expenseDisplay] += parseFloat(n.expenseAmount);\n      else acc[n.expenseDisplay] = parseFloat(n.expenseAmount);\n\n      return acc;\n    },\n\n    {}\n  );\n  return result;\n};\n\nexport var calculateAmountForDelivery = (trips, delivery, type) => {\n  let sumOfBillWeight = 0;\n\n  trips.map(trip => {\n    if (Boolean(trip.billWeight)) {\n      return (sumOfBillWeight = sumOfBillWeight + parseFloat(trip.billWeight));\n    }\n    return sumOfBillWeight;\n  });\n  let amount = 0;\n  if (type === 'sale') {\n    if (\n      delivery.saleType === 'quantity' &&\n      Boolean(delivery.saleMinimumQuantity)\n    ) {\n      if (\n        parseFloat(sumOfBillWeight) < parseFloat(delivery.saleMinimumQuantity)\n      ) {\n        amount =\n          (parseFloat(delivery.saleMinimumQuantity) *\n            parseFloat(delivery.saleRate) *\n            parseFloat(delivery.billWeight || 1)) /\n          parseFloat(sumOfBillWeight || trips.length);\n      } else {\n        amount =\n          parseFloat(delivery.billWeight) * parseFloat(delivery.saleRate);\n      }\n    } else if (delivery.saleType === 'quantity') {\n      amount = parseFloat(delivery.billWeight) * parseFloat(delivery.saleRate);\n    } else {\n      if (trips[0]._id === delivery._id) {\n        amount = parseFloat(delivery.saleRate);\n      } else {\n        amount = parseFloat(0);\n      }\n    }\n    if (Boolean(amount || amount === 0)) {\n      return (\n        parseFloat(amount) +\n        parseFloat(getSumOfExpenses(delivery.saleOthers) || 0)\n      );\n    } else {\n      return getSumOfExpenses(delivery.saleOthers) || 0;\n    }\n  } else {\n    if (delivery.transporter) {\n      if (\n        delivery.purchaseType === 'quantity' &&\n        Boolean(delivery.purchaseMinimumQuantity)\n      ) {\n        if (\n          parseFloat(sumOfBillWeight) <\n          parseFloat(delivery.purchaseMinimumQuantity)\n        ) {\n          amount =\n            (parseFloat(delivery.purchaseMinimumQuantity) *\n              parseFloat(delivery.purchaseRate) *\n              parseFloat(delivery.billWeight || 1)) /\n            parseFloat(sumOfBillWeight || trips.length);\n        } else {\n          amount =\n            parseFloat(delivery.billWeight) * parseFloat(delivery.purchaseRate);\n        }\n      } else if (delivery.purchaseType === 'quantity') {\n        amount =\n          parseFloat(delivery.billWeight) * parseFloat(delivery.purchaseRate);\n      } else {\n        if (delivery.billWeight) {\n          amount =\n            (parseFloat(delivery.purchaseRate) *\n              parseFloat(delivery.billWeight)) /\n            parseFloat(sumOfBillWeight);\n        } else {\n          amount = parseFloat(delivery.purchaseRate);\n        }\n      }\n    } else {\n      amount = getSumOfExpenses(delivery.tripExpenses);\n    }\n    if (amount) {\n      return parseFloat(amount) + parseFloat(delivery.purchaseOthers || 0);\n    } else {\n      return delivery.purchaseOthers || 0;\n    }\n  }\n};\n\nexport var calculateAmountForDeliveryForLr = (trips, delivery, type) => {\n  let sumOfBillWeight = 0;\n\n  trips.map(trip => {\n    if (Boolean(trip.billWeight)) {\n      return (sumOfBillWeight = sumOfBillWeight + parseFloat(trip.billWeight));\n    }\n    return sumOfBillWeight;\n  });\n  let amount = 0;\n  if (type === 'sale') {\n    if (\n      delivery.saleType === 'quantity' &&\n      Boolean(delivery.saleMinimumQuantity)\n    ) {\n      if (\n        parseFloat(sumOfBillWeight) < parseFloat(delivery.saleMinimumQuantity)\n      ) {\n        amount =\n          (parseFloat(delivery.saleMinimumQuantity) *\n            parseFloat(delivery.saleRate) *\n            parseFloat(delivery.billWeight || 1)) /\n          parseFloat(sumOfBillWeight || trips.length);\n      } else {\n        amount =\n          parseFloat(delivery.billWeight) * parseFloat(delivery.saleRate);\n      }\n    } else if (delivery.saleType === 'quantity') {\n      amount = parseFloat(delivery.billWeight) * parseFloat(delivery.saleRate);\n    } else {\n      amount = parseFloat(delivery.saleRate);\n    }\n    console.log(delivery);\n    console.log(amount);\n    if (amount) {\n      return (\n        parseFloat(amount) +\n        (delivery.saleOthers\n          ? parseFloat(\n              getSumOfExpensesByDisplayForOthers(delivery.saleOthers)[\n                'lorryReceipt'\n              ]\n            ) || 0\n          : 0)\n      );\n    } else {\n      return delivery.saleOthers\n        ? parseFloat(\n            getSumOfExpensesByDisplayForOthers(delivery.saleOthers)[\n              'lorryReceipt'\n            ]\n          )\n        : 0;\n    }\n  } else {\n    if (delivery.transporter) {\n      if (\n        delivery.purchaseType === 'quantity' &&\n        Boolean(delivery.purchaseMinimumQuantity)\n      ) {\n        if (\n          parseFloat(sumOfBillWeight) <\n          parseFloat(delivery.purchaseMinimumQuantity)\n        ) {\n          amount =\n            (parseFloat(delivery.purchaseMinimumQuantity) *\n              parseFloat(delivery.purchaseRate) *\n              parseFloat(delivery.billWeight || 1)) /\n            parseFloat(sumOfBillWeight || trips.length);\n        } else {\n          amount =\n            parseFloat(sumOfBillWeight) * parseFloat(delivery.purchaseRate);\n        }\n      } else if (delivery.purchaseType === 'quantity') {\n        amount =\n          parseFloat(sumOfBillWeight) * parseFloat(delivery.purchaseRate);\n      } else {\n        if (delivery.billWeight) {\n          amount =\n            (parseFloat(delivery.purchaseRate) *\n              parseFloat(delivery.billWeight)) /\n            parseFloat(sumOfBillWeight);\n        } else {\n          amount = parseFloat(delivery.purchaseRate);\n        }\n      }\n    } else {\n      amount = getSumOfExpenses(delivery.tripExpenses);\n    }\n    if (amount) {\n      return parseFloat(amount) + parseFloat(delivery.purchaseOthers || 0);\n    } else {\n      return delivery.purchaseOthers || 0;\n    }\n  }\n};\n\n// export var calculateAmount = (trips, type, advance = false) => {\n//   let sumOfBillWeight = 0;\n//   trips.map(trip => {\n//     if (Boolean(trip.billWeight)) {\n//       return (sumOfBillWeight = sumOfBillWeight + parseFloat(trip.billWeight));\n//     }\n//     return sumOfBillWeight;\n\n//     // return sumOfBillWeight * parseFloat(trip.sale.saleRate);\n//   });\n//   let amount = 0;\n\n//   if (type === 'sale') {\n//     if (\n//       trips[0].saleType === 'quantity' &&\n//       Boolean(trips[0].saleMinimumQuantity)\n//     ) {\n//       if (\n//         parseFloat(sumOfBillWeight) < parseFloat(trips[0].saleMinimumQuantity)\n//       ) {\n//         amount =\n//           parseFloat(trips[0].saleMinimumQuantity) *\n//           parseFloat(trips[0].saleRate);\n//       } else {\n//         amount = parseFloat(sumOfBillWeight) * parseFloat(trips[0].saleRate);\n//       }\n//     } else if (trips[0].saleType === 'quantity') {\n//       amount = parseFloat(sumOfBillWeight) * parseFloat(trips[0].saleRate);\n//     } else {\n//       amount = parseFloat(trips[0].saleRate);\n//     }\n//   } else {\n//     if (trips[0].transporter) {\n//       if (\n//         trips[0].purchaseType === 'quantity' &&\n//         Boolean(trips[0].purchaseMinimumQuantity)\n//       ) {\n//         if (\n//           parseFloat(sumOfBillWeight) <\n//           parseFloat(trips[0].purchaseMinimumQuantity)\n//         ) {\n//           amount =\n//             parseFloat(trips[0].purchaseMinimumQuantity) *\n//             parseFloat(trips[0].purchaseRate);\n//         } else {\n//           amount =\n//             parseFloat(sumOfBillWeight) * parseFloat(trips[0].purchaseRate);\n//         }\n//       } else if (trips[0].purchaseType === 'quantity') {\n//         amount =\n//           parseFloat(sumOfBillWeight) * parseFloat(trips[0].purchaseRate);\n//       } else {\n//         amount = parseFloat(trips[0].purchaseRate);\n//       }\n//     } else {\n//       // Add for all purchase\n//       amount = 0;\n//     }\n//   }\n//   if (amount) {\n//     if (type === 'sale') {\n//       return (\n//         parseFloat(amount) +\n//         //Adding Sale others of every delivery\n//         trips.reduce(function(sum, current) {\n//           return parseFloat(sum) + (parseFloat(current.saleOthers) || 0);\n//         }, 0) -\n//         (advance && parseFloat(trips[0].saleAdvance || 0))\n//       );\n//     } else if (type === 'purchase') {\n//       return (\n//         parseFloat(amount) +\n//         //Adding Trip Expenses\n//         getSumOfExpenses(trips[0].tripExpenses) +\n//         //Adding Purchase others of every delivery\n//         trips.reduce(function(sum, current) {\n//           return parseFloat(sum) + (parseFloat(current.purchaseOthers) || 0);\n//         }, 0) -\n//         (advance && parseFloat(trips[0].purchaseAdvance || 0))\n//       );\n//     } else {\n//       console.log('Warning, check usage of Calculate Amount');\n//       return parseFloat(amount);\n//     }\n//   } else {\n//     return 0;\n//   }\n// };\n\nexport var checkTripStatus = trips => {\n  let status = 'Completed';\n  trips.map(delivery => {\n    if (delivery.status === 'pending') {\n      status = 'Pending';\n    }\n    return status;\n  });\n  return status;\n};\n\n// export var calculateAmount = (trips, type, advance = false) => {\n//   let sumOfBillWeight = 0;\n//   trips.map(trip => {\n//     if (Boolean(trip.billWeight)) {\n//       return (sumOfBillWeight = sumOfBillWeight + parseFloat(trip.billWeight));\n//     }\n//     return sumOfBillWeight;\n\n//     // return sumOfBillWeight * parseFloat(trip.sale.saleRate);\n//   });\n//   let amount = 0;\n\n//   switch (type) {\n//     case 'sale':\n//       if (\n//         trips[0].saleType === 'quantity' &&\n//         Boolean(trips[0].saleMinimumQuantity)\n//       ) {\n//         if (\n//           parseFloat(sumOfBillWeight) < parseFloat(trips[0].saleMinimumQuantity)\n//         ) {\n//           amount =\n//             parseFloat(trips[0].saleMinimumQuantity) *\n//             parseFloat(trips[0].saleRate);\n//         } else {\n//           amount = parseFloat(sumOfBillWeight) * parseFloat(trips[0].saleRate);\n//         }\n//       } else if (trips[0].saleType === 'quantity') {\n//         amount = parseFloat(sumOfBillWeight) * parseFloat(trips[0].saleRate);\n//       } else {\n//         amount = parseFloat(trips[0].saleRate);\n//       }\n//       return (\n//         parseFloat(amount) +\n//         //Adding Sale others of every delivery\n//         trips.reduce(function(sum, current) {\n//           return parseFloat(sum) + (parseFloat(current.saleOthers) || 0);\n//         }, 0) -\n//         (advance && parseFloat(trips[0].saleAdvance || 0))\n//       );\n\n//     case 'purchase':\n//       if (trips[0].transporter) {\n//         if (\n//           trips[0].purchaseType === 'quantity' &&\n//           Boolean(trips[0].purchaseMinimumQuantity)\n//         ) {\n//           if (\n//             parseFloat(sumOfBillWeight) <\n//             parseFloat(trips[0].purchaseMinimumQuantity)\n//           ) {\n//             amount =\n//               parseFloat(trips[0].purchaseMinimumQuantity) *\n//               parseFloat(trips[0].purchaseRate);\n//           } else {\n//             amount =\n//               parseFloat(sumOfBillWeight) * parseFloat(trips[0].purchaseRate);\n//           }\n//         } else if (trips[0].purchaseType === 'quantity') {\n//           amount =\n//             parseFloat(sumOfBillWeight) * parseFloat(trips[0].purchaseRate);\n//         } else if (trips[0].purchaseType === 'commission') {\n//           if (trips[0].commissionType === 'quantity') {\n//             if (\n//               parseFloat(sumOfBillWeight) <\n//               parseFloat(trips[0].saleMinimumQuantity)\n//             ) {\n//               amount =\n//                 parseFloat(trips[0].purchaseMinimumQuantity) *\n//                 parseFloat(trips[0].purchaseRate);\n//             } else {\n//               amount =\n//                 parseFloat(sumOfBillWeight) * parseFloat(trips[0].purchaseRate);\n//             }\n//           } else if (trips[0].commissionType === 'percentage') {\n//             if (\n//               parseFloat(sumOfBillWeight) <\n//               parseFloat(trips[0].saleMinimumQuantity)\n//             ) {\n//               amount =\n//                 parseFloat(trips[0].purchaseMinimumQuantity) *\n//                 parseFloat(trips[0].purchaseRate) *\n//                 parseFloat(trips[0].saleRate / 100);\n//             } else {\n//               amount =\n//                 (parseFloat(sumOfBillWeight) *\n//                   parseFloat(trips[0].purchaseRate) *\n//                   parseFloat(trips[0].saleRate)) /\n//                 100;\n//             }\n//           } else {\n//             amount = parseFloat(trips[0].purchaseRate);\n//           }\n//         } else {\n//           amount = parseFloat(trips[0].purchaseRate);\n//         }\n//       } else {\n//         amount = 0;\n//       }\n//       return (\n//         parseFloat(amount) +\n//         //Adding Purchase others of every delivery\n//         trips.reduce(function(sum, current) {\n//           return parseFloat(sum) + (parseFloat(current.purchaseOthers) || 0);\n//         }, 0) -\n//         (advance && parseFloat(trips[0].purchaseAdvance || 0))\n//       );\n\n//     case 'outflow':\n//       if (trips[0].transporter) {\n//         if (\n//           trips[0].purchaseType === 'quantity' &&\n//           Boolean(trips[0].purchaseMinimumQuantity)\n//         ) {\n//           if (\n//             parseFloat(sumOfBillWeight) <\n//             parseFloat(trips[0].purchaseMinimumQuantity)\n//           ) {\n//             amount =\n//               parseFloat(trips[0].purchaseMinimumQuantity) *\n//               parseFloat(trips[0].purchaseRate);\n//           } else {\n//             amount =\n//               parseFloat(sumOfBillWeight) * parseFloat(trips[0].purchaseRate);\n//           }\n//         } else if (trips[0].purchaseType === 'quantity') {\n//           amount =\n//             parseFloat(sumOfBillWeight) * parseFloat(trips[0].purchaseRate);\n//         } else if (trips[0].purchaseType === 'commission') {\n//           if (trips[0].commissionType === 'quantity') {\n//             if (\n//               parseFloat(sumOfBillWeight) <\n//               parseFloat(trips[0].saleMinimumQuantity)\n//             ) {\n//               amount =\n//                 parseFloat(trips[0].purchaseMinimumQuantity) *\n//                 parseFloat(trips[0].purchaseRate);\n//             } else {\n//               amount =\n//                 parseFloat(sumOfBillWeight) * parseFloat(trips[0].purchaseRate);\n//             }\n//           } else if (trips[0].commissionType === 'percentage') {\n//             if (\n//               parseFloat(sumOfBillWeight) <\n//               parseFloat(trips[0].saleMinimumQuantity)\n//             ) {\n//               amount =\n//                 parseFloat(trips[0].purchaseMinimumQuantity) *\n//                 parseFloat(trips[0].purchaseRate) *\n//                 parseFloat(trips[0].saleRate / 100);\n//             } else {\n//               amount =\n//                 (parseFloat(sumOfBillWeight) *\n//                   parseFloat(trips[0].purchaseRate) *\n//                   parseFloat(trips[0].saleRate)) /\n//                 100;\n//             }\n//           } else {\n//             amount = parseFloat(trips[0].purchaseRate);\n//           }\n//         } else {\n//           amount = parseFloat(trips[0].purchaseRate);\n//         }\n//       } else {\n//         amount = 0;\n//       }\n//       return (\n//         parseFloat(amount) +\n//         //Adding Trip Expenses\n//         (getSumOfExpenses(trips[0].tripExpenses) || 0) +\n//         //Adding Purchase others of every delivery\n//         trips.reduce(function(sum, current) {\n//           return parseFloat(sum) + (parseFloat(current.purchaseOthers) || 0);\n//         }, 0) -\n//         parseFloat(trips[0].purchaseAdvance || 0)\n//       );\n\n//     default:\n//       return 0;\n//   }\n// };\n\nexport var getInvoiceWeight = (trips, delivery, type) => {\n  let sumOfBillWeight = 0;\n  let deliveryArray = [];\n  trips.map(trip => {\n    if (Boolean(trip.billWeight)) {\n      deliveryArray.push(`${trip.billWeight} MT`);\n      return (sumOfBillWeight = sumOfBillWeight + parseFloat(trip.billWeight));\n    }\n    deliveryArray.push(`${0} MT`);\n    return sumOfBillWeight;\n\n    // return sumOfBillWeight * parseFloat(trip.sale.saleRate);\n  });\n  let weight;\n  let guarantee = false;\n  let deliveryString = [];\n  if (parseFloat(sumOfBillWeight) < parseFloat(trips[0].saleMinimumQuantity)) {\n    deliveryString = deliveryArray.join(' + ');\n  } else {\n    deliveryString = `${delivery.billWeight || 0} MT`;\n  }\n  switch (type) {\n    case 'sale':\n      if (\n        parseFloat(sumOfBillWeight) < parseFloat(trips[0].saleMinimumQuantity)\n      ) {\n        weight = parseFloat(trips[0].saleMinimumQuantity);\n        guarantee = true;\n      } else {\n        weight = parseFloat(delivery.billWeight);\n      }\n      return { deliveryString, weight, guarantee };\n    case 'purchase':\n      if (\n        parseFloat(sumOfBillWeight) <\n        parseFloat(trips[0].purchaseMinimumQuantity)\n      ) {\n        weight = parseFloat(trips[0].purchaseMinimumQuantity);\n        guarantee = true;\n      } else {\n        weight = parseFloat(delivery.billWeight);\n      }\n      return { deliveryString, weight, guarantee };\n\n    default:\n      return { deliveryString, weight: 0, guarantee };\n  }\n};\n\nexport var formatNumber = number => {\n  // this puts commas into the number eg 1000 goes to 1,000,\n  // i pulled this from stack overflow, i have no idea how it works\n  return Math.round(number).toLocaleString('en-IN');\n};\n\nexport var dataFormatter = (expr, value) => {\n  if (typeof value === 'string') {\n    return value;\n  }\n  let o = value;\n  switch (expr) {\n    case 'Turnover':\n      o = value ? `₹ ${formatNumber(value)}` : '₹ 0';\n      break;\n    case 'Expenses':\n      o = value ? `₹ ${formatNumber(value)}` : '₹ 0';\n      break;\n    case 'Profit':\n      o = value ? `₹ ${formatNumber(value)}` : '₹ 0';\n      break;\n    case 'Profit / Trip':\n      o = value ? `₹ ${formatNumber(value)}` : '₹ 0';\n      break;\n    case 'Profit / Day':\n      o = value ? `₹ ${formatNumber(value)}` : '₹ 0';\n      break;\n    case 'Profit / Turnover':\n      o = value ? Math.round(value * 10000) / 100 + ' %' : '0 %';\n      break;\n\n    default:\n      return o;\n  }\n  return o;\n};\n\nexport var calculateAmount = (trips, type, advance = false) => {\n  let sumOfBillWeight = 0;\n  trips.map(trip => {\n    if (Boolean(trip.billWeight)) {\n      return (sumOfBillWeight = sumOfBillWeight + parseFloat(trip.billWeight));\n    }\n    return sumOfBillWeight;\n\n    // return sumOfBillWeight * parseFloat(trip.sale.saleRate);\n  });\n  let amount = 0;\n\n  switch (type) {\n    case 'sale':\n      switch (trips[0].saleType) {\n        case 'quantity':\n          amount = parseFloat(sumOfBillWeight) * parseFloat(trips[0].saleRate);\n          if (\n            parseFloat(sumOfBillWeight) <\n            parseFloat(trips[0].saleMinimumQuantity || 0)\n          ) {\n            amount =\n              parseFloat(trips[0].saleMinimumQuantity || 0) *\n              parseFloat(trips[0].saleRate);\n          }\n\n          break;\n        case 'fixed':\n          amount = parseFloat(trips[0].saleRate);\n          break;\n\n        default:\n          break;\n      }\n      return (\n        parseFloat(amount) +\n        //Adding Sale others of every delivery\n        trips.reduce(function(sum, current) {\n          return (\n            parseFloat(sum) +\n            parseFloat(getSumOfExpenses(current.saleOthers || 0))\n          );\n        }, 0) -\n        (advance && parseFloat(trips[0].saleAdvance || 0))\n      );\n\n    case 'purchase':\n      if (trips[0].transporter) {\n        switch (trips[0].purchaseType) {\n          case 'quantity':\n            amount =\n              parseFloat(sumOfBillWeight) * parseFloat(trips[0].purchaseRate);\n            if (\n              parseFloat(sumOfBillWeight) <\n              parseFloat(trips[0].purchaseMinimumQuantity || 0)\n            ) {\n              amount =\n                parseFloat(trips[0].purchaseMinimumQuantity || 0) *\n                parseFloat(trips[0].purchaseRate);\n            }\n\n            break;\n          case 'fixed':\n            amount = parseFloat(trips[0].purchaseRate);\n            break;\n\n          case 'commission':\n            switch (trips[0].commissionType) {\n              case 'quantity':\n                amount =\n                  calculateAmount(trips, 'sale') -\n                  parseFloat(sumOfBillWeight) *\n                    parseFloat(trips[0].purchaseRate);\n                if (\n                  parseFloat(sumOfBillWeight) <\n                  parseFloat(trips[0].saleMinimumQuantity || 0)\n                ) {\n                  amount =\n                    calculateAmount(trips, 'sale') -\n                    parseFloat(trips[0].saleMinimumQuantity) *\n                      parseFloat(trips[0].purchaseRate);\n                }\n                break;\n\n              case 'percentage':\n                amount =\n                  calculateAmount(trips, 'sale') -\n                  (parseFloat(sumOfBillWeight) *\n                    parseFloat(trips[0].purchaseRate) *\n                    parseFloat(trips[0].saleRate)) /\n                    100;\n                if (\n                  parseFloat(sumOfBillWeight) <\n                  parseFloat(trips[0].saleMinimumQuantity || 0)\n                ) {\n                  amount =\n                    calculateAmount(trips, 'sale') -\n                    parseFloat(trips[0].saleMinimumQuantity) *\n                      parseFloat(trips[0].purchaseRate);\n                }\n                break;\n              case 'fixed':\n                amount =\n                  calculateAmount(trips, 'sale') -\n                  parseFloat(trips[0].purchaseRate);\n                break;\n              default:\n                amount = 0;\n            }\n\n            break;\n\n          default:\n            break;\n        }\n      } else {\n        amount = 0;\n      }\n      return (\n        parseFloat(amount) +\n        //Adding Purchase others of every delivery\n        trips.reduce(function(sum, current) {\n          return parseFloat(sum) + (parseFloat(current.purchaseOthers) || 0);\n        }, 0) -\n        (advance && parseFloat(trips[0].purchaseAdvance || 0))\n      );\n\n    case 'outflow':\n      amount = calculateAmount(trips, 'purchase');\n      return Math.round(\n        parseFloat(amount) +\n          //Adding Trip Expenses\n          (getSumOfExpenses(trips[0].tripExpenses) || 0)\n      );\n\n    default:\n      return 0;\n  }\n};\n"]},"metadata":{},"sourceType":"module"}