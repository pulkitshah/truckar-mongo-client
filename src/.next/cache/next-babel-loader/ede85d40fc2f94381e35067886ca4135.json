{"ast":null,"code":"import _defineProperty from \"/Users/pulkitshah/Desktop/truckarv2/node_modules/next/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _toConsumableArray from \"/Users/pulkitshah/Desktop/truckarv2/node_modules/next/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"/Users/pulkitshah/Desktop/truckarv2/node_modules/next/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/pulkitshah/Desktop/truckarv2/renderer/components/dashboard/order/google-places-autocomplete.js\",\n    _s = $RefreshSig$();\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport * as React from \"react\";\nimport Box from \"@mui/material/Box\";\nimport TextField from \"@mui/material/TextField\";\nimport Autocomplete from \"@mui/material/Autocomplete\";\nimport LocationOnIcon from \"@mui/icons-material/LocationOn\";\nimport Grid from \"@mui/material/Grid\";\nimport Typography from \"@mui/material/Typography\";\nimport parse from \"autosuggest-highlight/parse\";\nimport throttle from \"lodash/throttle\";\nvar autocompleteService = {\n  current: null\n};\nexport default function GoogleMaps(_ref) {\n  _s();\n\n  var _this = this;\n\n  var label = _ref.label,\n      handleBlur = _ref.handleBlur,\n      formik = _ref.formik,\n      field = _ref.field,\n      values = _ref.values;\n\n  var _React$useState = React.useState(values.deliveryDetails[index][type] ? values.deliveryDetails[index][type] : null),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      value = _React$useState2[0],\n      setValue = _React$useState2[1];\n\n  var _React$useState3 = React.useState(\"\"),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      inputValue = _React$useState4[0],\n      setInputValue = _React$useState4[1];\n\n  var _React$useState5 = React.useState([]),\n      _React$useState6 = _slicedToArray(_React$useState5, 2),\n      options = _React$useState6[0],\n      setOptions = _React$useState6[1];\n\n  var loaded = React.useRef(false);\n  React.useEffect(function () {\n    setValue(values.deliveryDetails[index][type]);\n  }, [values.deliveryDetails.length]);\n  var fetch = React.useMemo(function () {\n    return throttle(function (request, callback) {\n      autocompleteService.current.getPlacePredictions(request, callback);\n    }, 200);\n  }, []);\n  React.useEffect(function () {\n    var active = true;\n\n    if (!autocompleteService.current && window.google) {\n      autocompleteService.current = new window.google.maps.places.AutocompleteService();\n    }\n\n    if (!autocompleteService.current) {\n      return undefined;\n    }\n\n    if (inputValue === \"\") {\n      setOptions(value ? [value] : []);\n      return undefined;\n    }\n\n    fetch({\n      input: inputValue,\n      types: [\"(cities)\"],\n      componentRestrictions: {\n        country: \"in\"\n      },\n      fields: [\"address_components\", \"geometry\", \"icon\", \"name\"]\n    }, function (results) {\n      if (active) {\n        var newOptions = [];\n\n        if (value) {\n          newOptions = [value];\n        }\n\n        if (results) {\n          newOptions = [].concat(_toConsumableArray(newOptions), _toConsumableArray(results));\n        }\n\n        setOptions(newOptions);\n      }\n    });\n    return function () {\n      active = false;\n    };\n  }, [value, inputValue, fetch]);\n  return /*#__PURE__*/_jsxDEV(Autocomplete, {\n    id: \"google-map-demo\",\n    autoSelect: true,\n    onBlur: handleBlur //   sx={{ width: 300 }}\n    ,\n    getOptionLabel: function getOptionLabel(option) {\n      return typeof option === \"string\" ? option : option.description;\n    },\n    filterOptions: function filterOptions(x) {\n      return x;\n    },\n    options: options,\n    autoComplete: true,\n    includeInputInList: true,\n    filterSelectedOptions: true,\n    value: value,\n    onChange: function onChange(event, newValue) {\n      var geocoder = new window.google.maps.Geocoder();\n\n      if (newValue) {\n        geocoder.geocode({\n          placeId: newValue.place_id\n        }, function (results, status) {\n          if (status === window.google.maps.GeocoderStatus.OK) {\n            formik.setFieldValue(\"\".concat(field, \".latitude\"), results[0].geometry.location.lat());\n            formik.setFieldValue(\"\".concat(field, \".longitude\"), results[0].geometry.location.lng());\n            formik.setFieldValue(\"\".concat(field, \".description\"), newValue.description);\n            formik.setFieldValue(\"\".concat(field, \".structured_formatting\"), newValue.structured_formatting);\n            formik.setFieldValue(\"\".concat(field, \".place_id\"), newValue.place_id);\n            formik.setFieldValue(\"branchName\", \"\".concat(newValue.structured_formatting.main_text, \" Branch\"));\n          } else {\n            alert(\"Can't find address: \" + status);\n          }\n        });\n      }\n\n      setOptions(newValue ? [newValue].concat(_toConsumableArray(options)) : options);\n      setValue(newValue);\n    },\n    onInputChange: function onInputChange(event, newInputValue) {\n      setInputValue(newInputValue);\n    },\n    renderInput: function renderInput(params) {\n      return /*#__PURE__*/_jsxDEV(TextField, _objectSpread(_objectSpread({}, params), {}, {\n        placeholder: label,\n        helperText: formik.touched[field] && formik.errors[field] ? formik.errors[field] : \"\",\n        error: Boolean(formik.touched[field] && formik.errors[field]),\n        fullWidth: true\n      }), void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 9\n      }, _this);\n    },\n    renderOption: function renderOption(props, option) {\n      var matches = option.structured_formatting.main_text_matched_substrings;\n      var parts = parse(option.structured_formatting.main_text, matches.map(function (match) {\n        return [match.offset, match.offset + match.length];\n      }));\n      return /*#__PURE__*/_jsxDEV(\"li\", _objectSpread(_objectSpread({}, props), {}, {\n        children: /*#__PURE__*/_jsxDEV(Grid, {\n          container: true,\n          alignItems: \"center\",\n          children: [/*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            children: /*#__PURE__*/_jsxDEV(Box, {\n              component: LocationOnIcon,\n              sx: {\n                color: \"text.secondary\",\n                mr: 2\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 166,\n              columnNumber: 17\n            }, _this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 165,\n            columnNumber: 15\n          }, _this), /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: true,\n            children: [parts.map(function (part, index) {\n              return /*#__PURE__*/_jsxDEV(\"span\", {\n                style: {\n                  fontWeight: part.highlight ? 700 : 400\n                },\n                children: part.text\n              }, index, false, {\n                fileName: _jsxFileName,\n                lineNumber: 173,\n                columnNumber: 19\n              }, _this);\n            }), /*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"body2\",\n              color: \"text.secondary\",\n              children: option.structured_formatting.secondary_text\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 183,\n              columnNumber: 17\n            }, _this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 171,\n            columnNumber: 15\n          }, _this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 164,\n          columnNumber: 13\n        }, _this)\n      }), void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 11\n      }, _this);\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 87,\n    columnNumber: 5\n  }, this);\n}\n\n_s(GoogleMaps, \"uNHCOwsAeUO9VoI4IM1EBJHiVMA=\");\n\n_c = GoogleMaps;\n\nvar _c;\n\n$RefreshReg$(_c, \"GoogleMaps\");","map":{"version":3,"sources":["/Users/pulkitshah/Desktop/truckarv2/renderer/components/dashboard/order/google-places-autocomplete.js"],"names":["React","Box","TextField","Autocomplete","LocationOnIcon","Grid","Typography","parse","throttle","autocompleteService","current","GoogleMaps","label","handleBlur","formik","field","values","useState","deliveryDetails","index","type","value","setValue","inputValue","setInputValue","options","setOptions","loaded","useRef","useEffect","length","fetch","useMemo","request","callback","getPlacePredictions","active","window","google","maps","places","AutocompleteService","undefined","input","types","componentRestrictions","country","fields","results","newOptions","option","description","x","event","newValue","geocoder","Geocoder","geocode","placeId","place_id","status","GeocoderStatus","OK","setFieldValue","geometry","location","lat","lng","structured_formatting","main_text","alert","newInputValue","params","touched","errors","Boolean","props","matches","main_text_matched_substrings","parts","map","match","offset","color","mr","part","fontWeight","highlight","text","secondary_text"],"mappings":"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","sourcesContent":["import * as React from \"react\";\nimport Box from \"@mui/material/Box\";\nimport TextField from \"@mui/material/TextField\";\nimport Autocomplete from \"@mui/material/Autocomplete\";\nimport LocationOnIcon from \"@mui/icons-material/LocationOn\";\nimport Grid from \"@mui/material/Grid\";\nimport Typography from \"@mui/material/Typography\";\nimport parse from \"autosuggest-highlight/parse\";\nimport throttle from \"lodash/throttle\";\n\nconst autocompleteService = { current: null };\n\nexport default function GoogleMaps({\n  label,\n  handleBlur,\n  formik,\n  field,\n  values,\n}) {\n  const [value, setValue] = React.useState(\n    values.deliveryDetails[index][type]\n      ? values.deliveryDetails[index][type]\n      : null\n  );\n  const [inputValue, setInputValue] = React.useState(\"\");\n  const [options, setOptions] = React.useState([]);\n  const loaded = React.useRef(false);\n\n  React.useEffect(() => {\n    setValue(values.deliveryDetails[index][type]);\n  }, [values.deliveryDetails.length]);\n\n  const fetch = React.useMemo(\n    () =>\n      throttle((request, callback) => {\n        autocompleteService.current.getPlacePredictions(request, callback);\n      }, 200),\n    []\n  );\n\n  React.useEffect(() => {\n    let active = true;\n\n    if (!autocompleteService.current && window.google) {\n      autocompleteService.current =\n        new window.google.maps.places.AutocompleteService();\n    }\n    if (!autocompleteService.current) {\n      return undefined;\n    }\n\n    if (inputValue === \"\") {\n      setOptions(value ? [value] : []);\n      return undefined;\n    }\n\n    fetch(\n      {\n        input: inputValue,\n        types: [\"(cities)\"],\n        componentRestrictions: { country: \"in\" },\n        fields: [\"address_components\", \"geometry\", \"icon\", \"name\"],\n      },\n      (results) => {\n        if (active) {\n          let newOptions = [];\n\n          if (value) {\n            newOptions = [value];\n          }\n\n          if (results) {\n            newOptions = [...newOptions, ...results];\n          }\n\n          setOptions(newOptions);\n        }\n      }\n    );\n\n    return () => {\n      active = false;\n    };\n  }, [value, inputValue, fetch]);\n\n  return (\n    <Autocomplete\n      id=\"google-map-demo\"\n      autoSelect={true}\n      onBlur={handleBlur}\n      //   sx={{ width: 300 }}\n      getOptionLabel={(option) =>\n        typeof option === \"string\" ? option : option.description\n      }\n      filterOptions={(x) => x}\n      options={options}\n      autoComplete\n      includeInputInList\n      filterSelectedOptions\n      value={value}\n      onChange={(event, newValue) => {\n        var geocoder = new window.google.maps.Geocoder();\n        if (newValue) {\n          geocoder.geocode(\n            { placeId: newValue.place_id },\n            function (results, status) {\n              if (status === window.google.maps.GeocoderStatus.OK) {\n                formik.setFieldValue(\n                  `${field}.latitude`,\n                  results[0].geometry.location.lat()\n                );\n                formik.setFieldValue(\n                  `${field}.longitude`,\n                  results[0].geometry.location.lng()\n                );\n                formik.setFieldValue(\n                  `${field}.description`,\n                  newValue.description\n                );\n                formik.setFieldValue(\n                  `${field}.structured_formatting`,\n                  newValue.structured_formatting\n                );\n                formik.setFieldValue(`${field}.place_id`, newValue.place_id);\n                formik.setFieldValue(\n                  `branchName`,\n                  `${newValue.structured_formatting.main_text} Branch`\n                );\n              } else {\n                alert(\"Can't find address: \" + status);\n              }\n            }\n          );\n        }\n        setOptions(newValue ? [newValue, ...options] : options);\n        setValue(newValue);\n      }}\n      onInputChange={(event, newInputValue) => {\n        setInputValue(newInputValue);\n      }}\n      renderInput={(params) => (\n        <TextField\n          {...params}\n          placeholder={label}\n          helperText={\n            formik.touched[field] && formik.errors[field]\n              ? formik.errors[field]\n              : \"\"\n          }\n          error={Boolean(formik.touched[field] && formik.errors[field])}\n          fullWidth\n        />\n      )}\n      renderOption={(props, option) => {\n        const matches =\n          option.structured_formatting.main_text_matched_substrings;\n        const parts = parse(\n          option.structured_formatting.main_text,\n          matches.map((match) => [match.offset, match.offset + match.length])\n        );\n\n        return (\n          <li {...props}>\n            <Grid container alignItems=\"center\">\n              <Grid item>\n                <Box\n                  component={LocationOnIcon}\n                  sx={{ color: \"text.secondary\", mr: 2 }}\n                />\n              </Grid>\n              <Grid item xs>\n                {parts.map((part, index) => (\n                  <span\n                    key={index}\n                    style={{\n                      fontWeight: part.highlight ? 700 : 400,\n                    }}\n                  >\n                    {part.text}\n                  </span>\n                ))}\n\n                <Typography variant=\"body2\" color=\"text.secondary\">\n                  {option.structured_formatting.secondary_text}\n                </Typography>\n              </Grid>\n            </Grid>\n          </li>\n        );\n      }}\n    />\n  );\n}\n"]},"metadata":{},"sourceType":"module"}