{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/pulkitshah/Desktop/truckarv2/renderer/components/dashboard/welcome/branch-create-form.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport { forwardRef, useImperativeHandle } from \"react\";\nimport toast from \"react-hot-toast\";\nimport * as Yup from \"yup\";\nimport { useFormik } from \"formik\";\nimport { v4 as uuid } from \"uuid\";\nimport { Divider, Grid, TextField, Typography } from \"@mui/material\";\nimport GoogleMaps from \"../branch/google-places-autocomplete\";\nimport { useAuth } from \"../../../hooks/use-auth\";\nimport { useDispatch } from \"../../../store\";\nimport { branchApi } from \"../../../api/branch-api\";\nimport { userApi } from \"../../../api/user-api\";\nexport const BranchCreateForm = /*#__PURE__*/forwardRef((_ref, ref) => {\n  let {\n    handleNext\n  } = _ref,\n      props = _objectWithoutProperties(_ref, [\"handleNext\"]);\n\n  const {\n    user,\n    initialize\n  } = useAuth();\n  const dispatch = useDispatch();\n  useImperativeHandle(ref, () => ({\n    handleFormSubmit() {\n      formik.handleSubmit();\n    }\n\n  }));\n  const formik = useFormik({\n    initialValues: {\n      branchName: \"\",\n      city: \"\",\n      branchType: \"main\",\n      submit: null\n    },\n    validationSchema: Yup.object({\n      branchName: Yup.string().max(255).required(\"Please enter a branch name.\"),\n      city: Yup.object().required(\"Please select a city.\")\n    }),\n    onSubmit: async (values, helpers) => {\n      try {\n        const id = uuid();\n        const newBranch = {\n          id: id,\n          branchName: values.branchName,\n          city: JSON.stringify(values.city),\n          branchType: values.branchType,\n          user: user.id\n        };\n        await branchApi.createBranch(newBranch, dispatch);\n        console.log(user);\n        await userApi.updateUser({\n          onBoardingRequired: false,\n          id: user.id,\n          _version: user._version\n        });\n        await initialize();\n        toast.success(\"Branch created!\");\n        router.push(\"/dashboard\");\n      } catch (err) {\n        console.error(err);\n        toast.error(\"Something went wrong!\");\n        helpers.setStatus({\n          success: false\n        });\n        helpers.setErrors({\n          submit: err.message\n        });\n        helpers.setSubmitting(false);\n      }\n    }\n  });\n  return /*#__PURE__*/_jsxDEV(\"form\", _objectSpread(_objectSpread({\n    onSubmit: formik.handleSubmit\n  }, props), {}, {\n    children: /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      spacing: 5,\n      alignItems: \"center\",\n      sx: {\n        mb: 4,\n        mt: 2\n      },\n      children: [/*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        md: 4,\n        xs: 12,\n        children: /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h6\",\n          children: \"Tell us your city\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        md: 8,\n        xs: 12,\n        children: /*#__PURE__*/_jsxDEV(GoogleMaps, {\n          formik: formik,\n          error: Boolean(formik.touched.city && formik.errors.city),\n          label: \"Your city in India\",\n          field: \"city\",\n          setFieldValue: formik.setFieldValue,\n          handleBlur: formik.handleBlur,\n          values: formik.values\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12,\n        children: /*#__PURE__*/_jsxDEV(Divider, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        md: 4,\n        xs: 12,\n        children: /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h6\",\n          children: \"Please pick a branch name\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        md: 8,\n        xs: 12,\n        children: /*#__PURE__*/_jsxDEV(TextField, {\n          error: Boolean(formik.touched.branchName && formik.errors.branchName),\n          fullWidth: true,\n          helperText: formik.touched.branchName && formik.errors.branchName,\n          label: \"Your branch name\",\n          name: \"branchName\",\n          onBlur: formik.handleBlur,\n          onChange: formik.handleChange,\n          value: formik.values.branchName\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this)\n  }), void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 5\n  }, this);\n});","map":{"version":3,"sources":["/Users/pulkitshah/Desktop/truckarv2/renderer/components/dashboard/welcome/branch-create-form.js"],"names":["forwardRef","useImperativeHandle","toast","Yup","useFormik","v4","uuid","Divider","Grid","TextField","Typography","GoogleMaps","useAuth","useDispatch","branchApi","userApi","BranchCreateForm","ref","handleNext","props","user","initialize","dispatch","handleFormSubmit","formik","handleSubmit","initialValues","branchName","city","branchType","submit","validationSchema","object","string","max","required","onSubmit","values","helpers","id","newBranch","JSON","stringify","createBranch","console","log","updateUser","onBoardingRequired","_version","success","router","push","err","error","setStatus","setErrors","message","setSubmitting","mb","mt","Boolean","touched","errors","setFieldValue","handleBlur","handleChange"],"mappings":"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","sourcesContent":["import { forwardRef, useImperativeHandle } from \"react\";\nimport toast from \"react-hot-toast\";\nimport * as Yup from \"yup\";\nimport { useFormik } from \"formik\";\nimport { v4 as uuid } from \"uuid\";\nimport { Divider, Grid, TextField, Typography } from \"@mui/material\";\nimport GoogleMaps from \"../branch/google-places-autocomplete\";\nimport { useAuth } from \"../../../hooks/use-auth\";\nimport { useDispatch } from \"../../../store\";\nimport { branchApi } from \"../../../api/branch-api\";\nimport { userApi } from \"../../../api/user-api\";\n\nexport const BranchCreateForm = forwardRef(({ handleNext, ...props }, ref) => {\n  const { user, initialize } = useAuth();\n  const dispatch = useDispatch();\n\n  useImperativeHandle(ref, () => ({\n    handleFormSubmit() {\n      formik.handleSubmit();\n    },\n  }));\n\n  const formik = useFormik({\n    initialValues: {\n      branchName: \"\",\n      city: \"\",\n      branchType: \"main\",\n      submit: null,\n    },\n    validationSchema: Yup.object({\n      branchName: Yup.string().max(255).required(\"Please enter a branch name.\"),\n      city: Yup.object().required(\"Please select a city.\"),\n    }),\n    onSubmit: async (values, helpers) => {\n      try {\n        const id = uuid();\n        const newBranch = {\n          id: id,\n          branchName: values.branchName,\n          city: JSON.stringify(values.city),\n          branchType: values.branchType,\n          user: user.id,\n        };\n        await branchApi.createBranch(newBranch, dispatch);\n        console.log(user);\n        await userApi.updateUser({\n          onBoardingRequired: false,\n          id: user.id,\n          _version: user._version,\n        });\n\n        await initialize();\n        toast.success(\"Branch created!\");\n        router.push(\"/dashboard\");\n      } catch (err) {\n        console.error(err);\n        toast.error(\"Something went wrong!\");\n        helpers.setStatus({ success: false });\n        helpers.setErrors({ submit: err.message });\n        helpers.setSubmitting(false);\n      }\n    },\n  });\n\n  return (\n    <form onSubmit={formik.handleSubmit} {...props}>\n      <Grid container spacing={5} alignItems=\"center\" sx={{ mb: 4, mt: 2 }}>\n        <Grid item md={4} xs={12}>\n          <Typography variant=\"h6\">Tell us your city</Typography>\n        </Grid>\n        <Grid item md={8} xs={12}>\n          <GoogleMaps\n            formik={formik}\n            error={Boolean(formik.touched.city && formik.errors.city)}\n            label={\"Your city in India\"}\n            field={\"city\"}\n            setFieldValue={formik.setFieldValue}\n            handleBlur={formik.handleBlur}\n            values={formik.values}\n          />\n        </Grid>\n        <Grid item xs={12}>\n          <Divider />\n        </Grid>\n        <Grid item md={4} xs={12}>\n          <Typography variant=\"h6\">Please pick a branch name</Typography>\n        </Grid>\n        <Grid item md={8} xs={12}>\n          <TextField\n            error={Boolean(\n              formik.touched.branchName && formik.errors.branchName\n            )}\n            fullWidth\n            helperText={formik.touched.branchName && formik.errors.branchName}\n            label=\"Your branch name\"\n            name=\"branchName\"\n            onBlur={formik.handleBlur}\n            onChange={formik.handleChange}\n            value={formik.values.branchName}\n          />\n        </Grid>\n      </Grid>\n    </form>\n  );\n});\n"]},"metadata":{},"sourceType":"module"}