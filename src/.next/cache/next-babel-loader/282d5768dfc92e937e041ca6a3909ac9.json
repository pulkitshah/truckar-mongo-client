{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/pulkitshah/Desktop/truckarv2/renderer/components/dashboard/autocompletes/saleType-autocomplete/saleType-autocomplete.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useState, useEffect, useCallback } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Autocomplete, Grid, TextField } from \"@mui/material\";\nimport { useDispatch } from \"../../../../store\";\n\nconst saleTypeAutocomplete = ({\n  touched,\n  setFieldValue,\n  errors,\n  handleBlur,\n  values,\n  saleType,\n  user\n}) => {\n  const {\n    0: open,\n    1: setOpen\n  } = useState(false);\n  const [inputValue, setInputValue] = React.useState(\"\");\n  const saleTypes = [{\n    value: \"quantity\",\n    unit: \"MT\",\n    label: \"Per MT\"\n  }, {\n    value: \"quantity\",\n    unit: \"Kg\",\n    label: \"Per Kg\"\n  }, {\n    value: \"quantity\",\n    unit: \"Box\",\n    label: \"Per Box\"\n  }, {\n    value: \"quantity\",\n    unit: \"Pcs\",\n    label: \"Per Pcs\"\n  }, {\n    value: \"time\",\n    unit: \"Days\",\n    label: \"Per Days\"\n  }, {\n    value: \"fixed\",\n    label: \"Fixed\"\n  }];\n  useEffect(() => {\n    console.log(\"saleType has changed\");\n    setFieldValue(\"saleType\", saleType);\n  }, [setFieldValue, saleType]);\n\n  const handleOnChange = (event, newValue) => {\n    setFieldValue(\"saleType\", newValue);\n  };\n\n  const handleInputChange = (event, newInputValue) => {\n    setInputValue(newInputValue);\n  };\n\n  return /*#__PURE__*/_jsxDEV(Grid, {\n    item: true,\n    children: /*#__PURE__*/_jsxDEV(Autocomplete, {\n      autoSelect: true,\n      blurOnSelect: true,\n      id: \"saleType\",\n      open: open,\n      onOpen: () => {\n        setOpen(true);\n      },\n      onClose: () => {\n        setOpen(false);\n      },\n      getOptionSelected: (option, value) => {\n        if (value) return option.name === value.name.replace(/\\w\\S*/g, function (txt) {\n          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();\n        });\n      },\n      getOptionLabel: option => {\n        return option && option.name.replace(/\\w\\S*/g, function (txt) {\n          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();\n        });\n      },\n      options: saleTypes,\n      value: values.saleType,\n      onChange: handleOnChange,\n      inputValue: inputValue,\n      onInputChange: handleInputChange,\n      renderInput: params => /*#__PURE__*/_jsxDEV(TextField, _objectSpread(_objectSpread({}, params), {}, {\n        name: \"saleType\",\n        label: \"saleType\",\n        variant: \"outlined\",\n        error: Boolean(touched.saleType && errors.saleType),\n        fullWidth: true,\n        helperText: touched.saleType && errors.saleType,\n        onBlur: handleBlur\n      }), void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 5\n  }, this);\n};\n\nsaleTypeAutocomplete.propTypes = {\n  className: PropTypes.string\n};\nexport default saleTypeAutocomplete;","map":{"version":3,"sources":["/Users/pulkitshah/Desktop/truckarv2/renderer/components/dashboard/autocompletes/saleType-autocomplete/saleType-autocomplete.js"],"names":["React","useState","useEffect","useCallback","PropTypes","Autocomplete","Grid","TextField","useDispatch","saleTypeAutocomplete","touched","setFieldValue","errors","handleBlur","values","saleType","user","open","setOpen","inputValue","setInputValue","saleTypes","value","unit","label","console","log","handleOnChange","event","newValue","handleInputChange","newInputValue","option","name","replace","txt","charAt","toUpperCase","substr","toLowerCase","params","Boolean","propTypes","className","string"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useCallback } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Autocomplete, Grid, TextField } from \"@mui/material\";\nimport { useDispatch } from \"../../../../store\";\n\nconst saleTypeAutocomplete = ({\n  touched,\n  setFieldValue,\n  errors,\n  handleBlur,\n  values,\n  saleType,\n  user,\n}) => {\n  const [open, setOpen] = useState(false);\n  const [inputValue, setInputValue] = React.useState(\"\");\n\n  const saleTypes = [\n    {\n      value: \"quantity\",\n      unit: \"MT\",\n      label: \"Per MT\",\n    },\n    {\n      value: \"quantity\",\n      unit: \"Kg\",\n      label: \"Per Kg\",\n    },\n    {\n      value: \"quantity\",\n      unit: \"Box\",\n      label: \"Per Box\",\n    },\n    {\n      value: \"quantity\",\n      unit: \"Pcs\",\n      label: \"Per Pcs\",\n    },\n    {\n      value: \"time\",\n      unit: \"Days\",\n      label: \"Per Days\",\n    },\n    {\n      value: \"fixed\",\n      label: \"Fixed\",\n    },\n  ];\n\n  useEffect(() => {\n    console.log(\"saleType has changed\");\n    setFieldValue(\"saleType\", saleType);\n  }, [setFieldValue, saleType]);\n\n  const handleOnChange = (event, newValue) => {\n    setFieldValue(\"saleType\", newValue);\n  };\n\n  const handleInputChange = (event, newInputValue) => {\n    setInputValue(newInputValue);\n  };\n\n  return (\n    <Grid item>\n      <Autocomplete\n        autoSelect={true}\n        blurOnSelect={true}\n        id=\"saleType\"\n        open={open}\n        onOpen={() => {\n          setOpen(true);\n        }}\n        onClose={() => {\n          setOpen(false);\n        }}\n        getOptionSelected={(option, value) => {\n          if (value)\n            return (\n              option.name ===\n              value.name.replace(/\\w\\S*/g, function (txt) {\n                return (\n                  txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase()\n                );\n              })\n            );\n        }}\n        getOptionLabel={(option) => {\n          return (\n            option &&\n            option.name.replace(/\\w\\S*/g, function (txt) {\n              return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();\n            })\n          );\n        }}\n        options={saleTypes}\n        value={values.saleType}\n        onChange={handleOnChange}\n        inputValue={inputValue}\n        onInputChange={handleInputChange}\n        renderInput={(params) => (\n          <TextField\n            {...params}\n            name=\"saleType\"\n            label=\"saleType\"\n            variant=\"outlined\"\n            error={Boolean(touched.saleType && errors.saleType)}\n            fullWidth\n            helperText={touched.saleType && errors.saleType}\n            onBlur={handleBlur}\n          />\n        )}\n      />\n    </Grid>\n  );\n};\n\nsaleTypeAutocomplete.propTypes = {\n  className: PropTypes.string,\n};\n\nexport default saleTypeAutocomplete;\n"]},"metadata":{},"sourceType":"module"}