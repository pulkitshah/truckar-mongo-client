{"ast":null,"code":"import { API } from \"aws-amplify\";\nimport { organisationsByUser } from \"../graphql/queries\";\nimport { createOrganisation, updateOrganisation } from \"../graphql/mutations\";\nimport { Organisation } from \"../models\";\nimport { DataStore, Predicates } from \"@aws-amplify/datastore\";\nimport moment from \"moment\";\nconst now = new Date();\n\nclass OrganisationApi {\n  async getOrganisationsByUser(user) {\n    try {\n      // const organisationesDB = await API.graphql({\n      //   query: organisationsByUser,\n      //   variables: { user: user.id.toString() },\n      // });\n      // console.log(organisationesDB.data.organisationsByUser.items);\n      const response = await DataStore.query(Organisation, c => c.user(\"eq\", user.id));\n      console.log(response);\n      return response;\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  async createOrganisation(newOrganisation) {\n    const createdAt = moment().toISOString();\n    let org = newOrganisation;\n    org.createdAt = createdAt;\n    const response = await DataStore.save(new Organisation(org)); // const response2 = await API.graphql({\n    //   query: createOrganisation,\n    //   variables: { input: newOrganisation },\n    //   authMode: \"AMAZON_COGNITO_USER_POOLS\",\n    // });\n\n    console.log(response);\n    return response;\n  }\n\n  async editOrganisation(editedOrganisation) {\n    const response = await API.graphql({\n      query: updateOrganisation,\n      variables: {\n        input: editedOrganisation\n      },\n      authMode: \"AMAZON_COGNITO_USER_POOLS\"\n    });\n    return response;\n  }\n\n}\n\nexport const organisationApi = new OrganisationApi();","map":{"version":3,"sources":["/Users/pulkitshah/Desktop/truckarv2/renderer/api/organisation-api.js"],"names":["API","organisationsByUser","createOrganisation","updateOrganisation","Organisation","DataStore","Predicates","moment","now","Date","OrganisationApi","getOrganisationsByUser","user","response","query","c","id","console","log","error","newOrganisation","createdAt","toISOString","org","save","editOrganisation","editedOrganisation","graphql","variables","input","authMode","organisationApi"],"mappings":"AAAA,SAASA,GAAT,QAAoB,aAApB;AACA,SAASC,mBAAT,QAAoC,oBAApC;AACA,SAASC,kBAAT,EAA6BC,kBAA7B,QAAuD,sBAAvD;AACA,SAASC,YAAT,QAA6B,WAA7B;AACA,SAASC,SAAT,EAAoBC,UAApB,QAAsC,wBAAtC;AACA,OAAOC,MAAP,MAAmB,QAAnB;AAEA,MAAMC,GAAG,GAAG,IAAIC,IAAJ,EAAZ;;AAEA,MAAMC,eAAN,CAAsB;AACpB,QAAMC,sBAAN,CAA6BC,IAA7B,EAAmC;AACjC,QAAI;AACF;AACA;AACA;AACA;AACA;AAEA,YAAMC,QAAQ,GAAG,MAAMR,SAAS,CAACS,KAAV,CAAgBV,YAAhB,EAA+BW,CAAD,IACnDA,CAAC,CAACH,IAAF,CAAO,IAAP,EAAaA,IAAI,CAACI,EAAlB,CADqB,CAAvB;AAGAC,MAAAA,OAAO,CAACC,GAAR,CAAYL,QAAZ;AAEA,aAAOA,QAAP;AACD,KAbD,CAaE,OAAOM,KAAP,EAAc;AACdF,MAAAA,OAAO,CAACC,GAAR,CAAYC,KAAZ;AACD;AACF;;AAED,QAAMjB,kBAAN,CAAyBkB,eAAzB,EAA0C;AACxC,UAAMC,SAAS,GAAGd,MAAM,GAAGe,WAAT,EAAlB;AACA,QAAIC,GAAG,GAAGH,eAAV;AACAG,IAAAA,GAAG,CAACF,SAAJ,GAAgBA,SAAhB;AACA,UAAMR,QAAQ,GAAG,MAAMR,SAAS,CAACmB,IAAV,CAAe,IAAIpB,YAAJ,CAAiBmB,GAAjB,CAAf,CAAvB,CAJwC,CAMxC;AACA;AACA;AACA;AACA;;AACAN,IAAAA,OAAO,CAACC,GAAR,CAAYL,QAAZ;AACA,WAAOA,QAAP;AACD;;AAED,QAAMY,gBAAN,CAAuBC,kBAAvB,EAA2C;AACzC,UAAMb,QAAQ,GAAG,MAAMb,GAAG,CAAC2B,OAAJ,CAAY;AACjCb,MAAAA,KAAK,EAAEX,kBAD0B;AAEjCyB,MAAAA,SAAS,EAAE;AAAEC,QAAAA,KAAK,EAAEH;AAAT,OAFsB;AAGjCI,MAAAA,QAAQ,EAAE;AAHuB,KAAZ,CAAvB;AAKA,WAAOjB,QAAP;AACD;;AA1CmB;;AA6CtB,OAAO,MAAMkB,eAAe,GAAG,IAAIrB,eAAJ,EAAxB","sourcesContent":["import { API } from \"aws-amplify\";\nimport { organisationsByUser } from \"../graphql/queries\";\nimport { createOrganisation, updateOrganisation } from \"../graphql/mutations\";\nimport { Organisation } from \"../models\";\nimport { DataStore, Predicates } from \"@aws-amplify/datastore\";\nimport moment from \"moment\";\n\nconst now = new Date();\n\nclass OrganisationApi {\n  async getOrganisationsByUser(user) {\n    try {\n      // const organisationesDB = await API.graphql({\n      //   query: organisationsByUser,\n      //   variables: { user: user.id.toString() },\n      // });\n      // console.log(organisationesDB.data.organisationsByUser.items);\n\n      const response = await DataStore.query(Organisation, (c) =>\n        c.user(\"eq\", user.id)\n      );\n      console.log(response);\n\n      return response;\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  async createOrganisation(newOrganisation) {\n    const createdAt = moment().toISOString();\n    let org = newOrganisation;\n    org.createdAt = createdAt;\n    const response = await DataStore.save(new Organisation(org));\n\n    // const response2 = await API.graphql({\n    //   query: createOrganisation,\n    //   variables: { input: newOrganisation },\n    //   authMode: \"AMAZON_COGNITO_USER_POOLS\",\n    // });\n    console.log(response);\n    return response;\n  }\n\n  async editOrganisation(editedOrganisation) {\n    const response = await API.graphql({\n      query: updateOrganisation,\n      variables: { input: editedOrganisation },\n      authMode: \"AMAZON_COGNITO_USER_POOLS\",\n    });\n    return response;\n  }\n}\n\nexport const organisationApi = new OrganisationApi();\n"]},"metadata":{},"sourceType":"module"}