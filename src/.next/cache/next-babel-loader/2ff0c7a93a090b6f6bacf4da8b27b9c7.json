{"ast":null,"code":"import { API } from \"aws-amplify\";\nimport { addressesByUser } from \"../graphql/queries\";\nimport { createParty, updateParty } from \"../graphql/mutations\";\nimport { Party } from \"../models\";\nimport { DataStore, Predicates } from \"@aws-amplify/datastore\";\nimport moment from \"moment\";\nimport { slice } from \"../slices/addresses\";\nconst now = new Date();\n\nclass PartyApi {\n  async getAddressesByUser(user, dispatch) {\n    try {\n      //////////////////////// GraphQL API ////////////////////////\n      // const response = await API.graphql({\n      //   query: newAddressByUser,\n      //   variables: { user: user.id.toString() },\n      // });\n      // const addresses = response.data.addressesByUser.items\n      //////////////////////// GraphQL API ////////////////////////\n      //////////////////////// DataStore API ////////////////////////\n      const addresses = await DataStore.query(Party, c => c.user(\"eq\", user.id)); //////////////////////// DataStore API ////////////////////////\n      // console.log(partyesDB);\n      // Dispatch - Reducer\n\n      dispatch(slice.actions.getAddresses(addresses));\n      return addresses;\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  async createParty(createdParty, dispatch) {\n    const createdAt = moment().toISOString();\n    let newParty = createdParty;\n    newParty.createdAt = createdAt; //////////////////////// GraphQL API ////////////////////////\n\n    const response = await API.graphql({\n      query: createParty,\n      variables: {\n        input: newParty\n      },\n      authMode: \"AMAZON_COGNITO_USER_POOLS\"\n    });\n    const party = response.data.createParty; //////////////////////// GraphQL API ////////////////////////\n    //////////////////////// DataStore API ////////////////////////\n    // const party = await DataStore.save(new Party(newParty));\n    //////////////////////// DataStore API ////////////////////////\n    // console.log(party);\n    // Dispatch - Reducer\n\n    dispatch(slice.actions.createParty({\n      party\n    }));\n    return party;\n  }\n\n  async updateParty(editedParty, dispatch) {\n    //////////////////////// GraphQL API ////////////////////////\n    const response = await API.graphql({\n      query: updateParty,\n      variables: {\n        input: editedParty\n      },\n      authMode: \"AMAZON_COGNITO_USER_POOLS\"\n    });\n    const party = response.data.updateParty; //////////////////////// GraphQL API ////////////////////////\n    // console.log(party);\n    // Dispatch - Reducer\n\n    dispatch(slice.actions.updateParty({\n      party\n    }));\n    return response;\n  }\n\n}\n\nexport const partyApi = new PartyApi();","map":{"version":3,"sources":["/Users/pulkitshah/Desktop/truckarv2/renderer/api/address-api.js"],"names":["API","addressesByUser","createParty","updateParty","Party","DataStore","Predicates","moment","slice","now","Date","PartyApi","getAddressesByUser","user","dispatch","addresses","query","c","id","actions","getAddresses","error","console","log","createdParty","createdAt","toISOString","newParty","response","graphql","variables","input","authMode","party","data","editedParty","partyApi"],"mappings":"AAAA,SAASA,GAAT,QAAoB,aAApB;AACA,SAASC,eAAT,QAAgC,oBAAhC;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,sBAAzC;AACA,SAASC,KAAT,QAAsB,WAAtB;AACA,SAASC,SAAT,EAAoBC,UAApB,QAAsC,wBAAtC;AACA,OAAOC,MAAP,MAAmB,QAAnB;AACA,SAASC,KAAT,QAAsB,qBAAtB;AAEA,MAAMC,GAAG,GAAG,IAAIC,IAAJ,EAAZ;;AAEA,MAAMC,QAAN,CAAe;AACb,QAAMC,kBAAN,CAAyBC,IAAzB,EAA+BC,QAA/B,EAAyC;AACvC,QAAI;AACF;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA,YAAMC,SAAS,GAAG,MAAMV,SAAS,CAACW,KAAV,CAAgBZ,KAAhB,EAAwBa,CAAD,IAC7CA,CAAC,CAACJ,IAAF,CAAO,IAAP,EAAaA,IAAI,CAACK,EAAlB,CADsB,CAAxB,CAbE,CAiBF;AAEA;AAEA;;AAEAJ,MAAAA,QAAQ,CAACN,KAAK,CAACW,OAAN,CAAcC,YAAd,CAA2BL,SAA3B,CAAD,CAAR;AAEA,aAAOA,SAAP;AACD,KA1BD,CA0BE,OAAOM,KAAP,EAAc;AACdC,MAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACD;AACF;;AAED,QAAMnB,WAAN,CAAkBsB,YAAlB,EAAgCV,QAAhC,EAA0C;AACxC,UAAMW,SAAS,GAAGlB,MAAM,GAAGmB,WAAT,EAAlB;AACA,QAAIC,QAAQ,GAAGH,YAAf;AACAG,IAAAA,QAAQ,CAACF,SAAT,GAAqBA,SAArB,CAHwC,CAKxC;;AAEA,UAAMG,QAAQ,GAAG,MAAM5B,GAAG,CAAC6B,OAAJ,CAAY;AACjCb,MAAAA,KAAK,EAAEd,WAD0B;AAEjC4B,MAAAA,SAAS,EAAE;AAAEC,QAAAA,KAAK,EAAEJ;AAAT,OAFsB;AAGjCK,MAAAA,QAAQ,EAAE;AAHuB,KAAZ,CAAvB;AAMA,UAAMC,KAAK,GAAGL,QAAQ,CAACM,IAAT,CAAchC,WAA5B,CAbwC,CAexC;AAEA;AAEA;AAEA;AAEA;AAEA;;AAEAY,IAAAA,QAAQ,CAACN,KAAK,CAACW,OAAN,CAAcjB,WAAd,CAA0B;AAAE+B,MAAAA;AAAF,KAA1B,CAAD,CAAR;AAEA,WAAOA,KAAP;AACD;;AAED,QAAM9B,WAAN,CAAkBgC,WAAlB,EAA+BrB,QAA/B,EAAyC;AACvC;AAEA,UAAMc,QAAQ,GAAG,MAAM5B,GAAG,CAAC6B,OAAJ,CAAY;AACjCb,MAAAA,KAAK,EAAEb,WAD0B;AAEjC2B,MAAAA,SAAS,EAAE;AAAEC,QAAAA,KAAK,EAAEI;AAAT,OAFsB;AAGjCH,MAAAA,QAAQ,EAAE;AAHuB,KAAZ,CAAvB;AAMA,UAAMC,KAAK,GAAGL,QAAQ,CAACM,IAAT,CAAc/B,WAA5B,CATuC,CAWvC;AAEA;AAEA;;AAEAW,IAAAA,QAAQ,CAACN,KAAK,CAACW,OAAN,CAAchB,WAAd,CAA0B;AAAE8B,MAAAA;AAAF,KAA1B,CAAD,CAAR;AAEA,WAAOL,QAAP;AACD;;AArFY;;AAwFf,OAAO,MAAMQ,QAAQ,GAAG,IAAIzB,QAAJ,EAAjB","sourcesContent":["import { API } from \"aws-amplify\";\nimport { addressesByUser } from \"../graphql/queries\";\nimport { createParty, updateParty } from \"../graphql/mutations\";\nimport { Party } from \"../models\";\nimport { DataStore, Predicates } from \"@aws-amplify/datastore\";\nimport moment from \"moment\";\nimport { slice } from \"../slices/addresses\";\n\nconst now = new Date();\n\nclass PartyApi {\n  async getAddressesByUser(user, dispatch) {\n    try {\n      //////////////////////// GraphQL API ////////////////////////\n\n      // const response = await API.graphql({\n      //   query: newAddressByUser,\n      //   variables: { user: user.id.toString() },\n      // });\n      // const addresses = response.data.addressesByUser.items\n\n      //////////////////////// GraphQL API ////////////////////////\n\n      //////////////////////// DataStore API ////////////////////////\n\n      const addresses = await DataStore.query(Party, (c) =>\n        c.user(\"eq\", user.id)\n      );\n\n      //////////////////////// DataStore API ////////////////////////\n\n      // console.log(partyesDB);\n\n      // Dispatch - Reducer\n\n      dispatch(slice.actions.getAddresses(addresses));\n\n      return addresses;\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  async createParty(createdParty, dispatch) {\n    const createdAt = moment().toISOString();\n    let newParty = createdParty;\n    newParty.createdAt = createdAt;\n\n    //////////////////////// GraphQL API ////////////////////////\n\n    const response = await API.graphql({\n      query: createParty,\n      variables: { input: newParty },\n      authMode: \"AMAZON_COGNITO_USER_POOLS\",\n    });\n\n    const party = response.data.createParty;\n\n    //////////////////////// GraphQL API ////////////////////////\n\n    //////////////////////// DataStore API ////////////////////////\n\n    // const party = await DataStore.save(new Party(newParty));\n\n    //////////////////////// DataStore API ////////////////////////\n\n    // console.log(party);\n\n    // Dispatch - Reducer\n\n    dispatch(slice.actions.createParty({ party }));\n\n    return party;\n  }\n\n  async updateParty(editedParty, dispatch) {\n    //////////////////////// GraphQL API ////////////////////////\n\n    const response = await API.graphql({\n      query: updateParty,\n      variables: { input: editedParty },\n      authMode: \"AMAZON_COGNITO_USER_POOLS\",\n    });\n\n    const party = response.data.updateParty;\n\n    //////////////////////// GraphQL API ////////////////////////\n\n    // console.log(party);\n\n    // Dispatch - Reducer\n\n    dispatch(slice.actions.updateParty({ party }));\n\n    return response;\n  }\n}\n\nexport const partyApi = new PartyApi();\n"]},"metadata":{},"sourceType":"module"}