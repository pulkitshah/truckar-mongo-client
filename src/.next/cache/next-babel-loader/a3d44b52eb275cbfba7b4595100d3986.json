{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/pulkitshah/Desktop/truckarv2/renderer/components/dashboard/order/delivery-details-grid.js\";\nimport React from \"react\";\nimport { DataGrid } from \"@mui/x-data-grid\";\nimport { useDispatch } from \"../../../store\";\nimport { deliveryDetailsTable } from \"../../grids/grid-columns\";\nimport { orderApi } from \"../../../api/order-api\";\n\nconst Table = ({\n  order,\n  deliveries\n}) => {\n  const dispatch = useDispatch();\n\n  const getOrderUnit = order => {\n    switch (JSON.parse(order.saleType).value) {\n      case \"quantity\":\n        return `${JSON.parse(order.saleType).unit}`;\n        break;\n\n      case \"fixed\":\n        return `(Fixed)`;\n        break;\n\n      case \"time\":\n        return `${JSON.parse(order.saleType).unit}`;\n        break;\n\n      default:\n        break;\n    }\n  };\n\n  const updateOrder = React.useCallback(async newRow => {\n    try {\n      let order = newRow.order;\n      delete newRow.order;\n      let newDeliveries = JSON.parse(order.deliveries).map(del => {\n        if (del.id !== newRow.id) {\n          return del;\n        } else {\n          return newRow;\n        }\n      });\n      let newOrder = {\n        id: order.id,\n        deliveries: JSON.stringify(newDeliveries),\n        _version: order._version\n      };\n      const response = await orderApi.updateOrder(newOrder, dispatch);\n      return response;\n    } catch (error) {\n      console.log(error);\n    }\n  }, []);\n  deliveries.map(del => {\n    del.order = order;\n    del.unit = getOrderUnit(order);\n    return del;\n  });\n  return /*#__PURE__*/_jsxDEV(DataGrid, {\n    rows: deliveries,\n    autoHeight: true,\n    columns: deliveryDetailsTable,\n    disableSelectionOnClick: true,\n    experimentalFeatures: {\n      newEditingApi: true\n    },\n    processRowUpdate: updateOrder\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 5\n  }, this);\n};\n\nexport default Table;","map":{"version":3,"sources":["/Users/pulkitshah/Desktop/truckarv2/renderer/components/dashboard/order/delivery-details-grid.js"],"names":["React","DataGrid","useDispatch","deliveryDetailsTable","orderApi","Table","order","deliveries","dispatch","getOrderUnit","JSON","parse","saleType","value","unit","updateOrder","useCallback","newRow","newDeliveries","map","del","id","newOrder","stringify","_version","response","error","console","log","newEditingApi"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,QAAyB,kBAAzB;AACA,SAASC,WAAT,QAA4B,gBAA5B;AACA,SAASC,oBAAT,QAAqC,0BAArC;AACA,SAASC,QAAT,QAAyB,wBAAzB;;AAEA,MAAMC,KAAK,GAAG,CAAC;AAAEC,EAAAA,KAAF;AAASC,EAAAA;AAAT,CAAD,KAA2B;AACvC,QAAMC,QAAQ,GAAGN,WAAW,EAA5B;;AAEA,QAAMO,YAAY,GAAIH,KAAD,IAAW;AAC9B,YAAQI,IAAI,CAACC,KAAL,CAAWL,KAAK,CAACM,QAAjB,EAA2BC,KAAnC;AACE,WAAK,UAAL;AACE,eAAQ,GAAEH,IAAI,CAACC,KAAL,CAAWL,KAAK,CAACM,QAAjB,EAA2BE,IAAK,EAA1C;AACA;;AACF,WAAK,OAAL;AACE,eAAQ,SAAR;AACA;;AACF,WAAK,MAAL;AACE,eAAQ,GAAEJ,IAAI,CAACC,KAAL,CAAWL,KAAK,CAACM,QAAjB,EAA2BE,IAAK,EAA1C;AACA;;AACF;AACE;AAXJ;AAaD,GAdD;;AAgBA,QAAMC,WAAW,GAAGf,KAAK,CAACgB,WAAN,CAAkB,MAAOC,MAAP,IAAkB;AACtD,QAAI;AACF,UAAIX,KAAK,GAAGW,MAAM,CAACX,KAAnB;AACA,aAAOW,MAAM,CAACX,KAAd;AAEA,UAAIY,aAAa,GAAGR,IAAI,CAACC,KAAL,CAAWL,KAAK,CAACC,UAAjB,EAA6BY,GAA7B,CAAkCC,GAAD,IAAS;AAC5D,YAAIA,GAAG,CAACC,EAAJ,KAAWJ,MAAM,CAACI,EAAtB,EAA0B;AACxB,iBAAOD,GAAP;AACD,SAFD,MAEO;AACL,iBAAOH,MAAP;AACD;AACF,OANmB,CAApB;AAQA,UAAIK,QAAQ,GAAG;AACbD,QAAAA,EAAE,EAAEf,KAAK,CAACe,EADG;AAEbd,QAAAA,UAAU,EAAEG,IAAI,CAACa,SAAL,CAAeL,aAAf,CAFC;AAGbM,QAAAA,QAAQ,EAAElB,KAAK,CAACkB;AAHH,OAAf;AAKA,YAAMC,QAAQ,GAAG,MAAMrB,QAAQ,CAACW,WAAT,CAAqBO,QAArB,EAA+Bd,QAA/B,CAAvB;AACA,aAAOiB,QAAP;AACD,KAnBD,CAmBE,OAAOC,KAAP,EAAc;AACdC,MAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACD;AACF,GAvBmB,EAuBjB,EAvBiB,CAApB;AAyBAnB,EAAAA,UAAU,CAACY,GAAX,CAAgBC,GAAD,IAAS;AACtBA,IAAAA,GAAG,CAACd,KAAJ,GAAYA,KAAZ;AACAc,IAAAA,GAAG,CAACN,IAAJ,GAAWL,YAAY,CAACH,KAAD,CAAvB;AACA,WAAOc,GAAP;AACD,GAJD;AAMA,sBACE,QAAC,QAAD;AACE,IAAA,IAAI,EAAEb,UADR;AAEE,IAAA,UAAU,EAAE,IAFd;AAGE,IAAA,OAAO,EAAEJ,oBAHX;AAIE,IAAA,uBAAuB,MAJzB;AAKE,IAAA,oBAAoB,EAAE;AAAE0B,MAAAA,aAAa,EAAE;AAAjB,KALxB;AAME,IAAA,gBAAgB,EAAEd;AANpB;AAAA;AAAA;AAAA;AAAA,UADF;AAUD,CA5DD;;AA8DA,eAAeV,KAAf","sourcesContent":["import React from \"react\";\nimport { DataGrid } from \"@mui/x-data-grid\";\nimport { useDispatch } from \"../../../store\";\nimport { deliveryDetailsTable } from \"../../grids/grid-columns\";\nimport { orderApi } from \"../../../api/order-api\";\n\nconst Table = ({ order, deliveries }) => {\n  const dispatch = useDispatch();\n\n  const getOrderUnit = (order) => {\n    switch (JSON.parse(order.saleType).value) {\n      case \"quantity\":\n        return `${JSON.parse(order.saleType).unit}`;\n        break;\n      case \"fixed\":\n        return `(Fixed)`;\n        break;\n      case \"time\":\n        return `${JSON.parse(order.saleType).unit}`;\n        break;\n      default:\n        break;\n    }\n  };\n\n  const updateOrder = React.useCallback(async (newRow) => {\n    try {\n      let order = newRow.order;\n      delete newRow.order;\n\n      let newDeliveries = JSON.parse(order.deliveries).map((del) => {\n        if (del.id !== newRow.id) {\n          return del;\n        } else {\n          return newRow;\n        }\n      });\n\n      let newOrder = {\n        id: order.id,\n        deliveries: JSON.stringify(newDeliveries),\n        _version: order._version,\n      };\n      const response = await orderApi.updateOrder(newOrder, dispatch);\n      return response;\n    } catch (error) {\n      console.log(error);\n    }\n  }, []);\n\n  deliveries.map((del) => {\n    del.order = order;\n    del.unit = getOrderUnit(order);\n    return del;\n  });\n\n  return (\n    <DataGrid\n      rows={deliveries}\n      autoHeight={true}\n      columns={deliveryDetailsTable}\n      disableSelectionOnClick\n      experimentalFeatures={{ newEditingApi: true }}\n      processRowUpdate={updateOrder}\n    />\n  );\n};\n\nexport default Table;\n"]},"metadata":{},"sourceType":"module"}