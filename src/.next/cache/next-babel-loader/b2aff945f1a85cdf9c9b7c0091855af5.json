{"ast":null,"code":"import _regeneratorRuntime from \"/Users/pulkitshah/Desktop/truckarv2/node_modules/next/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/pulkitshah/Desktop/truckarv2/node_modules/next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/pulkitshah/Desktop/truckarv2/node_modules/next/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/pulkitshah/Desktop/truckarv2/node_modules/next/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { API } from \"aws-amplify\";\nimport { ordersByUser } from \"../graphql/queries\";\nimport { createOrder as _createOrder, updateOrder as _updateOrder } from \"../graphql/mutations\";\nimport { Order } from \"../models\";\nimport { DataStore, Predicates } from \"@aws-amplify/datastore\";\nimport moment from \"moment\";\nimport { slice } from \"../slices/orders\";\nimport { getFiscalYearTimestamps } from \"../utils/get-fiscal-year\";\n\nvar OrderApi = /*#__PURE__*/function () {\n  function OrderApi() {\n    _classCallCheck(this, OrderApi);\n  }\n\n  _createClass(OrderApi, [{\n    key: \"getOrdersByUser\",\n    value: function () {\n      var _getOrdersByUser = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(user, dispatch) {\n        var response, orders;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.prev = 0;\n                _context.next = 3;\n                return API.graphql({\n                  query: ordersByUser,\n                  variables: {\n                    user: user.id.toString(),\n                    sortDirection: \"DESC\"\n                  }\n                });\n\n              case 3:\n                response = _context.sent;\n                orders = response.data.ordersByUser.items; //////////////////////// GraphQL API ////////////////////////\n                //////////////////////// DataStore API ////////////////////////\n                // const orders = await DataStore.query(Order, (c) =>\n                //   c.user(\"eq\", user.id)\n                // );\n                //////////////////////// DataStore API ////////////////////////\n                // console.log(orders);\n                // Dispatch - Reducer\n\n                dispatch(slice.actions.getOrders(orders));\n                return _context.abrupt(\"return\", orders);\n\n              case 9:\n                _context.prev = 9;\n                _context.t0 = _context[\"catch\"](0);\n                console.log(_context.t0);\n\n              case 12:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, null, [[0, 9]]);\n      }));\n\n      function getOrdersByUser(_x, _x2) {\n        return _getOrdersByUser.apply(this, arguments);\n      }\n\n      return getOrdersByUser;\n    }()\n  }, {\n    key: \"createOrder\",\n    value: function () {\n      var _createOrder2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(newOrder, dispatch) {\n        var createdAt, newOrg, response, order;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                createdAt = moment().toISOString();\n                newOrg = newOrder;\n                newOrg.createdAt = createdAt; //////////////////////// GraphQL API ////////////////////////\n\n                _context2.next = 5;\n                return API.graphql({\n                  query: _createOrder,\n                  variables: {\n                    input: newOrg\n                  },\n                  authMode: \"AMAZON_COGNITO_USER_POOLS\"\n                });\n\n              case 5:\n                response = _context2.sent;\n                order = response.data.createOrder; //////////////////////// GraphQL API ////////////////////////\n                //////////////////////// DataStore API ////////////////////////\n                // const order = await DataStore.save(new Order(newOrg));\n                //////////////////////// DataStore API ////////////////////////\n\n                console.log(order); // Dispatch - Reducer\n\n                dispatch(slice.actions.createOrder({\n                  order: order\n                }));\n                return _context2.abrupt(\"return\", order);\n\n              case 10:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      function createOrder(_x3, _x4) {\n        return _createOrder2.apply(this, arguments);\n      }\n\n      return createOrder;\n    }()\n  }, {\n    key: \"updateOrder\",\n    value: function () {\n      var _updateOrder2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(editedOrder, dispatch) {\n        var response, order;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.next = 2;\n                return API.graphql({\n                  query: _updateOrder,\n                  variables: {\n                    input: editedOrder\n                  },\n                  authMode: \"AMAZON_COGNITO_USER_POOLS\"\n                });\n\n              case 2:\n                response = _context3.sent;\n                order = response.data.updateOrder; //////////////////////// GraphQL API ////////////////////////\n                // console.log(order);\n                // Dispatch - Reducer\n\n                dispatch(slice.actions.updateOrder({\n                  order: order\n                }));\n                return _context3.abrupt(\"return\", order);\n\n              case 6:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      }));\n\n      function updateOrder(_x5, _x6) {\n        return _updateOrder2.apply(this, arguments);\n      }\n\n      return updateOrder;\n    }()\n  }, {\n    key: \"validateDuplicateOrderNo\",\n    value: function () {\n      var _validateDuplicateOrderNo = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(orderNo, saleDate, user) {\n        var response, orders, order;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _context4.prev = 0;\n                _context4.next = 3;\n                return API.graphql({\n                  query: ordersByUser,\n                  variables: {\n                    user: user.id.toString()\n                  }\n                });\n\n              case 3:\n                response = _context4.sent;\n                orders = response.data.ordersByUser.items;\n                order = orders.filter(function (order) {\n                  var orderSaleDate = moment(orders[0].saleDate);\n                  return order.orderNo === orderNo && getFiscalYearTimestamps(orderSaleDate).current.start.format(\"L\") === getFiscalYearTimestamps(saleDate).current.start.format(\"L\");\n                });\n                return _context4.abrupt(\"return\", Boolean(!order.length));\n\n              case 9:\n                _context4.prev = 9;\n                _context4.t0 = _context4[\"catch\"](0);\n                console.log(_context4.t0);\n\n              case 12:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, null, [[0, 9]]);\n      }));\n\n      function validateDuplicateOrderNo(_x7, _x8, _x9) {\n        return _validateDuplicateOrderNo.apply(this, arguments);\n      }\n\n      return validateDuplicateOrderNo;\n    }()\n  }]);\n\n  return OrderApi;\n}();\n\nexport var orderApi = new OrderApi();","map":{"version":3,"sources":["/Users/pulkitshah/Desktop/truckarv2/renderer/api/order-api.js"],"names":["API","ordersByUser","createOrder","updateOrder","Order","DataStore","Predicates","moment","slice","getFiscalYearTimestamps","OrderApi","user","dispatch","graphql","query","variables","id","toString","sortDirection","response","orders","data","items","actions","getOrders","console","log","newOrder","createdAt","toISOString","newOrg","input","authMode","order","editedOrder","orderNo","saleDate","filter","orderSaleDate","current","start","format","Boolean","length","orderApi"],"mappings":"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","sourcesContent":["import { API } from \"aws-amplify\";\nimport { ordersByUser } from \"../graphql/queries\";\nimport { createOrder, updateOrder } from \"../graphql/mutations\";\nimport { Order } from \"../models\";\nimport { DataStore, Predicates } from \"@aws-amplify/datastore\";\nimport moment from \"moment\";\nimport { slice } from \"../slices/orders\";\nimport { getFiscalYearTimestamps } from \"../utils/get-fiscal-year\";\n\nclass OrderApi {\n  async getOrdersByUser(user, dispatch) {\n    try {\n      //////////////////////// GraphQL API ////////////////////////\n\n      const response = await API.graphql({\n        query: ordersByUser,\n        variables: {\n          user: user.id.toString(),\n          sortDirection: \"DESC\",\n        },\n      });\n      const orders = response.data.ordersByUser.items;\n      //////////////////////// GraphQL API ////////////////////////\n\n      //////////////////////// DataStore API ////////////////////////\n\n      // const orders = await DataStore.query(Order, (c) =>\n      //   c.user(\"eq\", user.id)\n      // );\n\n      //////////////////////// DataStore API ////////////////////////\n\n      // console.log(orders);\n\n      // Dispatch - Reducer\n\n      dispatch(slice.actions.getOrders(orders));\n\n      return orders;\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  async createOrder(newOrder, dispatch) {\n    const createdAt = moment().toISOString();\n    let newOrg = newOrder;\n    newOrg.createdAt = createdAt;\n\n    //////////////////////// GraphQL API ////////////////////////\n\n    const response = await API.graphql({\n      query: createOrder,\n      variables: { input: newOrg },\n      authMode: \"AMAZON_COGNITO_USER_POOLS\",\n    });\n\n    const order = response.data.createOrder;\n\n    //////////////////////// GraphQL API ////////////////////////\n\n    //////////////////////// DataStore API ////////////////////////\n\n    // const order = await DataStore.save(new Order(newOrg));\n\n    //////////////////////// DataStore API ////////////////////////\n\n    console.log(order);\n\n    // Dispatch - Reducer\n\n    dispatch(slice.actions.createOrder({ order }));\n\n    return order;\n  }\n\n  async updateOrder(editedOrder, dispatch) {\n    //////////////////////// GraphQL API ////////////////////////\n\n    const response = await API.graphql({\n      query: updateOrder,\n      variables: { input: editedOrder },\n      authMode: \"AMAZON_COGNITO_USER_POOLS\",\n    });\n\n    const order = response.data.updateOrder;\n\n    //////////////////////// GraphQL API ////////////////////////\n\n    // console.log(order);\n\n    // Dispatch - Reducer\n\n    dispatch(slice.actions.updateOrder({ order }));\n\n    return order;\n  }\n\n  async validateDuplicateOrderNo(orderNo, saleDate, user) {\n    try {\n      const response = await API.graphql({\n        query: ordersByUser,\n        variables: { user: user.id.toString() },\n      });\n\n      const orders = response.data.ordersByUser.items;\n\n      const order = orders.filter((order) => {\n        const orderSaleDate = moment(orders[0].saleDate);\n\n        return (\n          order.orderNo === orderNo &&\n          getFiscalYearTimestamps(orderSaleDate).current.start.format(\"L\") ===\n            getFiscalYearTimestamps(saleDate).current.start.format(\"L\")\n        );\n      });\n      return Boolean(!order.length);\n    } catch (error) {\n      console.log(error);\n    }\n  }\n}\n\nexport const orderApi = new OrderApi();\n"]},"metadata":{},"sourceType":"module"}