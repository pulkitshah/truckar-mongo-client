{"ast":null,"code":"import _taggedTemplateLiteral from \"/Users/pulkitshah/Desktop/truckarv2/node_modules/next/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\n\nvar _s = $RefreshSig$();\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  query AllDeliveries($user: ObjectId!, $limit: Int) {\\n    deliveries(query: { user: $user }, limit: $limit) {\\n      _id\\n    }\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React from \"react\";\nimport { useQuery } from \"@apollo/client\";\nimport gql from \"graphql-tag\";\n\nvar getDeliveries = function getDeliveries(user) {\n  var _getDeliveriesOfUser = getDeliveriesOfUser(user),\n      deliveriesPoll = _getDeliveriesOfUser.deliveriesPoll,\n      fetchMore = _getDeliveriesOfUser.fetchMore,\n      loading = _getDeliveriesOfUser.loading;\n\n  return {\n    loading: loading,\n    deliveriesPoll: deliveriesPoll,\n    fetchMore: fetchMore\n  };\n}; // TODO: Add the GraphQL query for fetching all deliveries.\n\n\nvar GetDeliveriesOfUserQuery = gql(_templateObject());\n\nfunction getDeliveriesOfUser(user) {\n  _s();\n\n  var _data$deliveries;\n\n  var queryResult = useQuery(GetDeliveriesOfUserQuery, {\n    variables: {\n      user: user._id,\n      offset: 0,\n      limit: 10000\n    }\n  }, {});\n  var data = queryResult.data,\n      loading = queryResult.loading,\n      fetchMore = queryResult.fetchMore,\n      error = queryResult.error,\n      startPolling = queryResult.startPolling,\n      stopPolling = queryResult.stopPolling;\n  React.useEffect(function () {\n    // check server for updates every 1000ms\n    startPolling(1000); // stop polling server for data when component unmounts\n\n    return function () {\n      return stopPolling();\n    };\n  }, [startPolling, stopPolling]);\n\n  if (error) {\n    throw new Error(JSON.stringify(error, null, 2));\n  } // If the query has finished, return the deliveries from the result data\n  // Otherwise, return an empty list\n\n\n  var deliveriesPoll = (_data$deliveries = data === null || data === void 0 ? void 0 : data.deliveries) !== null && _data$deliveries !== void 0 ? _data$deliveries : [];\n  return {\n    deliveriesPoll: deliveriesPoll,\n    fetchMoreDeliveries: fetchMore,\n    deliveriesloading: loading\n  };\n}\n\n_s(getDeliveriesOfUser, \"Ob+mMjC5CDfgdbm980HlPvB7r40=\", false, function () {\n  return [useQuery];\n});\n\nexport default getDeliveries;","map":{"version":3,"sources":["/Users/pulkitshah/Desktop/truckarv2/renderer/graphql/deliveries.js"],"names":["React","useQuery","gql","getDeliveries","user","getDeliveriesOfUser","deliveriesPoll","fetchMore","loading","GetDeliveriesOfUserQuery","queryResult","variables","_id","offset","limit","data","error","startPolling","stopPolling","useEffect","Error","JSON","stringify","deliveries","fetchMoreDeliveries","deliveriesloading"],"mappings":";;;;;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,QAAyB,gBAAzB;AACA,OAAOC,GAAP,MAAgB,aAAhB;;AAEA,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,CAACC,IAAD,EAAU;AAAA,6BAE5BC,mBAAmB,CAACD,IAAD,CAFS;AAAA,MACtBE,cADsB,wBACtBA,cADsB;AAAA,MACNC,SADM,wBACNA,SADM;AAAA,MACKC,OADL,wBACKA,OADL;;AAG9B,SAAO;AACLA,IAAAA,OAAO,EAAPA,OADK;AAELF,IAAAA,cAAc,EAAdA,cAFK;AAGLC,IAAAA,SAAS,EAATA;AAHK,GAAP;AAKD,CARD,C,CAUA;;;AAEA,IAAME,wBAAwB,GAAGP,GAAH,mBAA9B;;AAQA,SAASG,mBAAT,CAA6BD,IAA7B,EAAmC;AAAA;;AAAA;;AACjC,MAAMM,WAAW,GAAGT,QAAQ,CAC1BQ,wBAD0B,EAE1B;AACEE,IAAAA,SAAS,EAAE;AACTP,MAAAA,IAAI,EAAEA,IAAI,CAACQ,GADF;AAETC,MAAAA,MAAM,EAAE,CAFC;AAGTC,MAAAA,KAAK,EAAE;AAHE;AADb,GAF0B,EAS1B,EAT0B,CAA5B;AADiC,MAYzBC,IAZyB,GAa/BL,WAb+B,CAYzBK,IAZyB;AAAA,MAYnBP,OAZmB,GAa/BE,WAb+B,CAYnBF,OAZmB;AAAA,MAYVD,SAZU,GAa/BG,WAb+B,CAYVH,SAZU;AAAA,MAYCS,KAZD,GAa/BN,WAb+B,CAYCM,KAZD;AAAA,MAYQC,YAZR,GAa/BP,WAb+B,CAYQO,YAZR;AAAA,MAYsBC,WAZtB,GAa/BR,WAb+B,CAYsBQ,WAZtB;AAejClB,EAAAA,KAAK,CAACmB,SAAN,CAAgB,YAAM;AACpB;AACAF,IAAAA,YAAY,CAAC,IAAD,CAAZ,CAFoB,CAGpB;;AACA,WAAO;AAAA,aAAMC,WAAW,EAAjB;AAAA,KAAP;AACD,GALD,EAKG,CAACD,YAAD,EAAeC,WAAf,CALH;;AAOA,MAAIF,KAAJ,EAAW;AACT,UAAM,IAAII,KAAJ,CAAUC,IAAI,CAACC,SAAL,CAAeN,KAAf,EAAsB,IAAtB,EAA4B,CAA5B,CAAV,CAAN;AACD,GAxBgC,CAyBjC;AACA;;;AACA,MAAMV,cAAc,uBAAGS,IAAH,aAAGA,IAAH,uBAAGA,IAAI,CAAEQ,UAAT,+DAAuB,EAA3C;AAEA,SAAO;AACLjB,IAAAA,cAAc,EAAdA,cADK;AAELkB,IAAAA,mBAAmB,EAAEjB,SAFhB;AAGLkB,IAAAA,iBAAiB,EAAEjB;AAHd,GAAP;AAKD;;GAlCQH,mB;UACaJ,Q;;;AA0CtB,eAAeE,aAAf","sourcesContent":["import React from \"react\";\nimport { useQuery } from \"@apollo/client\";\nimport gql from \"graphql-tag\";\n\nconst getDeliveries = (user) => {\n  const { deliveriesPoll, fetchMore, loading } =\n    getDeliveriesOfUser(user);\n  return {\n    loading,\n    deliveriesPoll,\n    fetchMore,\n  };\n};\n\n// TODO: Add the GraphQL query for fetching all deliveries.\n\nconst GetDeliveriesOfUserQuery = gql`\n  query AllDeliveries($user: ObjectId!, $limit: Int) {\n    deliveries(query: { user: $user }, limit: $limit) {\n      _id\n    }\n  }\n`;\n\nfunction getDeliveriesOfUser(user) {\n  const queryResult = useQuery(\n    GetDeliveriesOfUserQuery,\n    {\n      variables: {\n        user: user._id,\n        offset: 0,\n        limit: 10000,\n      },\n    },\n    {}\n  );\n  const { data, loading, fetchMore, error, startPolling, stopPolling } =\n    queryResult;\n\n  React.useEffect(() => {\n    // check server for updates every 1000ms\n    startPolling(1000);\n    // stop polling server for data when component unmounts\n    return () => stopPolling();\n  }, [startPolling, stopPolling]);\n  \n  if (error) {\n    throw new Error(JSON.stringify(error, null, 2));\n  }\n  // If the query has finished, return the deliveries from the result data\n  // Otherwise, return an empty list\n  const deliveriesPoll = data?.deliveries ?? [];\n\n  return {\n    deliveriesPoll,\n    fetchMoreDeliveries: fetchMore,\n    deliveriesloading: loading,\n  };\n}\n\n\n\n\n\n\n\n\nexport default getDeliveries;\n"]},"metadata":{},"sourceType":"module"}