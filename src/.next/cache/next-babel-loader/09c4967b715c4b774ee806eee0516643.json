{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/pulkitshah/Desktop/truckarv2/renderer/components/dashboard/autocompletes/PartyAutocomplete.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* eslint-disable no-use-before-define */\nimport React, { useState, useEffect, useCallback } from \"react\";\nimport * as Yup from \"yup\";\nimport { useFormik } from \"formik\";\nimport { Box, Button, Card, CardContent, Dialog, DialogTitle, Divider, Grid, Switch, TextField, Typography } from \"@mui/material\";\nimport { useDispatch } from \"../../../store\";\nimport Autocomplete, { createFilterOptions } from \"@mui/material/Autocomplete\";\nimport GoogleMaps from \"../welcome/google-places-autocomplete\";\nimport { partyApi } from \"../../../api/party-api\";\n\nconst FreeSoloCreateOptionDialog = (_ref) => {\n  let {\n    className,\n    touched,\n    setFieldValue,\n    errors,\n    handleBlur,\n    type,\n    values,\n    user\n  } = _ref,\n      rest = _objectWithoutProperties(_ref, [\"className\", \"touched\", \"setFieldValue\", \"errors\", \"handleBlur\", \"type\", \"values\", \"user\"]);\n\n  const dispatch = useDispatch();\n  const [value, setValue] = React.useState(values && values[type]);\n  const [open, toggleOpen] = React.useState(false);\n  const {\n    0: parties,\n    1: setParties\n  } = useState([]);\n  const [dialogValue, setDialogValue] = React.useState({\n    name: \"\",\n    transporter: type !== \"customer\" ? true : false\n  });\n  const formik = useFormik({\n    initialValues: {\n      name: dialogValue.name || \"\",\n      mobile: dialogValue.mobile || \"\",\n      location: dialogValue.location || \"\",\n      transporter: dialogValue.transporter || \"\",\n      submit: null\n    },\n    validationSchema: Yup.object().shape({\n      name: Yup.string().max(255).required(\"Name is required\"),\n      mobile: Yup.string().matches(/^[6-9]\\d{9}$/, \"Phone number is not valid\").required(\"Mobile is required\")\n    }),\n    onSubmit: async (values, {\n      resetForm,\n      setErrors,\n      setStatus,\n      setSubmitting\n    }) => {\n      try {\n        // NOTE: Make API request\n        console.log(values);\n        const response = await axios.post(`/api/parties/`, _objectSpread({\n          name: values.name.replace(/\\w\\S*/g, function (txt) {\n            return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();\n          })\n        }, values));\n        setFieldValue(type, response.data); // dispatch(updateParty(party, values));\n\n        resetForm();\n        setStatus({\n          success: true\n        });\n        setSubmitting(false);\n        handleClose();\n      } catch (err) {\n        console.log(err);\n        setStatus({\n          success: false\n        });\n        setErrors({\n          submit: err.message\n        });\n        setSubmitting(false);\n      }\n    }\n  });\n  useEffect(async () => {\n    try {\n      const partiesDB = await partyApi.getPartiesByUser(user, dispatch);\n      setParties(partiesDB);\n    } catch (error) {\n      console.log(error);\n    }\n  }, []);\n\n  const handleClose = () => {\n    setDialogValue({\n      name: \"\",\n      transporter: type !== \"customer\" ? true : false\n    });\n    toggleOpen(false);\n  };\n\n  const handleSubmit = async event => {\n    event.preventDefault();\n    setValue({\n      name: dialogValue.name,\n      transporter: dialogValue.transporter\n    });\n\n    try {\n      await partyApi.createParty({\n        name: dialogValue.name.replace(/\\w\\S*/g, function (txt) {\n          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();\n        }),\n        transporter: dialogValue.transporter\n      }, dispatch);\n      setFieldValue(type, response.data);\n    } catch (err) {\n      console.error(err);\n    }\n\n    handleClose();\n  };\n\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Autocomplete, {\n      value: value,\n      filterOptions: (options, params) => {\n        const filtered = filter(options, params);\n\n        if (params.inputValue !== \"\") {\n          filtered.push({\n            inputValue: params.inputValue,\n            name: `Add \"${params.inputValue}\"`\n          });\n        }\n\n        return filtered;\n      },\n      onChange: (event, newValue) => {\n        if (typeof newValue === \"string\") {\n          toggleOpen(true);\n          setDialogValue({\n            name: newValue.replace(/\\w\\S*/g, function (txt) {\n              return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();\n            }),\n            transporter: type !== \"customer\" ? true : false\n          });\n        } else if (newValue && newValue.inputValue) {\n          toggleOpen(true);\n          setDialogValue({\n            name: newValue.inputValue,\n            transporter: type !== \"customer\" ? true : false\n          });\n        } else {\n          setFieldValue(type, newValue);\n          setValue(newValue);\n        }\n      },\n      id: type,\n      options: parties,\n      getOptionLabel: option => {\n        // e.g value selected with enter, right from the input\n        if (typeof option === \"string\") {\n          return option.replace(/\\w\\S*/g, function (txt) {\n            return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();\n          });\n        }\n\n        if (option.inputValue) {\n          return option.inputValue.replace(/\\w\\S*/g, function (txt) {\n            return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();\n          });\n        }\n\n        return option.name.replace(/\\w\\S*/g, function (txt) {\n          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();\n        });\n      },\n      clearOnBlur: true,\n      handleHomeEndKeys: true,\n      renderOption: (props, option) => {\n        return /*#__PURE__*/_jsxDEV(React.Fragment, {\n          children: /*#__PURE__*/_jsxDEV(\"li\", _objectSpread(_objectSpread({}, props), {}, {\n            children: [option.name && option.name.replace(/\\w\\S*/g, function (txt) {\n              return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();\n            }), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 196,\n              columnNumber: 17\n            }, this), option.mobile && `(M) ${option.mobile.replace(/ /g, \"\")}`, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 198,\n              columnNumber: 17\n            }, this), option.city && `City - ${JSON.parse(option.city).structured_formatting.main_text}`, /*#__PURE__*/_jsxDEV(Divider, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 203,\n              columnNumber: 17\n            }, this)]\n          }), void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 189,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 188,\n          columnNumber: 13\n        }, this);\n      },\n      fullWidth: true,\n      freeSolo: true,\n      renderInput: params => /*#__PURE__*/_jsxDEV(TextField, _objectSpread(_objectSpread({\n        onKeyPress: e => {\n          e.which === 13 && e.preventDefault();\n        }\n      }, params), {}, {\n        label: type.charAt(0).toUpperCase() + type.slice(1),\n        error: Boolean(type === \"customer\" ? touched.customer && errors.customer : touched.transporter && errors.transporter),\n        onBlur: handleBlur,\n        helperText: type === \"customer\" ? touched.customer && errors.customer : touched.transporter && errors.transporter,\n        variant: \"outlined\"\n      }), void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 211,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Dialog, {\n      open: open,\n      onClose: handleClose,\n      \"aria-labelledby\": \"form-dialog-name\",\n      children: [/*#__PURE__*/_jsxDEV(DialogTitle, {\n        id: \"form-dialog-name\",\n        children: \"Add a new party\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 237,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", _objectSpread(_objectSpread({\n        onSubmit: handleSubmit\n      }, rest), {}, {\n        children: /*#__PURE__*/_jsxDEV(Card, {\n          children: /*#__PURE__*/_jsxDEV(CardContent, {\n            children: [/*#__PURE__*/_jsxDEV(Grid, {\n              container: true,\n              spacing: 3,\n              children: [/*#__PURE__*/_jsxDEV(Grid, {\n                item: true,\n                xs: 12,\n                children: /*#__PURE__*/_jsxDEV(TextField, {\n                  error: Boolean(formik.touched.name && formik.errors.name),\n                  fullWidth: true,\n                  helperText: formik.touched.name && formik.errors.name,\n                  label: \"Main Contact Name\",\n                  name: \"name\",\n                  onBlur: handleBlur,\n                  onChange: event => {\n                    formik.setFieldValue(\"name\", event.target.value.replace(/\\w\\S*/g, function (txt) {\n                      return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();\n                    }));\n                  },\n                  required: true,\n                  value: formik.values.name,\n                  variant: \"outlined\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 243,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 242,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Grid, {\n                item: true,\n                xs: 12,\n                children: /*#__PURE__*/_jsxDEV(TextField, {\n                  error: Boolean(formik.touched.mobile && formik.errors.mobile),\n                  fullWidth: true,\n                  helperText: formik.touched.mobile && formik.errors.mobile,\n                  label: \"Mobile\",\n                  name: \"mobile\",\n                  onBlur: handleBlur,\n                  onChange: event => {\n                    setFieldValue(\"mobile\", event.target.value.replace(/ /g, \"\"));\n                  },\n                  value: formik.values.mobile,\n                  variant: \"outlined\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 267,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 266,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Grid, {\n                item: true,\n                xs: 12,\n                children: /*#__PURE__*/_jsxDEV(GoogleMaps, {\n                  name: \"location\",\n                  field: \"location\",\n                  formik: formik,\n                  error: Boolean(formik.touched.city && formik.errors.city),\n                  label: \"Your city in India\",\n                  setFieldValue: formik.setFieldValue,\n                  handleBlur: formik.handleBlur,\n                  values: formik.values\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 287,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 286,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Grid, {\n                item: true,\n                xs: 12,\n                children: [/*#__PURE__*/_jsxDEV(Typography, {\n                  variant: \"h5\",\n                  color: \"textPrimary\",\n                  children: \"Party Type\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 299,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                  variant: \"body2\",\n                  color: \"textSecondary\",\n                  children: \"Is this party a transporter?\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 302,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(Switch, {\n                  checked: formik.values.transporter,\n                  color: \"secondary\",\n                  edge: \"start\",\n                  name: \"transporter\",\n                  onChange: formik.handleChange,\n                  value: formik.values.transporter\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 305,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 298,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 241,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Box, {\n              mt: 2,\n              children: /*#__PURE__*/_jsxDEV(Grid, {\n                container: true,\n                spacing: 3,\n                children: [/*#__PURE__*/_jsxDEV(Grid, {\n                  item: true,\n                  children: /*#__PURE__*/_jsxDEV(Button, {\n                    variant: \"contained\",\n                    color: \"secondary\",\n                    type: \"submit\",\n                    disabled: formik.isSubmitting,\n                    children: \"Create Party\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 318,\n                    columnNumber: 21\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 317,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(Grid, {\n                  item: true,\n                  children: /*#__PURE__*/_jsxDEV(Button, {\n                    variant: \"contained\",\n                    color: \"secondary\",\n                    onClick: handleClose,\n                    children: \"Cancel\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 328,\n                    columnNumber: 21\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 327,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 316,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 315,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 240,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 239,\n          columnNumber: 11\n        }, this)\n      }), void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 238,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 232,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 130,\n    columnNumber: 5\n  }, this);\n};\n\nexport default FreeSoloCreateOptionDialog;","map":{"version":3,"sources":["/Users/pulkitshah/Desktop/truckarv2/renderer/components/dashboard/autocompletes/PartyAutocomplete.js"],"names":["React","useState","useEffect","useCallback","Yup","useFormik","Box","Button","Card","CardContent","Dialog","DialogTitle","Divider","Grid","Switch","TextField","Typography","useDispatch","Autocomplete","createFilterOptions","GoogleMaps","partyApi","FreeSoloCreateOptionDialog","className","touched","setFieldValue","errors","handleBlur","type","values","user","rest","dispatch","value","setValue","open","toggleOpen","parties","setParties","dialogValue","setDialogValue","name","transporter","formik","initialValues","mobile","location","submit","validationSchema","object","shape","string","max","required","matches","onSubmit","resetForm","setErrors","setStatus","setSubmitting","console","log","response","axios","post","replace","txt","charAt","toUpperCase","substr","toLowerCase","data","success","handleClose","err","message","partiesDB","getPartiesByUser","error","handleSubmit","event","preventDefault","createParty","options","params","filtered","filter","inputValue","push","newValue","option","props","city","JSON","parse","structured_formatting","main_text","e","which","slice","Boolean","customer","target","handleChange","isSubmitting"],"mappings":"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","sourcesContent":["/* eslint-disable no-use-before-define */\nimport React, { useState, useEffect, useCallback } from \"react\";\nimport * as Yup from \"yup\";\nimport { useFormik } from \"formik\";\n\nimport {\n  Box,\n  Button,\n  Card,\n  CardContent,\n  Dialog,\n  DialogTitle,\n  Divider,\n  Grid,\n  Switch,\n  TextField,\n  Typography,\n} from \"@mui/material\";\nimport { useDispatch } from \"../../../store\";\nimport Autocomplete, { createFilterOptions } from \"@mui/material/Autocomplete\";\nimport GoogleMaps from \"../welcome/google-places-autocomplete\";\nimport { partyApi } from \"../../../api/party-api\";\n\nconst FreeSoloCreateOptionDialog = ({\n  className,\n  touched,\n  setFieldValue,\n  errors,\n  handleBlur,\n  type,\n  values,\n  user,\n  ...rest\n}) => {\n  const dispatch = useDispatch();\n  const [value, setValue] = React.useState(values && values[type]);\n  const [open, toggleOpen] = React.useState(false);\n  const [parties, setParties] = useState([]);\n  const [dialogValue, setDialogValue] = React.useState({\n    name: \"\",\n    transporter: type !== \"customer\" ? true : false,\n  });\n\n  const formik = useFormik({\n    initialValues: {\n      name: dialogValue.name || \"\",\n      mobile: dialogValue.mobile || \"\",\n      location: dialogValue.location || \"\",\n      transporter: dialogValue.transporter || \"\",\n      submit: null,\n    },\n    validationSchema: Yup.object().shape({\n      name: Yup.string().max(255).required(\"Name is required\"),\n      mobile: Yup.string()\n        .matches(/^[6-9]\\d{9}$/, \"Phone number is not valid\")\n        .required(\"Mobile is required\"),\n    }),\n    onSubmit: async (\n      values,\n      { resetForm, setErrors, setStatus, setSubmitting }\n    ) => {\n      try {\n        // NOTE: Make API request\n        console.log(values);\n        const response = await axios.post(`/api/parties/`, {\n          name: values.name.replace(/\\w\\S*/g, function (txt) {\n            return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();\n          }),\n          ...values,\n        });\n        setFieldValue(type, response.data);\n        // dispatch(updateParty(party, values));\n        resetForm();\n        setStatus({ success: true });\n        setSubmitting(false);\n        handleClose();\n      } catch (err) {\n        console.log(err);\n        setStatus({ success: false });\n        setErrors({ submit: err.message });\n        setSubmitting(false);\n      }\n    },\n  });\n\n  useEffect(async () => {\n    try {\n      const partiesDB = await partyApi.getPartiesByUser(user, dispatch);\n      setParties(partiesDB);\n    } catch (error) {\n      console.log(error);\n    }\n  }, []);\n\n  const handleClose = () => {\n    setDialogValue({\n      name: \"\",\n      transporter: type !== \"customer\" ? true : false,\n    });\n\n    toggleOpen(false);\n  };\n\n  const handleSubmit = async (event) => {\n    event.preventDefault();\n    setValue({\n      name: dialogValue.name,\n      transporter: dialogValue.transporter,\n    });\n\n    try {\n      await partyApi.createParty(\n        {\n          name: dialogValue.name.replace(/\\w\\S*/g, function (txt) {\n            return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();\n          }),\n          transporter: dialogValue.transporter,\n        },\n        dispatch\n      );\n      setFieldValue(type, response.data);\n    } catch (err) {\n      console.error(err);\n    }\n\n    handleClose();\n  };\n\n  return (\n    <React.Fragment>\n      <Autocomplete\n        value={value}\n        filterOptions={(options, params) => {\n          const filtered = filter(options, params);\n\n          if (params.inputValue !== \"\") {\n            filtered.push({\n              inputValue: params.inputValue,\n              name: `Add \"${params.inputValue}\"`,\n            });\n          }\n          return filtered;\n        }}\n        onChange={(event, newValue) => {\n          if (typeof newValue === \"string\") {\n            toggleOpen(true);\n            setDialogValue({\n              name: newValue.replace(/\\w\\S*/g, function (txt) {\n                return (\n                  txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase()\n                );\n              }),\n              transporter: type !== \"customer\" ? true : false,\n            });\n          } else if (newValue && newValue.inputValue) {\n            toggleOpen(true);\n            setDialogValue({\n              name: newValue.inputValue,\n              transporter: type !== \"customer\" ? true : false,\n            });\n          } else {\n            setFieldValue(type, newValue);\n            setValue(newValue);\n          }\n        }}\n        id={type}\n        options={parties}\n        getOptionLabel={(option) => {\n          // e.g value selected with enter, right from the input\n          if (typeof option === \"string\") {\n            return option.replace(/\\w\\S*/g, function (txt) {\n              return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();\n            });\n          }\n          if (option.inputValue) {\n            return option.inputValue.replace(/\\w\\S*/g, function (txt) {\n              return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();\n            });\n          }\n          return option.name.replace(/\\w\\S*/g, function (txt) {\n            return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();\n          });\n        }}\n        clearOnBlur\n        handleHomeEndKeys\n        renderOption={(props, option) => {\n          return (\n            <React.Fragment>\n              <li {...props}>\n                {option.name &&\n                  option.name.replace(/\\w\\S*/g, function (txt) {\n                    return (\n                      txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase()\n                    );\n                  })}\n                <br />\n                {option.mobile && `(M) ${option.mobile.replace(/ /g, \"\")}`}\n                <br />\n                {option.city &&\n                  `City - ${\n                    JSON.parse(option.city).structured_formatting.main_text\n                  }`}\n                <Divider />\n              </li>\n            </React.Fragment>\n          );\n        }}\n        fullWidth\n        freeSolo\n        renderInput={(params) => (\n          <TextField\n            onKeyPress={(e) => {\n              e.which === 13 && e.preventDefault();\n            }}\n            {...params}\n            label={type.charAt(0).toUpperCase() + type.slice(1)}\n            error={Boolean(\n              type === \"customer\"\n                ? touched.customer && errors.customer\n                : touched.transporter && errors.transporter\n            )}\n            onBlur={handleBlur}\n            helperText={\n              type === \"customer\"\n                ? touched.customer && errors.customer\n                : touched.transporter && errors.transporter\n            }\n            variant=\"outlined\"\n          />\n        )}\n      />\n      <Dialog\n        open={open}\n        onClose={handleClose}\n        aria-labelledby=\"form-dialog-name\"\n      >\n        <DialogTitle id=\"form-dialog-name\">Add a new party</DialogTitle>\n        <form onSubmit={handleSubmit} {...rest}>\n          <Card>\n            <CardContent>\n              <Grid container spacing={3}>\n                <Grid item xs={12}>\n                  <TextField\n                    error={Boolean(formik.touched.name && formik.errors.name)}\n                    fullWidth\n                    helperText={formik.touched.name && formik.errors.name}\n                    label=\"Main Contact Name\"\n                    name=\"name\"\n                    onBlur={handleBlur}\n                    onChange={(event) => {\n                      formik.setFieldValue(\n                        \"name\",\n                        event.target.value.replace(/\\w\\S*/g, function (txt) {\n                          return (\n                            txt.charAt(0).toUpperCase() +\n                            txt.substr(1).toLowerCase()\n                          );\n                        })\n                      );\n                    }}\n                    required\n                    value={formik.values.name}\n                    variant=\"outlined\"\n                  />\n                </Grid>\n                <Grid item xs={12}>\n                  <TextField\n                    error={Boolean(\n                      formik.touched.mobile && formik.errors.mobile\n                    )}\n                    fullWidth\n                    helperText={formik.touched.mobile && formik.errors.mobile}\n                    label=\"Mobile\"\n                    name=\"mobile\"\n                    onBlur={handleBlur}\n                    onChange={(event) => {\n                      setFieldValue(\n                        \"mobile\",\n                        event.target.value.replace(/ /g, \"\")\n                      );\n                    }}\n                    value={formik.values.mobile}\n                    variant=\"outlined\"\n                  />\n                </Grid>\n                <Grid item xs={12}>\n                  <GoogleMaps\n                    name={\"location\"}\n                    field={\"location\"}\n                    formik={formik}\n                    error={Boolean(formik.touched.city && formik.errors.city)}\n                    label={\"Your city in India\"}\n                    setFieldValue={formik.setFieldValue}\n                    handleBlur={formik.handleBlur}\n                    values={formik.values}\n                  />\n                </Grid>\n                <Grid item xs={12}>\n                  <Typography variant=\"h5\" color=\"textPrimary\">\n                    Party Type\n                  </Typography>\n                  <Typography variant=\"body2\" color=\"textSecondary\">\n                    Is this party a transporter?\n                  </Typography>\n                  <Switch\n                    checked={formik.values.transporter}\n                    color=\"secondary\"\n                    edge=\"start\"\n                    name=\"transporter\"\n                    onChange={formik.handleChange}\n                    value={formik.values.transporter}\n                  />\n                </Grid>\n              </Grid>\n              <Box mt={2}>\n                <Grid container spacing={3}>\n                  <Grid item>\n                    <Button\n                      variant=\"contained\"\n                      color=\"secondary\"\n                      type=\"submit\"\n                      disabled={formik.isSubmitting}\n                    >\n                      Create Party\n                    </Button>\n                  </Grid>\n                  <Grid item>\n                    <Button\n                      variant=\"contained\"\n                      color=\"secondary\"\n                      onClick={handleClose}\n                    >\n                      Cancel\n                    </Button>\n                  </Grid>\n                </Grid>\n              </Box>\n            </CardContent>\n          </Card>\n        </form>\n      </Dialog>\n    </React.Fragment>\n  );\n};\nexport default FreeSoloCreateOptionDialog;\n"]},"metadata":{},"sourceType":"module"}