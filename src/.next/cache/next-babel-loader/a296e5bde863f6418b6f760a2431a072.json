{"ast":null,"code":"import _regeneratorRuntime from \"/Users/pulkitshah/Desktop/truckarv2/node_modules/next/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/pulkitshah/Desktop/truckarv2/node_modules/next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/pulkitshah/Desktop/truckarv2/node_modules/next/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/pulkitshah/Desktop/truckarv2/node_modules/next/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { API } from \"aws-amplify\";\nimport { driversByUser } from \"../graphql/queries\";\nimport { createDriver as _createDriver, updateDriver as _updateDriver } from \"../graphql/mutations\";\nimport { Driver } from \"../models\";\nimport { DataStore, Predicates } from \"@aws-amplify/datastore\";\nimport moment from \"moment\";\nimport { slice } from \"../slices/drivers\";\nvar now = new Date();\n\nvar DriverApi = /*#__PURE__*/function () {\n  function DriverApi() {\n    _classCallCheck(this, DriverApi);\n  }\n\n  _createClass(DriverApi, [{\n    key: \"getDriversByUser\",\n    value: function () {\n      var _getDriversByUser = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(user, dispatch) {\n        var response, drivers;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.prev = 0;\n                _context.next = 3;\n                return API.graphql({\n                  query: driversByUser,\n                  variables: {\n                    user: user.id.toString()\n                  }\n                });\n\n              case 3:\n                response = _context.sent;\n                drivers = response.data.driversByUser.items; //////////////////////// GraphQL API ////////////////////////\n                //////////////////////// DataStore API ////////////////////////\n                // const drivers = await DataStore.query(Driver, (c) =>\n                //   c.user(\"eq\", user.id)\n                // );\n                //////////////////////// DataStore API ////////////////////////\n\n                console.log(drivers); // Dispatch - Reducer\n\n                dispatch(slice.actions.getDrivers(drivers));\n                return _context.abrupt(\"return\", drivers);\n\n              case 10:\n                _context.prev = 10;\n                _context.t0 = _context[\"catch\"](0);\n                console.log(_context.t0);\n\n              case 13:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, null, [[0, 10]]);\n      }));\n\n      function getDriversByUser(_x, _x2) {\n        return _getDriversByUser.apply(this, arguments);\n      }\n\n      return getDriversByUser;\n    }()\n  }, {\n    key: \"createDriver\",\n    value: function () {\n      var _createDriver2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(createdDriver, dispatch) {\n        var createdAt, newDriver, response, driver;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                createdAt = moment().toISOString();\n                newDriver = createdDriver;\n                newDriver.createdAt = createdAt; //////////////////////// GraphQL API ////////////////////////\n\n                _context2.next = 5;\n                return API.graphql({\n                  query: _createDriver,\n                  variables: {\n                    input: newDriver\n                  },\n                  authMode: \"AMAZON_COGNITO_USER_POOLS\"\n                });\n\n              case 5:\n                response = _context2.sent;\n                driver = response.data.createDriver; //////////////////////// GraphQL API ////////////////////////\n                //////////////////////// DataStore API ////////////////////////\n                // const driver = await DataStore.save(new Driver(newDriver));\n                //////////////////////// DataStore API ////////////////////////\n                // console.log(driver);\n                // Dispatch - Reducer\n\n                dispatch(slice.actions.createDriver({\n                  driver: driver\n                }));\n                return _context2.abrupt(\"return\", driver);\n\n              case 9:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      function createDriver(_x3, _x4) {\n        return _createDriver2.apply(this, arguments);\n      }\n\n      return createDriver;\n    }()\n  }, {\n    key: \"updateDriver\",\n    value: function () {\n      var _updateDriver2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(editedDriver, dispatch) {\n        var response, driver;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.next = 2;\n                return API.graphql({\n                  query: _updateDriver,\n                  variables: {\n                    input: editedDriver\n                  },\n                  authMode: \"AMAZON_COGNITO_USER_POOLS\"\n                });\n\n              case 2:\n                response = _context3.sent;\n                driver = response.data.updateDriver; //////////////////////// GraphQL API ////////////////////////\n                // console.log(driver);\n                // Dispatch - Reducer\n\n                dispatch(slice.actions.updateDriver({\n                  driver: driver\n                }));\n                return _context3.abrupt(\"return\", response);\n\n              case 6:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      }));\n\n      function updateDriver(_x5, _x6) {\n        return _updateDriver2.apply(this, arguments);\n      }\n\n      return updateDriver;\n    }()\n  }, {\n    key: \"validateDuplicateName\",\n    value: function () {\n      var _validateDuplicateName = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(name, user) {\n        var response, drivers, driver;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _context4.next = 2;\n                return API.graphql({\n                  query: driversByUser,\n                  variables: {\n                    user: user.id.toString()\n                  }\n                });\n\n              case 2:\n                response = _context4.sent;\n                drivers = response.data.driversByUser.items;\n                driver = drivers.find(function (driver) {\n                  return driver.name === name;\n                });\n                return _context4.abrupt(\"return\", Boolean(!driver));\n\n              case 6:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4);\n      }));\n\n      function validateDuplicateName(_x7, _x8) {\n        return _validateDuplicateName.apply(this, arguments);\n      }\n\n      return validateDuplicateName;\n    }()\n  }, {\n    key: \"validateDuplicateMobile\",\n    value: function () {\n      var _validateDuplicateMobile = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(mobile, user) {\n        var response, drivers, driver;\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                _context5.next = 2;\n                return API.graphql({\n                  query: driversByUser,\n                  variables: {\n                    user: user.id.toString()\n                  }\n                });\n\n              case 2:\n                response = _context5.sent;\n                drivers = response.data.driversByUser.items;\n                driver = drivers.find(function (driver) {\n                  return driver.mobile === mobile;\n                });\n                return _context5.abrupt(\"return\", Boolean(!driver));\n\n              case 6:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5);\n      }));\n\n      function validateDuplicateMobile(_x9, _x10) {\n        return _validateDuplicateMobile.apply(this, arguments);\n      }\n\n      return validateDuplicateMobile;\n    }()\n  }]);\n\n  return DriverApi;\n}();\n\nexport var driverApi = new DriverApi();","map":{"version":3,"sources":["/Users/pulkitshah/Desktop/truckarv2/renderer/api/driver-api.js"],"names":["API","driversByUser","createDriver","updateDriver","Driver","DataStore","Predicates","moment","slice","now","Date","DriverApi","user","dispatch","graphql","query","variables","id","toString","response","drivers","data","items","console","log","actions","getDrivers","createdDriver","createdAt","toISOString","newDriver","input","authMode","driver","editedDriver","name","find","Boolean","mobile","driverApi"],"mappings":"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","sourcesContent":["import { API } from \"aws-amplify\";\nimport { driversByUser } from \"../graphql/queries\";\nimport { createDriver, updateDriver } from \"../graphql/mutations\";\nimport { Driver } from \"../models\";\nimport { DataStore, Predicates } from \"@aws-amplify/datastore\";\nimport moment from \"moment\";\nimport { slice } from \"../slices/drivers\";\n\nconst now = new Date();\n\nclass DriverApi {\n  async getDriversByUser(user, dispatch) {\n    try {\n      //////////////////////// GraphQL API ////////////////////////\n\n      const response = await API.graphql({\n        query: driversByUser,\n        variables: { user: user.id.toString() },\n      });\n      const drivers = response.data.driversByUser.items;\n\n      //////////////////////// GraphQL API ////////////////////////\n\n      //////////////////////// DataStore API ////////////////////////\n\n      // const drivers = await DataStore.query(Driver, (c) =>\n      //   c.user(\"eq\", user.id)\n      // );\n\n      //////////////////////// DataStore API ////////////////////////\n\n      console.log(drivers);\n\n      // Dispatch - Reducer\n\n      dispatch(slice.actions.getDrivers(drivers));\n\n      return drivers;\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  async createDriver(createdDriver, dispatch) {\n    const createdAt = moment().toISOString();\n    let newDriver = createdDriver;\n    newDriver.createdAt = createdAt;\n\n    //////////////////////// GraphQL API ////////////////////////\n\n    const response = await API.graphql({\n      query: createDriver,\n      variables: { input: newDriver },\n      authMode: \"AMAZON_COGNITO_USER_POOLS\",\n    });\n\n    const driver = response.data.createDriver;\n\n    //////////////////////// GraphQL API ////////////////////////\n\n    //////////////////////// DataStore API ////////////////////////\n\n    // const driver = await DataStore.save(new Driver(newDriver));\n\n    //////////////////////// DataStore API ////////////////////////\n\n    // console.log(driver);\n\n    // Dispatch - Reducer\n\n    dispatch(slice.actions.createDriver({ driver }));\n\n    return driver;\n  }\n\n  async updateDriver(editedDriver, dispatch) {\n    //////////////////////// GraphQL API ////////////////////////\n\n    const response = await API.graphql({\n      query: updateDriver,\n      variables: { input: editedDriver },\n      authMode: \"AMAZON_COGNITO_USER_POOLS\",\n    });\n\n    const driver = response.data.updateDriver;\n\n    //////////////////////// GraphQL API ////////////////////////\n\n    // console.log(driver);\n\n    // Dispatch - Reducer\n\n    dispatch(slice.actions.updateDriver({ driver }));\n\n    return response;\n  }\n\n  async validateDuplicateName(name, user) {\n    const response = await API.graphql({\n      query: driversByUser,\n      variables: { user: user.id.toString() },\n    });\n    const drivers = response.data.driversByUser.items;\n    const driver = drivers.find((driver) => {\n      return driver.name === name;\n    });\n    return Boolean(!driver);\n  }\n\n  async validateDuplicateMobile(mobile, user) {\n    const response = await API.graphql({\n      query: driversByUser,\n      variables: { user: user.id.toString() },\n    });\n    const drivers = response.data.driversByUser.items;\n    const driver = drivers.find((driver) => {\n      return driver.mobile === mobile;\n    });\n    return Boolean(!driver);\n  }\n}\n\nexport const driverApi = new DriverApi();\n"]},"metadata":{},"sourceType":"module"}