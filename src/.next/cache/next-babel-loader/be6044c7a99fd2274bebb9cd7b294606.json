{"ast":null,"code":"import _regeneratorRuntime from \"/Users/pulkitshah/Desktop/truckarv2/node_modules/next/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/pulkitshah/Desktop/truckarv2/node_modules/next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport qs from 'query-string';\nimport unfetch from 'isomorphic-unfetch';\nimport { nanoid } from 'nanoid';\nimport axios from 'axios';\nimport { useRouter } from 'next/router'; // var electron = require('electron');\n\nimport electron from 'electron';\nvar ipcRenderer = electron.ipcRenderer || false;\n\nfunction waitForEvent(emitter, channel) {\n  // https://www.derpturkey.com/event-emitter-to-promise/\n  return new Promise(function (resolve) {\n    emitter.once(channel, function (event, data) {\n      resolve(data);\n    });\n  });\n}\n\nexport var openLink = !ipcRenderer ? /*#__PURE__*/function () {\n  var _s = $RefreshSig$();\n\n  var _ref = _asyncToGenerator(_s( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(windowName, path, target, options) {\n    var router;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _s();\n\n            router = useRouter();\n\n          case 2:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }), \"fN7XvhJ+p5oE6+Xlo0NJmXpxjC8=\", false, function () {\n    return [useRouter];\n  }));\n\n  return function (_x, _x2, _x3, _x4) {\n    return _ref.apply(this, arguments);\n  };\n}() : /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(windowName, path, target, options) {\n    var id;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            id = nanoid();\n            console.log('electron');\n            console.log(electron);\n\n            try {\n              ipcRenderer.send('create-orders-window', {\n                windowName: windowName,\n                path: path,\n                target: target,\n                options: options\n              });\n            } catch (error) {}\n\n          case 4:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n\n  return function (_x5, _x6, _x7, _x8) {\n    return _ref2.apply(this, arguments);\n  };\n}();","map":{"version":3,"sources":["/Users/pulkitshah/Desktop/truckarv2/renderer/helper/openLink.js"],"names":["qs","unfetch","nanoid","axios","useRouter","electron","ipcRenderer","waitForEvent","emitter","channel","Promise","resolve","once","event","data","openLink","windowName","path","target","options","router","id","console","log","send","error"],"mappings":";;AAAA,OAAOA,EAAP,MAAe,cAAf;AACA,OAAOC,OAAP,MAAoB,oBAApB;AACA,SAASC,MAAT,QAAuB,QAAvB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,SAAT,QAA0B,aAA1B,C,CAEA;;AACA,OAAOC,QAAP,MAAqB,UAArB;AACA,IAAMC,WAAW,GAAGD,QAAQ,CAACC,WAAT,IAAwB,KAA5C;;AAEA,SAASC,YAAT,CAAsBC,OAAtB,EAA+BC,OAA/B,EAAwC;AACtC;AACA,SAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAa;AAC9BH,IAAAA,OAAO,CAACI,IAAR,CAAaH,OAAb,EAAsB,UAACI,KAAD,EAAQC,IAAR,EAAiB;AACrCH,MAAAA,OAAO,CAACG,IAAD,CAAP;AACD,KAFD;AAGD,GAJM,CAAP;AAKD;;AACD,OAAO,IAAMC,QAAQ,GAAG,CAACT,WAAD;AAAA;;AAAA,yEACpB,iBAAOU,UAAP,EAAmBC,IAAnB,EAAyBC,MAAzB,EAAiCC,OAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACQC,YAAAA,MADR,GACiBhB,SAAS,EAD1B;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GADoB;AAAA,YAEHA,SAFG;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,uEAIpB,kBAAOY,UAAP,EAAmBC,IAAnB,EAAyBC,MAAzB,EAAiCC,OAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AACQE,YAAAA,EADR,GACanB,MAAM,EADnB;AAEEoB,YAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ;AACAD,YAAAA,OAAO,CAACC,GAAR,CAAYlB,QAAZ;;AACA,gBAAI;AACFC,cAAAA,WAAW,CAACkB,IAAZ,CAAiB,sBAAjB,EAAyC;AACvCR,gBAAAA,UAAU,EAAVA,UADuC;AAEvCC,gBAAAA,IAAI,EAAJA,IAFuC;AAGvCC,gBAAAA,MAAM,EAANA,MAHuC;AAIvCC,gBAAAA,OAAO,EAAPA;AAJuC,eAAzC;AAMD,aAPD,CAOE,OAAOM,KAAP,EAAc,CAAE;;AAXpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAJoB;;AAAA;AAAA;AAAA;AAAA,GAAjB","sourcesContent":["import qs from 'query-string';\nimport unfetch from 'isomorphic-unfetch';\nimport { nanoid } from 'nanoid';\nimport axios from 'axios';\nimport { useRouter } from 'next/router';\n\n// var electron = require('electron');\nimport electron from 'electron';\nconst ipcRenderer = electron.ipcRenderer || false;\n\nfunction waitForEvent(emitter, channel) {\n  // https://www.derpturkey.com/event-emitter-to-promise/\n  return new Promise((resolve) => {\n    emitter.once(channel, (event, data) => {\n      resolve(data);\n    });\n  });\n}\nexport const openLink = !ipcRenderer\n  ? async (windowName, path, target, options) => {\n      const router = useRouter();\n    }\n  : async (windowName, path, target, options) => {\n      const id = nanoid();\n      console.log('electron');\n      console.log(electron);\n      try {\n        ipcRenderer.send('create-orders-window', {\n          windowName,\n          path,\n          target,\n          options,\n        });\n      } catch (error) {}\n    };\n"]},"metadata":{},"sourceType":"module"}