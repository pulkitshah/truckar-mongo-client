{"ast":null,"code":"import { API } from \"aws-amplify\";\nimport { organisationsByUser } from \"../graphql/queries\";\nimport { createOrganisation, updateOrganisation } from \"../graphql/mutations\";\nimport { Organisation } from \"../models\";\nimport { DataStore, Predicates } from \"@aws-amplify/datastore\";\nconst now = new Date();\n\nclass OrganisationApi {\n  async getOrganisationsByUser(user) {\n    const response = await DataStore.query(Organisation, c => c.user(\"eq\", user.id));\n    console.log(response);\n    const organisationesDB = await API.graphql({\n      query: organisationsByUser,\n      variables: {\n        user: user.id.toString()\n      }\n    });\n    console.log(organisationesDB);\n    return response;\n  }\n\n  async createOrganisation(newOrganisation) {\n    const response = await DataStore.save(new Organisation(newOrganisation));\n    const response2 = await API.graphql({\n      query: createOrganisation,\n      variables: {\n        input: newOrganisation\n      },\n      authMode: \"AMAZON_COGNITO_USER_POOLS\"\n    });\n    console.log(response2);\n    return response;\n  }\n\n  async editOrganisation(editedOrganisation) {\n    const response = await API.graphql({\n      query: updateOrganisation,\n      variables: {\n        input: editedOrganisation\n      },\n      authMode: \"AMAZON_COGNITO_USER_POOLS\"\n    });\n    return response;\n  }\n\n}\n\nexport const organisationApi = new OrganisationApi();","map":{"version":3,"sources":["/Users/pulkitshah/Desktop/truckarv2/renderer/api/organisation-api.js"],"names":["API","organisationsByUser","createOrganisation","updateOrganisation","Organisation","DataStore","Predicates","now","Date","OrganisationApi","getOrganisationsByUser","user","response","query","c","id","console","log","organisationesDB","graphql","variables","toString","newOrganisation","save","response2","input","authMode","editOrganisation","editedOrganisation","organisationApi"],"mappings":"AAAA,SAASA,GAAT,QAAoB,aAApB;AACA,SAASC,mBAAT,QAAoC,oBAApC;AACA,SAASC,kBAAT,EAA6BC,kBAA7B,QAAuD,sBAAvD;AACA,SAASC,YAAT,QAA6B,WAA7B;AACA,SAASC,SAAT,EAAoBC,UAApB,QAAsC,wBAAtC;AAEA,MAAMC,GAAG,GAAG,IAAIC,IAAJ,EAAZ;;AAEA,MAAMC,eAAN,CAAsB;AACpB,QAAMC,sBAAN,CAA6BC,IAA7B,EAAmC;AACjC,UAAMC,QAAQ,GAAG,MAAMP,SAAS,CAACQ,KAAV,CAAgBT,YAAhB,EAA+BU,CAAD,IACnDA,CAAC,CAACH,IAAF,CAAO,IAAP,EAAaA,IAAI,CAACI,EAAlB,CADqB,CAAvB;AAGAC,IAAAA,OAAO,CAACC,GAAR,CAAYL,QAAZ;AAEA,UAAMM,gBAAgB,GAAG,MAAMlB,GAAG,CAACmB,OAAJ,CAAY;AACzCN,MAAAA,KAAK,EAAEZ,mBADkC;AAEzCmB,MAAAA,SAAS,EAAE;AAAET,QAAAA,IAAI,EAAEA,IAAI,CAACI,EAAL,CAAQM,QAAR;AAAR;AAF8B,KAAZ,CAA/B;AAKAL,IAAAA,OAAO,CAACC,GAAR,CAAYC,gBAAZ;AAEA,WAAON,QAAP;AACD;;AAED,QAAMV,kBAAN,CAAyBoB,eAAzB,EAA0C;AACxC,UAAMV,QAAQ,GAAG,MAAMP,SAAS,CAACkB,IAAV,CAAe,IAAInB,YAAJ,CAAiBkB,eAAjB,CAAf,CAAvB;AACA,UAAME,SAAS,GAAG,MAAMxB,GAAG,CAACmB,OAAJ,CAAY;AAClCN,MAAAA,KAAK,EAAEX,kBAD2B;AAElCkB,MAAAA,SAAS,EAAE;AAAEK,QAAAA,KAAK,EAAEH;AAAT,OAFuB;AAGlCI,MAAAA,QAAQ,EAAE;AAHwB,KAAZ,CAAxB;AAKAV,IAAAA,OAAO,CAACC,GAAR,CAAYO,SAAZ;AACA,WAAOZ,QAAP;AACD;;AAED,QAAMe,gBAAN,CAAuBC,kBAAvB,EAA2C;AACzC,UAAMhB,QAAQ,GAAG,MAAMZ,GAAG,CAACmB,OAAJ,CAAY;AACjCN,MAAAA,KAAK,EAAEV,kBAD0B;AAEjCiB,MAAAA,SAAS,EAAE;AAAEK,QAAAA,KAAK,EAAEG;AAAT,OAFsB;AAGjCF,MAAAA,QAAQ,EAAE;AAHuB,KAAZ,CAAvB;AAKA,WAAOd,QAAP;AACD;;AAnCmB;;AAsCtB,OAAO,MAAMiB,eAAe,GAAG,IAAIpB,eAAJ,EAAxB","sourcesContent":["import { API } from \"aws-amplify\";\nimport { organisationsByUser } from \"../graphql/queries\";\nimport { createOrganisation, updateOrganisation } from \"../graphql/mutations\";\nimport { Organisation } from \"../models\";\nimport { DataStore, Predicates } from \"@aws-amplify/datastore\";\n\nconst now = new Date();\n\nclass OrganisationApi {\n  async getOrganisationsByUser(user) {\n    const response = await DataStore.query(Organisation, (c) =>\n      c.user(\"eq\", user.id)\n    );\n    console.log(response);\n\n    const organisationesDB = await API.graphql({\n      query: organisationsByUser,\n      variables: { user: user.id.toString() },\n    });\n\n    console.log(organisationesDB);\n\n    return response;\n  }\n\n  async createOrganisation(newOrganisation) {\n    const response = await DataStore.save(new Organisation(newOrganisation));\n    const response2 = await API.graphql({\n      query: createOrganisation,\n      variables: { input: newOrganisation },\n      authMode: \"AMAZON_COGNITO_USER_POOLS\",\n    });\n    console.log(response2);\n    return response;\n  }\n\n  async editOrganisation(editedOrganisation) {\n    const response = await API.graphql({\n      query: updateOrganisation,\n      variables: { input: editedOrganisation },\n      authMode: \"AMAZON_COGNITO_USER_POOLS\",\n    });\n    return response;\n  }\n}\n\nexport const organisationApi = new OrganisationApi();\n"]},"metadata":{},"sourceType":"module"}