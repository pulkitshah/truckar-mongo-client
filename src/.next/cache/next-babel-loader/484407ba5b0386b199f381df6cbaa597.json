{"ast":null,"code":"import _defineProperty from \"/Users/pulkitshah/Desktop/truckarv2/node_modules/next/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _regeneratorRuntime from \"/Users/pulkitshah/Desktop/truckarv2/node_modules/next/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/pulkitshah/Desktop/truckarv2/node_modules/next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"/Users/pulkitshah/Desktop/truckarv2/node_modules/next/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport { createElement as _createElement } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/pulkitshah/Desktop/truckarv2/renderer/components/dashboard/autocompletes/party-autocomplete/party-autocomplete.js\",\n    _this = this,\n    _s = $RefreshSig$();\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n/* eslint-disable no-use-before-define */\nimport React, { useState, useEffect } from \"react\";\nimport { Divider, TextField } from \"@mui/material\";\nimport { useDispatch, useSelector } from \"../../../../store\";\nimport Autocomplete, { createFilterOptions } from \"@mui/material/Autocomplete\";\nimport { partyApi } from \"../../../../api/party-api\";\nimport AddNewPartyFromAutocomplete from \"../party-autocomplete/party-addnew-autocomplete\";\n\nvar PartyAutocomplete = function PartyAutocomplete(_ref) {\n  _s();\n\n  var touched = _ref.touched,\n      errors = _ref.errors,\n      formik = _ref.formik,\n      handleBlur = _ref.handleBlur,\n      setFieldValue = _ref.setFieldValue,\n      type = _ref.type,\n      values = _ref.values,\n      user = _ref.user;\n  var dispatch = useDispatch();\n  var filter = createFilterOptions();\n\n  var _React$useState = React.useState(values && values[type]),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      value = _React$useState2[0],\n      setValue = _React$useState2[1];\n\n  var _React$useState3 = React.useState(false),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      open = _React$useState4[0],\n      toggleOpen = _React$useState4[1];\n\n  var _useState = useState(useSelector(function (state) {\n    return state.parties.parties;\n  })),\n      parties = _useState[0],\n      setParties = _useState[1];\n\n  var _React$useState5 = React.useState({\n    name: \"\",\n    transporter: type !== \"customer\" ? true : false\n  }),\n      _React$useState6 = _slicedToArray(_React$useState5, 2),\n      dialogValue = _React$useState6[0],\n      setDialogValue = _React$useState6[1];\n\n  useEffect( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    var partiesDB;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            _context.next = 3;\n            return partyApi.getPartiesByUser(user, dispatch);\n\n          case 3:\n            partiesDB = _context.sent;\n            setParties(partiesDB);\n            _context.next = 10;\n            break;\n\n          case 7:\n            _context.prev = 7;\n            _context.t0 = _context[\"catch\"](0);\n            console.log(_context.t0);\n\n          case 10:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[0, 7]]);\n  })), []);\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Autocomplete, {\n      value: value,\n      filterOptions: function filterOptions(options, params) {\n        var filtered = filter(options, params);\n\n        if (params.inputValue !== \"\") {\n          filtered.push({\n            inputValue: params.inputValue,\n            name: \"Add \\\"\".concat(params.inputValue, \"\\\"\")\n          });\n        }\n\n        return filtered;\n      },\n      onChange: function onChange(event, newValue) {\n        if (typeof newValue === \"string\") {\n          toggleOpen(true);\n          setDialogValue({\n            name: newValue.replace(/\\w\\S*/g, function (txt) {\n              return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();\n            }),\n            transporter: type !== \"customer\" ? true : false\n          });\n        } else if (newValue && newValue.inputValue) {\n          toggleOpen(true);\n          setDialogValue({\n            name: newValue.inputValue,\n            transporter: type !== \"customer\" ? true : false\n          });\n        } else {\n          setFieldValue(type, newValue);\n          setValue(newValue);\n        }\n      },\n      id: type,\n      options: parties,\n      getOptionLabel: function getOptionLabel(option) {\n        // e.g value selected with enter, right from the input\n        if (typeof option === \"string\") {\n          return option.replace(/\\w\\S*/g, function (txt) {\n            return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();\n          });\n        }\n\n        if (option.inputValue) {\n          return option.inputValue.replace(/\\w\\S*/g, function (txt) {\n            return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();\n          });\n        }\n\n        return option.name.replace(/\\w\\S*/g, function (txt) {\n          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();\n        });\n      },\n      clearOnBlur: true,\n      handleHomeEndKeys: true,\n      renderOption: function renderOption(props, option) {\n        return /*#__PURE__*/_jsxDEV(React.Fragment, {\n          children: /*#__PURE__*/_createElement(\"li\", _objectSpread(_objectSpread({}, props), {}, {\n            key: option.id,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 100,\n              columnNumber: 15\n            },\n            __self: _this\n          }), option.name && option.name.replace(/\\w\\S*/g, function (txt) {\n            return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();\n          }), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 107,\n            columnNumber: 17\n          }, _this), option.mobile && \"(M) \".concat(option.mobile.replace(/ /g, \"\")), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 109,\n            columnNumber: 17\n          }, _this), option.city && \"City - \".concat(JSON.parse(option.city).structured_formatting.main_text), /*#__PURE__*/_jsxDEV(Divider, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 114,\n            columnNumber: 17\n          }, _this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 13\n        }, _this);\n      },\n      fullWidth: true,\n      freeSolo: true,\n      renderInput: function renderInput(params) {\n        return /*#__PURE__*/_jsxDEV(TextField, _objectSpread(_objectSpread({\n          onKeyPress: function onKeyPress(e) {\n            e.which === 13 && e.preventDefault();\n          }\n        }, params), {}, {\n          label: type.charAt(0).toUpperCase() + type.slice(1),\n          error: Boolean(type === \"customer\" ? touched.customer && errors.customer : touched.transporter && errors.transporter),\n          onBlur: handleBlur,\n          helperText: type === \"customer\" ? touched.customer && errors.customer : touched.transporter && errors.transporter,\n          variant: \"outlined\"\n        }), void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 11\n        }, _this);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, _this), /*#__PURE__*/_jsxDEV(AddNewPartyFromAutocomplete, {\n      open: open,\n      toggleOpen: toggleOpen,\n      dialogValue: dialogValue,\n      setDialogValue: setDialogValue,\n      setFieldValue: formik.setFieldValue,\n      type: type,\n      user: user\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 7\n    }, _this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 5\n  }, _this);\n};\n\n_s(PartyAutocomplete, \"FxS1YyFy1nP9df6l4/UiL8Bbj+g=\", false, function () {\n  return [useDispatch, useSelector];\n});\n\n_c = PartyAutocomplete;\nexport default PartyAutocomplete;\n\nvar _c;\n\n$RefreshReg$(_c, \"PartyAutocomplete\");","map":{"version":3,"sources":["/Users/pulkitshah/Desktop/truckarv2/renderer/components/dashboard/autocompletes/party-autocomplete/party-autocomplete.js"],"names":["React","useState","useEffect","Divider","TextField","useDispatch","useSelector","Autocomplete","createFilterOptions","partyApi","AddNewPartyFromAutocomplete","PartyAutocomplete","touched","errors","formik","handleBlur","setFieldValue","type","values","user","dispatch","filter","value","setValue","open","toggleOpen","state","parties","setParties","name","transporter","dialogValue","setDialogValue","getPartiesByUser","partiesDB","console","log","options","params","filtered","inputValue","push","event","newValue","replace","txt","charAt","toUpperCase","substr","toLowerCase","option","props","id","mobile","city","JSON","parse","structured_formatting","main_text","e","which","preventDefault","slice","Boolean","customer"],"mappings":";;;;;;;;;;;;;;;AAAA;AACA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,OAAT,EAAkBC,SAAlB,QAAmC,eAAnC;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,mBAAzC;AACA,OAAOC,YAAP,IAAuBC,mBAAvB,QAAkD,4BAAlD;AACA,SAASC,QAAT,QAAyB,2BAAzB;AACA,OAAOC,2BAAP,MAAwC,iDAAxC;;AAEA,IAAMC,iBAAiB,GAAG,SAApBA,iBAAoB,OASpB;AAAA;;AAAA,MARJC,OAQI,QARJA,OAQI;AAAA,MAPJC,MAOI,QAPJA,MAOI;AAAA,MANJC,MAMI,QANJA,MAMI;AAAA,MALJC,UAKI,QALJA,UAKI;AAAA,MAJJC,aAII,QAJJA,aAII;AAAA,MAHJC,IAGI,QAHJA,IAGI;AAAA,MAFJC,MAEI,QAFJA,MAEI;AAAA,MADJC,IACI,QADJA,IACI;AACJ,MAAMC,QAAQ,GAAGf,WAAW,EAA5B;AACA,MAAMgB,MAAM,GAAGb,mBAAmB,EAAlC;;AAFI,wBAGsBR,KAAK,CAACC,QAAN,CAAeiB,MAAM,IAAIA,MAAM,CAACD,IAAD,CAA/B,CAHtB;AAAA;AAAA,MAGGK,KAHH;AAAA,MAGUC,QAHV;;AAAA,yBAIuBvB,KAAK,CAACC,QAAN,CAAe,KAAf,CAJvB;AAAA;AAAA,MAIGuB,IAJH;AAAA,MAISC,UAJT;;AAAA,kBAK0BxB,QAAQ,CACpCK,WAAW,CAAC,UAACoB,KAAD;AAAA,WAAWA,KAAK,CAACC,OAAN,CAAcA,OAAzB;AAAA,GAAD,CADyB,CALlC;AAAA,MAKGA,OALH;AAAA,MAKYC,UALZ;;AAAA,yBAQkC5B,KAAK,CAACC,QAAN,CAAe;AACnD4B,IAAAA,IAAI,EAAE,EAD6C;AAEnDC,IAAAA,WAAW,EAAEb,IAAI,KAAK,UAAT,GAAsB,IAAtB,GAA6B;AAFS,GAAf,CARlC;AAAA;AAAA,MAQGc,WARH;AAAA,MAQgBC,cARhB;;AAaJ9B,EAAAA,SAAS,wEAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAEkBO,QAAQ,CAACwB,gBAAT,CAA0Bd,IAA1B,EAAgCC,QAAhC,CAFlB;;AAAA;AAEAc,YAAAA,SAFA;AAGNN,YAAAA,UAAU,CAACM,SAAD,CAAV;AAHM;AAAA;;AAAA;AAAA;AAAA;AAKNC,YAAAA,OAAO,CAACC,GAAR;;AALM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAD,IAON,EAPM,CAAT;AASA,sBACE,QAAC,KAAD,CAAO,QAAP;AAAA,4BACE,QAAC,YAAD;AACE,MAAA,KAAK,EAAEd,KADT;AAEE,MAAA,aAAa,EAAE,uBAACe,OAAD,EAAUC,MAAV,EAAqB;AAClC,YAAMC,QAAQ,GAAGlB,MAAM,CAACgB,OAAD,EAAUC,MAAV,CAAvB;;AAEA,YAAIA,MAAM,CAACE,UAAP,KAAsB,EAA1B,EAA8B;AAC5BD,UAAAA,QAAQ,CAACE,IAAT,CAAc;AACZD,YAAAA,UAAU,EAAEF,MAAM,CAACE,UADP;AAEZX,YAAAA,IAAI,kBAAUS,MAAM,CAACE,UAAjB;AAFQ,WAAd;AAID;;AACD,eAAOD,QAAP;AACD,OAZH;AAaE,MAAA,QAAQ,EAAE,kBAACG,KAAD,EAAQC,QAAR,EAAqB;AAC7B,YAAI,OAAOA,QAAP,KAAoB,QAAxB,EAAkC;AAChClB,UAAAA,UAAU,CAAC,IAAD,CAAV;AACAO,UAAAA,cAAc,CAAC;AACbH,YAAAA,IAAI,EAAEc,QAAQ,CAACC,OAAT,CAAiB,QAAjB,EAA2B,UAAUC,GAAV,EAAe;AAC9C,qBACEA,GAAG,CAACC,MAAJ,CAAW,CAAX,EAAcC,WAAd,KAA8BF,GAAG,CAACG,MAAJ,CAAW,CAAX,EAAcC,WAAd,EADhC;AAGD,aAJK,CADO;AAMbnB,YAAAA,WAAW,EAAEb,IAAI,KAAK,UAAT,GAAsB,IAAtB,GAA6B;AAN7B,WAAD,CAAd;AAQD,SAVD,MAUO,IAAI0B,QAAQ,IAAIA,QAAQ,CAACH,UAAzB,EAAqC;AAC1Cf,UAAAA,UAAU,CAAC,IAAD,CAAV;AACAO,UAAAA,cAAc,CAAC;AACbH,YAAAA,IAAI,EAAEc,QAAQ,CAACH,UADF;AAEbV,YAAAA,WAAW,EAAEb,IAAI,KAAK,UAAT,GAAsB,IAAtB,GAA6B;AAF7B,WAAD,CAAd;AAID,SANM,MAMA;AACLD,UAAAA,aAAa,CAACC,IAAD,EAAO0B,QAAP,CAAb;AACApB,UAAAA,QAAQ,CAACoB,QAAD,CAAR;AACD;AACF,OAlCH;AAmCE,MAAA,EAAE,EAAE1B,IAnCN;AAoCE,MAAA,OAAO,EAAEU,OApCX;AAqCE,MAAA,cAAc,EAAE,wBAACuB,MAAD,EAAY;AAC1B;AACA,YAAI,OAAOA,MAAP,KAAkB,QAAtB,EAAgC;AAC9B,iBAAOA,MAAM,CAACN,OAAP,CAAe,QAAf,EAAyB,UAAUC,GAAV,EAAe;AAC7C,mBAAOA,GAAG,CAACC,MAAJ,CAAW,CAAX,EAAcC,WAAd,KAA8BF,GAAG,CAACG,MAAJ,CAAW,CAAX,EAAcC,WAAd,EAArC;AACD,WAFM,CAAP;AAGD;;AACD,YAAIC,MAAM,CAACV,UAAX,EAAuB;AACrB,iBAAOU,MAAM,CAACV,UAAP,CAAkBI,OAAlB,CAA0B,QAA1B,EAAoC,UAAUC,GAAV,EAAe;AACxD,mBAAOA,GAAG,CAACC,MAAJ,CAAW,CAAX,EAAcC,WAAd,KAA8BF,GAAG,CAACG,MAAJ,CAAW,CAAX,EAAcC,WAAd,EAArC;AACD,WAFM,CAAP;AAGD;;AACD,eAAOC,MAAM,CAACrB,IAAP,CAAYe,OAAZ,CAAoB,QAApB,EAA8B,UAAUC,GAAV,EAAe;AAClD,iBAAOA,GAAG,CAACC,MAAJ,CAAW,CAAX,EAAcC,WAAd,KAA8BF,GAAG,CAACG,MAAJ,CAAW,CAAX,EAAcC,WAAd,EAArC;AACD,SAFM,CAAP;AAGD,OApDH;AAqDE,MAAA,WAAW,MArDb;AAsDE,MAAA,iBAAiB,MAtDnB;AAuDE,MAAA,YAAY,EAAE,sBAACE,KAAD,EAAQD,MAAR,EAAmB;AAC/B,4BACE,QAAC,KAAD,CAAO,QAAP;AAAA,iCACE,qDAAQC,KAAR;AAAe,YAAA,GAAG,EAAED,MAAM,CAACE,EAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cACGF,MAAM,CAACrB,IAAP,IACCqB,MAAM,CAACrB,IAAP,CAAYe,OAAZ,CAAoB,QAApB,EAA8B,UAAUC,GAAV,EAAe;AAC3C,mBACEA,GAAG,CAACC,MAAJ,CAAW,CAAX,EAAcC,WAAd,KAA8BF,GAAG,CAACG,MAAJ,CAAW,CAAX,EAAcC,WAAd,EADhC;AAGD,WAJD,CAFJ,eAOE;AAAA;AAAA;AAAA;AAAA,mBAPF,EAQGC,MAAM,CAACG,MAAP,kBAAwBH,MAAM,CAACG,MAAP,CAAcT,OAAd,CAAsB,IAAtB,EAA4B,EAA5B,CAAxB,CARH,eASE;AAAA;AAAA;AAAA;AAAA,mBATF,EAUGM,MAAM,CAACI,IAAP,qBAEGC,IAAI,CAACC,KAAL,CAAWN,MAAM,CAACI,IAAlB,EAAwBG,qBAAxB,CAA8CC,SAFjD,CAVH,eAcE,QAAC,OAAD;AAAA;AAAA;AAAA;AAAA,mBAdF;AADF;AAAA;AAAA;AAAA;AAAA,iBADF;AAoBD,OA5EH;AA6EE,MAAA,SAAS,MA7EX;AA8EE,MAAA,QAAQ,MA9EV;AA+EE,MAAA,WAAW,EAAE,qBAACpB,MAAD;AAAA,4BACX,QAAC,SAAD;AACE,UAAA,UAAU,EAAE,oBAACqB,CAAD,EAAO;AACjBA,YAAAA,CAAC,CAACC,KAAF,KAAY,EAAZ,IAAkBD,CAAC,CAACE,cAAF,EAAlB;AACD;AAHH,WAIMvB,MAJN;AAKE,UAAA,KAAK,EAAErB,IAAI,CAAC6B,MAAL,CAAY,CAAZ,EAAeC,WAAf,KAA+B9B,IAAI,CAAC6C,KAAL,CAAW,CAAX,CALxC;AAME,UAAA,KAAK,EAAEC,OAAO,CACZ9C,IAAI,KAAK,UAAT,GACIL,OAAO,CAACoD,QAAR,IAAoBnD,MAAM,CAACmD,QAD/B,GAEIpD,OAAO,CAACkB,WAAR,IAAuBjB,MAAM,CAACiB,WAHtB,CANhB;AAWE,UAAA,MAAM,EAAEf,UAXV;AAYE,UAAA,UAAU,EACRE,IAAI,KAAK,UAAT,GACIL,OAAO,CAACoD,QAAR,IAAoBnD,MAAM,CAACmD,QAD/B,GAEIpD,OAAO,CAACkB,WAAR,IAAuBjB,MAAM,CAACiB,WAftC;AAiBE,UAAA,OAAO,EAAC;AAjBV;AAAA;AAAA;AAAA;AAAA,iBADW;AAAA;AA/Ef;AAAA;AAAA;AAAA;AAAA,aADF,eAuGE,QAAC,2BAAD;AACE,MAAA,IAAI,EAAEN,IADR;AAEE,MAAA,UAAU,EAAEC,UAFd;AAGE,MAAA,WAAW,EAAEM,WAHf;AAIE,MAAA,cAAc,EAAEC,cAJlB;AAKE,MAAA,aAAa,EAAElB,MAAM,CAACE,aALxB;AAME,MAAA,IAAI,EAAEC,IANR;AAOE,MAAA,IAAI,EAAEE;AAPR;AAAA;AAAA;AAAA;AAAA,aAvGF;AAAA;AAAA;AAAA;AAAA;AAAA,WADF;AAmHD,CAlJD;;GAAMR,iB;UAUaN,W,EAKfC,W;;;KAfEK,iB;AAmJN,eAAeA,iBAAf","sourcesContent":["/* eslint-disable no-use-before-define */\nimport React, { useState, useEffect } from \"react\";\nimport { Divider, TextField } from \"@mui/material\";\nimport { useDispatch, useSelector } from \"../../../../store\";\nimport Autocomplete, { createFilterOptions } from \"@mui/material/Autocomplete\";\nimport { partyApi } from \"../../../../api/party-api\";\nimport AddNewPartyFromAutocomplete from \"../party-autocomplete/party-addnew-autocomplete\";\n\nconst PartyAutocomplete = ({\n  touched,\n  errors,\n  formik,\n  handleBlur,\n  setFieldValue,\n  type,\n  values,\n  user,\n}) => {\n  const dispatch = useDispatch();\n  const filter = createFilterOptions();\n  const [value, setValue] = React.useState(values && values[type]);\n  const [open, toggleOpen] = React.useState(false);\n  const [parties, setParties] = useState(\n    useSelector((state) => state.parties.parties)\n  );\n  const [dialogValue, setDialogValue] = React.useState({\n    name: \"\",\n    transporter: type !== \"customer\" ? true : false,\n  });\n\n  useEffect(async () => {\n    try {\n      const partiesDB = await partyApi.getPartiesByUser(user, dispatch);\n      setParties(partiesDB);\n    } catch (error) {\n      console.log(error);\n    }\n  }, []);\n\n  return (\n    <React.Fragment>\n      <Autocomplete\n        value={value}\n        filterOptions={(options, params) => {\n          const filtered = filter(options, params);\n\n          if (params.inputValue !== \"\") {\n            filtered.push({\n              inputValue: params.inputValue,\n              name: `Add \"${params.inputValue}\"`,\n            });\n          }\n          return filtered;\n        }}\n        onChange={(event, newValue) => {\n          if (typeof newValue === \"string\") {\n            toggleOpen(true);\n            setDialogValue({\n              name: newValue.replace(/\\w\\S*/g, function (txt) {\n                return (\n                  txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase()\n                );\n              }),\n              transporter: type !== \"customer\" ? true : false,\n            });\n          } else if (newValue && newValue.inputValue) {\n            toggleOpen(true);\n            setDialogValue({\n              name: newValue.inputValue,\n              transporter: type !== \"customer\" ? true : false,\n            });\n          } else {\n            setFieldValue(type, newValue);\n            setValue(newValue);\n          }\n        }}\n        id={type}\n        options={parties}\n        getOptionLabel={(option) => {\n          // e.g value selected with enter, right from the input\n          if (typeof option === \"string\") {\n            return option.replace(/\\w\\S*/g, function (txt) {\n              return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();\n            });\n          }\n          if (option.inputValue) {\n            return option.inputValue.replace(/\\w\\S*/g, function (txt) {\n              return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();\n            });\n          }\n          return option.name.replace(/\\w\\S*/g, function (txt) {\n            return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();\n          });\n        }}\n        clearOnBlur\n        handleHomeEndKeys\n        renderOption={(props, option) => {\n          return (\n            <React.Fragment>\n              <li {...props} key={option.id}>\n                {option.name &&\n                  option.name.replace(/\\w\\S*/g, function (txt) {\n                    return (\n                      txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase()\n                    );\n                  })}\n                <br />\n                {option.mobile && `(M) ${option.mobile.replace(/ /g, \"\")}`}\n                <br />\n                {option.city &&\n                  `City - ${\n                    JSON.parse(option.city).structured_formatting.main_text\n                  }`}\n                <Divider />\n              </li>\n            </React.Fragment>\n          );\n        }}\n        fullWidth\n        freeSolo\n        renderInput={(params) => (\n          <TextField\n            onKeyPress={(e) => {\n              e.which === 13 && e.preventDefault();\n            }}\n            {...params}\n            label={type.charAt(0).toUpperCase() + type.slice(1)}\n            error={Boolean(\n              type === \"customer\"\n                ? touched.customer && errors.customer\n                : touched.transporter && errors.transporter\n            )}\n            onBlur={handleBlur}\n            helperText={\n              type === \"customer\"\n                ? touched.customer && errors.customer\n                : touched.transporter && errors.transporter\n            }\n            variant=\"outlined\"\n          />\n        )}\n      />\n\n      <AddNewPartyFromAutocomplete\n        open={open}\n        toggleOpen={toggleOpen}\n        dialogValue={dialogValue}\n        setDialogValue={setDialogValue}\n        setFieldValue={formik.setFieldValue}\n        type={type}\n        user={user}\n      />\n    </React.Fragment>\n  );\n};\nexport default PartyAutocomplete;\n"]},"metadata":{},"sourceType":"module"}