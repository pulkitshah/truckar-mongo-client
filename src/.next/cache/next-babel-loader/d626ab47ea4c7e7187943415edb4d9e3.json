{"ast":null,"code":"import qs from 'query-string';\nimport unfetch from 'isomorphic-unfetch';\nimport { nanoid } from 'nanoid';\nimport axios from 'axios';\nimport { useRouter } from 'next/router'; // var electron = require('electron');\n\nimport electron from 'electron';\nconst ipcRenderer = electron.ipcRenderer || false;\n\nfunction waitForEvent(emitter, channel) {\n  // https://www.derpturkey.com/event-emitter-to-promise/\n  return new Promise(resolve => {\n    emitter.once(channel, (event, data) => {\n      resolve(data);\n    });\n  });\n}\n\nexport const openLink = !ipcRenderer ? async (windowName, path, target, options) => {\n  const router = useRouter();\n} : async (windowName, path, target, options) => {\n  const id = nanoid();\n  console.log('electron');\n  console.log(electron);\n\n  try {\n    ipcRenderer.send('create-orders-window', {\n      windowName,\n      path,\n      target,\n      options\n    });\n  } catch (error) {}\n};","map":{"version":3,"sources":["/Users/pulkitshah/Desktop/truckarv2/renderer/helper/openLink.js"],"names":["qs","unfetch","nanoid","axios","useRouter","electron","ipcRenderer","waitForEvent","emitter","channel","Promise","resolve","once","event","data","openLink","windowName","path","target","options","router","id","console","log","send","error"],"mappings":"AAAA,OAAOA,EAAP,MAAe,cAAf;AACA,OAAOC,OAAP,MAAoB,oBAApB;AACA,SAASC,MAAT,QAAuB,QAAvB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,SAAT,QAA0B,aAA1B,C,CAEA;;AACA,OAAOC,QAAP,MAAqB,UAArB;AACA,MAAMC,WAAW,GAAGD,QAAQ,CAACC,WAAT,IAAwB,KAA5C;;AAEA,SAASC,YAAT,CAAsBC,OAAtB,EAA+BC,OAA/B,EAAwC;AACtC;AACA,SAAO,IAAIC,OAAJ,CAAaC,OAAD,IAAa;AAC9BH,IAAAA,OAAO,CAACI,IAAR,CAAaH,OAAb,EAAsB,CAACI,KAAD,EAAQC,IAAR,KAAiB;AACrCH,MAAAA,OAAO,CAACG,IAAD,CAAP;AACD,KAFD;AAGD,GAJM,CAAP;AAKD;;AACD,OAAO,MAAMC,QAAQ,GAAG,CAACT,WAAD,GACpB,OAAOU,UAAP,EAAmBC,IAAnB,EAAyBC,MAAzB,EAAiCC,OAAjC,KAA6C;AAC3C,QAAMC,MAAM,GAAGhB,SAAS,EAAxB;AACD,CAHmB,GAIpB,OAAOY,UAAP,EAAmBC,IAAnB,EAAyBC,MAAzB,EAAiCC,OAAjC,KAA6C;AAC3C,QAAME,EAAE,GAAGnB,MAAM,EAAjB;AACAoB,EAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ;AACAD,EAAAA,OAAO,CAACC,GAAR,CAAYlB,QAAZ;;AACA,MAAI;AACFC,IAAAA,WAAW,CAACkB,IAAZ,CAAiB,sBAAjB,EAAyC;AACvCR,MAAAA,UADuC;AAEvCC,MAAAA,IAFuC;AAGvCC,MAAAA,MAHuC;AAIvCC,MAAAA;AAJuC,KAAzC;AAMD,GAPD,CAOE,OAAOM,KAAP,EAAc,CAAE;AACnB,CAhBE","sourcesContent":["import qs from 'query-string';\nimport unfetch from 'isomorphic-unfetch';\nimport { nanoid } from 'nanoid';\nimport axios from 'axios';\nimport { useRouter } from 'next/router';\n\n// var electron = require('electron');\nimport electron from 'electron';\nconst ipcRenderer = electron.ipcRenderer || false;\n\nfunction waitForEvent(emitter, channel) {\n  // https://www.derpturkey.com/event-emitter-to-promise/\n  return new Promise((resolve) => {\n    emitter.once(channel, (event, data) => {\n      resolve(data);\n    });\n  });\n}\nexport const openLink = !ipcRenderer\n  ? async (windowName, path, target, options) => {\n      const router = useRouter();\n    }\n  : async (windowName, path, target, options) => {\n      const id = nanoid();\n      console.log('electron');\n      console.log(electron);\n      try {\n        ipcRenderer.send('create-orders-window', {\n          windowName,\n          path,\n          target,\n          options,\n        });\n      } catch (error) {}\n    };\n"]},"metadata":{},"sourceType":"module"}