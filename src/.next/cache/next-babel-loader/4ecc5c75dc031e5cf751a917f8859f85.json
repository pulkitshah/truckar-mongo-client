{"ast":null,"code":"import _defineProperty from \"/Users/pulkitshah/Desktop/truckarv2/node_modules/next/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _toConsumableArray from \"/Users/pulkitshah/Desktop/truckarv2/node_modules/next/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"/Users/pulkitshah/Desktop/truckarv2/node_modules/next/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/pulkitshah/Desktop/truckarv2/renderer/components/dashboard/autocompletes/google-places-autocomplete.js\",\n    _s = $RefreshSig$();\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from \"react\";\nimport LocationOnIcon from \"@material-ui/icons/LocationOn\";\nimport { Grid, TextField, Typography } from \"@mui/material\";\nimport Autocomplete from \"@mui/material/Autocomplete\";\nimport parse from \"autosuggest-highlight/parse\";\nimport throttle from \"lodash/throttle\";\n\nfunction loadScript(src, position, id) {\n  if (!position) {\n    return;\n  }\n\n  var script = document.createElement(\"script\");\n  script.setAttribute(\"async\", \"\");\n  script.setAttribute(\"id\", id);\n  script.src = src;\n  position.appendChild(script);\n}\n\nvar autocompleteService = {\n  current: null\n};\nvar useStyles = makeStyles(function (theme) {\n  return {\n    icon: {\n      color: theme.palette.text.secondary,\n      marginRight: theme.spacing(2)\n    }\n  };\n});\nexport default function GoogleMaps(_ref) {\n  _s();\n\n  var _this = this;\n\n  var name = _ref.name,\n      touched = _ref.touched,\n      error = _ref.error,\n      index = _ref.index,\n      handleBlur = _ref.handleBlur,\n      setFieldValue = _ref.setFieldValue,\n      field = _ref.field,\n      values = _ref.values;\n  var classes = useStyles();\n\n  var _React$useState = React.useState(values[field] ? values[field] : null),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      value = _React$useState2[0],\n      setValue = _React$useState2[1];\n\n  var _React$useState3 = React.useState(\"\"),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      inputValue = _React$useState4[0],\n      setInputValue = _React$useState4[1];\n\n  var _React$useState5 = React.useState([]),\n      _React$useState6 = _slicedToArray(_React$useState5, 2),\n      options = _React$useState6[0],\n      setOptions = _React$useState6[1];\n\n  var loaded = React.useRef(false);\n\n  if (true && !loaded.current) {\n    if (!document.querySelector(\"#google-maps\")) {\n      loadScript(\"https://maps.googleapis.com/maps/api/js?key=AIzaSyDxGCC86EWkjtOccLqVDZKcw-yii2YHcmU&libraries=places\", document.querySelector(\"head\"), \"google-maps\");\n    }\n\n    loaded.current = true;\n  } // setValue()\n\n\n  var fetch = React.useMemo(function () {\n    return throttle(function (request, callback) {\n      autocompleteService.current.getPlacePredictions(request, callback);\n    }, 200);\n  }, []);\n  React.useEffect(function () {\n    var active = true;\n\n    if (!autocompleteService.current && window.google) {\n      autocompleteService.current = new window.google.maps.places.AutocompleteService();\n    }\n\n    if (!autocompleteService.current) {\n      return undefined;\n    }\n\n    if (inputValue === \"\") {\n      setOptions(value ? [value] : []);\n      return undefined;\n    }\n\n    fetch({\n      input: inputValue,\n      types: [\"(cities)\"],\n      componentRestrictions: {\n        country: \"in\"\n      },\n      fields: [\"address_components\", \"geometry\", \"icon\", \"name\"]\n    }, function (results) {\n      if (active) {\n        var newOptions = [];\n\n        if (value) {\n          newOptions = [value];\n        }\n\n        if (results) {\n          newOptions = [].concat(_toConsumableArray(newOptions), _toConsumableArray(results));\n        }\n\n        setOptions(newOptions);\n      }\n    });\n    return function () {\n      active = false;\n    };\n  }, [value, inputValue, fetch]);\n  return /*#__PURE__*/_jsxDEV(Autocomplete, {\n    required: true,\n    autoSelect: true,\n    blurOnSelect: true,\n    id: \"places[\".concat(index, \"]\"),\n    onBlur: handleBlur,\n    getOptionLabel: function getOptionLabel(option) {\n      return typeof option === \"string\" ? option : option.structured_formatting.main_text;\n    },\n    filterOptions: function filterOptions(x) {\n      return x;\n    },\n    options: options,\n    autoComplete: true,\n    includeInputInList: true,\n    filterSelectedOptions: true,\n    value: value,\n    onChange: function onChange(event, newValue) {\n      var geocoder = new window.google.maps.Geocoder();\n\n      if (newValue) {\n        geocoder.geocode({\n          placeId: newValue.place_id\n        }, function (results, status) {\n          if (status === window.google.maps.GeocoderStatus.OK) {\n            setFieldValue(\"\".concat(field, \".latitude\"), results[0].geometry.location.lat());\n            setFieldValue(\"\".concat(field, \".longitude\"), results[0].geometry.location.lng());\n            setFieldValue(\"\".concat(field, \".description\"), newValue.description);\n            setFieldValue(\"\".concat(field, \".structured_formatting\"), newValue.structured_formatting);\n            setFieldValue(\"\".concat(field, \".place_id\"), newValue.place_id);\n          } else {\n            alert(\"Can't find address: \" + status);\n          }\n        });\n      }\n\n      setOptions(newValue ? [newValue].concat(_toConsumableArray(options)) : options);\n      setValue(newValue);\n    },\n    onInputChange: function onInputChange(event, newInputValue) {\n      setInputValue(newInputValue);\n    },\n    renderInput: function renderInput(params) {\n      return /*#__PURE__*/_jsxDEV(TextField, _objectSpread(_objectSpread({}, params), {}, {\n        name: name,\n        label: \"City\",\n        variant: \"outlined\",\n        fullWidth: true,\n        helperText: touched && error ? error : \"\",\n        error: Boolean(touched && error)\n      }), void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 9\n      }, _this);\n    },\n    renderOption: function renderOption(option) {\n      var matches = option.structured_formatting.main_text_matched_substrings;\n      var parts = parse(option.structured_formatting.main_text, matches.map(function (match) {\n        return [match.offset, match.offset + match.length];\n      }));\n      return /*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        alignItems: \"center\",\n        children: [/*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          children: /*#__PURE__*/_jsxDEV(LocationOnIcon, {\n            className: classes.icon\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 188,\n            columnNumber: 15\n          }, _this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 187,\n          columnNumber: 13\n        }, _this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: true,\n          children: [parts.map(function (part, index) {\n            return /*#__PURE__*/_jsxDEV(\"span\", {\n              style: {\n                fontWeight: part.highlight ? 700 : 400\n              },\n              children: part.text\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 192,\n              columnNumber: 17\n            }, _this);\n          }), /*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"body2\",\n            color: \"textSecondary\",\n            children: option.structured_formatting.secondary_text\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 202,\n            columnNumber: 15\n          }, _this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 190,\n          columnNumber: 13\n        }, _this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 11\n      }, _this);\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 115,\n    columnNumber: 5\n  }, this);\n}\n\n_s(GoogleMaps, \"sBDNBpLRpJS6a8DbWSo6/h6QALI=\", false, function () {\n  return [useStyles];\n});\n\n_c = GoogleMaps;\n\nvar _c;\n\n$RefreshReg$(_c, \"GoogleMaps\");","map":{"version":3,"sources":["/Users/pulkitshah/Desktop/truckarv2/renderer/components/dashboard/autocompletes/google-places-autocomplete.js"],"names":["React","LocationOnIcon","Grid","TextField","Typography","Autocomplete","parse","throttle","loadScript","src","position","id","script","document","createElement","setAttribute","appendChild","autocompleteService","current","useStyles","makeStyles","theme","icon","color","palette","text","secondary","marginRight","spacing","GoogleMaps","name","touched","error","index","handleBlur","setFieldValue","field","values","classes","useState","value","setValue","inputValue","setInputValue","options","setOptions","loaded","useRef","querySelector","fetch","useMemo","request","callback","getPlacePredictions","useEffect","active","window","google","maps","places","AutocompleteService","undefined","input","types","componentRestrictions","country","fields","results","newOptions","option","structured_formatting","main_text","x","event","newValue","geocoder","Geocoder","geocode","placeId","place_id","status","GeocoderStatus","OK","geometry","location","lat","lng","description","alert","newInputValue","params","Boolean","matches","main_text_matched_substrings","parts","map","match","offset","length","part","fontWeight","highlight","secondary_text"],"mappings":"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","sourcesContent":["import React from \"react\";\n\nimport LocationOnIcon from \"@material-ui/icons/LocationOn\";\n\nimport { Grid, TextField, Typography } from \"@mui/material\";\nimport Autocomplete from \"@mui/material/Autocomplete\";\nimport parse from \"autosuggest-highlight/parse\";\nimport throttle from \"lodash/throttle\";\n\nfunction loadScript(src, position, id) {\n  if (!position) {\n    return;\n  }\n\n  const script = document.createElement(\"script\");\n  script.setAttribute(\"async\", \"\");\n  script.setAttribute(\"id\", id);\n  script.src = src;\n  position.appendChild(script);\n}\n\nconst autocompleteService = { current: null };\n\nconst useStyles = makeStyles((theme) => ({\n  icon: {\n    color: theme.palette.text.secondary,\n    marginRight: theme.spacing(2),\n  },\n}));\n\nexport default function GoogleMaps({\n  name,\n  touched,\n  error,\n  index,\n  handleBlur,\n  setFieldValue,\n  field,\n  values,\n}) {\n  const classes = useStyles();\n  const [value, setValue] = React.useState(\n    values[field] ? values[field] : null\n  );\n  const [inputValue, setInputValue] = React.useState(\"\");\n  const [options, setOptions] = React.useState([]);\n  const loaded = React.useRef(false);\n\n  if (typeof window !== \"undefined\" && !loaded.current) {\n    if (!document.querySelector(\"#google-maps\")) {\n      loadScript(\n        \"https://maps.googleapis.com/maps/api/js?key=AIzaSyDxGCC86EWkjtOccLqVDZKcw-yii2YHcmU&libraries=places\",\n        document.querySelector(\"head\"),\n        \"google-maps\"\n      );\n    }\n\n    loaded.current = true;\n  }\n  // setValue()\n\n  const fetch = React.useMemo(\n    () =>\n      throttle((request, callback) => {\n        autocompleteService.current.getPlacePredictions(request, callback);\n      }, 200),\n    []\n  );\n\n  React.useEffect(() => {\n    let active = true;\n\n    if (!autocompleteService.current && window.google) {\n      autocompleteService.current =\n        new window.google.maps.places.AutocompleteService();\n    }\n    if (!autocompleteService.current) {\n      return undefined;\n    }\n\n    if (inputValue === \"\") {\n      setOptions(value ? [value] : []);\n      return undefined;\n    }\n\n    fetch(\n      {\n        input: inputValue,\n        types: [\"(cities)\"],\n        componentRestrictions: { country: \"in\" },\n        fields: [\"address_components\", \"geometry\", \"icon\", \"name\"],\n      },\n      (results) => {\n        if (active) {\n          let newOptions = [];\n\n          if (value) {\n            newOptions = [value];\n          }\n\n          if (results) {\n            newOptions = [...newOptions, ...results];\n          }\n          setOptions(newOptions);\n        }\n      }\n    );\n\n    return () => {\n      active = false;\n    };\n  }, [value, inputValue, fetch]);\n\n  return (\n    <Autocomplete\n      required\n      autoSelect={true}\n      blurOnSelect={true}\n      id={`places[${index}]`}\n      onBlur={handleBlur}\n      getOptionLabel={(option) =>\n        typeof option === \"string\"\n          ? option\n          : option.structured_formatting.main_text\n      }\n      filterOptions={(x) => x}\n      options={options}\n      autoComplete\n      includeInputInList\n      filterSelectedOptions\n      value={value}\n      onChange={(event, newValue) => {\n        var geocoder = new window.google.maps.Geocoder();\n        if (newValue) {\n          geocoder.geocode(\n            { placeId: newValue.place_id },\n            function (results, status) {\n              if (status === window.google.maps.GeocoderStatus.OK) {\n                setFieldValue(\n                  `${field}.latitude`,\n                  results[0].geometry.location.lat()\n                );\n                setFieldValue(\n                  `${field}.longitude`,\n                  results[0].geometry.location.lng()\n                );\n                setFieldValue(`${field}.description`, newValue.description);\n                setFieldValue(\n                  `${field}.structured_formatting`,\n                  newValue.structured_formatting\n                );\n                setFieldValue(`${field}.place_id`, newValue.place_id);\n              } else {\n                alert(\"Can't find address: \" + status);\n              }\n            }\n          );\n        }\n\n        setOptions(newValue ? [newValue, ...options] : options);\n        setValue(newValue);\n      }}\n      onInputChange={(event, newInputValue) => {\n        setInputValue(newInputValue);\n      }}\n      renderInput={(params) => (\n        <TextField\n          {...params}\n          name={name}\n          label={\"City\"}\n          variant=\"outlined\"\n          fullWidth\n          helperText={touched && error ? error : \"\"}\n          error={Boolean(touched && error)}\n        />\n      )}\n      renderOption={(option) => {\n        const matches =\n          option.structured_formatting.main_text_matched_substrings;\n        const parts = parse(\n          option.structured_formatting.main_text,\n          matches.map((match) => [match.offset, match.offset + match.length])\n        );\n\n        return (\n          <Grid container alignItems=\"center\">\n            <Grid item>\n              <LocationOnIcon className={classes.icon} />\n            </Grid>\n            <Grid item xs>\n              {parts.map((part, index) => (\n                <span\n                  key={index}\n                  style={{\n                    fontWeight: part.highlight ? 700 : 400,\n                  }}\n                >\n                  {part.text}\n                </span>\n              ))}\n\n              <Typography variant=\"body2\" color=\"textSecondary\">\n                {option.structured_formatting.secondary_text}\n              </Typography>\n            </Grid>\n          </Grid>\n        );\n      }}\n    />\n  );\n}\n"]},"metadata":{},"sourceType":"module"}