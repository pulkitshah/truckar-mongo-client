{"ast":null,"code":"import { API } from \"aws-amplify\";\nimport { organisationsByUser } from \"../graphql/queries\";\nimport { createOrganisation, updateOrganisation } from \"../graphql/mutations\";\nimport { Organisation } from \"../models\";\nimport { DataStore, Predicates } from \"@aws-amplify/datastore\";\nimport moment from \"moment\";\nimport { slice } from \"../slices/organisations\";\nconst now = new Date();\n\nclass OrganisationApi {\n  async getOrganisationsByUser(user, dispatch) {\n    try {\n      //////////////////////// GraphQL API ////////////////////////\n      const response = await API.graphql({\n        query: organisationsByUser,\n        variables: {\n          user: user.id.toString()\n        }\n      });\n      const organisations = response.data.organisationsByUser.items; //////////////////////// GraphQL API ////////////////////////\n      //////////////////////// DataStore API ////////////////////////\n      // const organisations = await DataStore.query(Organisation, (c) =>\n      //   c.user(\"eq\", user.id)\n      // );\n      //////////////////////// DataStore API ////////////////////////\n      // console.log(organisationesDB);\n      // Dispatch - Reducer\n\n      dispatch(slice.actions.getOrganisations(organisations));\n      return organisations;\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  async createOrganisation(newOrganisation, dispatch) {\n    const createdAt = moment().toISOString();\n    let newOrg = newOrganisation;\n    newOrg.createdAt = createdAt; //////////////////////// GraphQL API ////////////////////////\n\n    const response = await API.graphql({\n      query: createOrganisation,\n      variables: {\n        input: newOrg\n      },\n      authMode: \"AMAZON_COGNITO_USER_POOLS\"\n    });\n    const organisation = response.data.createOrganisation; //////////////////////// GraphQL API ////////////////////////\n    //////////////////////// DataStore API ////////////////////////\n    // const organisation = await DataStore.save(new Organisation(newOrg));\n    //////////////////////// DataStore API ////////////////////////\n    // console.log(organisation);\n    // Dispatch - Reducer\n\n    dispatch(slice.actions.createOrganisation({\n      organisation\n    }));\n    return organisation;\n  }\n\n  async updateOrganisation(editedOrganisation, dispatch) {\n    //////////////////////// GraphQL API ////////////////////////\n    const response = await API.graphql({\n      query: updateOrganisation,\n      variables: {\n        input: editedOrganisation\n      },\n      authMode: \"AMAZON_COGNITO_USER_POOLS\"\n    });\n    const organisation = response.data.updateOrganisation; //////////////////////// GraphQL API ////////////////////////\n    // console.log(organisation);\n    // Dispatch - Reducer\n\n    dispatch(slice.actions.updateOrganisation({\n      organisation\n    }));\n    return response;\n  }\n\n  async validateDuplicateInitials(initials, user) {\n    const response = await API.graphql({\n      query: organisationsByUser,\n      variables: {\n        user: user.id.toString()\n      }\n    });\n    const organisations = response.data.organisationsByUser.items;\n    const organisation = organisations.find(organisation => {\n      return organisation.initials === initials;\n    });\n    return Boolean(!organisation);\n  }\n\n}\n\nexport const organisationApi = new OrganisationApi();","map":{"version":3,"sources":["/Users/pulkitshah/Desktop/truckarv2/renderer/api/organisation-api.js"],"names":["API","organisationsByUser","createOrganisation","updateOrganisation","Organisation","DataStore","Predicates","moment","slice","now","Date","OrganisationApi","getOrganisationsByUser","user","dispatch","response","graphql","query","variables","id","toString","organisations","data","items","actions","getOrganisations","error","console","log","newOrganisation","createdAt","toISOString","newOrg","input","authMode","organisation","editedOrganisation","validateDuplicateInitials","initials","find","Boolean","organisationApi"],"mappings":"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","sourcesContent":["import { API } from \"aws-amplify\";\nimport { organisationsByUser } from \"../graphql/queries\";\nimport { createOrganisation, updateOrganisation } from \"../graphql/mutations\";\nimport { Organisation } from \"../models\";\nimport { DataStore, Predicates } from \"@aws-amplify/datastore\";\nimport moment from \"moment\";\nimport { slice } from \"../slices/organisations\";\n\nconst now = new Date();\n\nclass OrganisationApi {\n  async getOrganisationsByUser(user, dispatch) {\n    try {\n      //////////////////////// GraphQL API ////////////////////////\n\n      const response = await API.graphql({\n        query: organisationsByUser,\n        variables: { user: user.id.toString() },\n      });\n      const organisations = response.data.organisationsByUser.items;\n\n      //////////////////////// GraphQL API ////////////////////////\n\n      //////////////////////// DataStore API ////////////////////////\n\n      // const organisations = await DataStore.query(Organisation, (c) =>\n      //   c.user(\"eq\", user.id)\n      // );\n\n      //////////////////////// DataStore API ////////////////////////\n\n      // console.log(organisationesDB);\n\n      // Dispatch - Reducer\n\n      dispatch(slice.actions.getOrganisations(organisations));\n\n      return organisations;\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  async createOrganisation(newOrganisation, dispatch) {\n    const createdAt = moment().toISOString();\n    let newOrg = newOrganisation;\n    newOrg.createdAt = createdAt;\n\n    //////////////////////// GraphQL API ////////////////////////\n\n    const response = await API.graphql({\n      query: createOrganisation,\n      variables: { input: newOrg },\n      authMode: \"AMAZON_COGNITO_USER_POOLS\",\n    });\n\n    const organisation = response.data.createOrganisation;\n\n    //////////////////////// GraphQL API ////////////////////////\n\n    //////////////////////// DataStore API ////////////////////////\n\n    // const organisation = await DataStore.save(new Organisation(newOrg));\n\n    //////////////////////// DataStore API ////////////////////////\n\n    // console.log(organisation);\n\n    // Dispatch - Reducer\n\n    dispatch(slice.actions.createOrganisation({ organisation }));\n\n    return organisation;\n  }\n\n  async updateOrganisation(editedOrganisation, dispatch) {\n    //////////////////////// GraphQL API ////////////////////////\n\n    const response = await API.graphql({\n      query: updateOrganisation,\n      variables: { input: editedOrganisation },\n      authMode: \"AMAZON_COGNITO_USER_POOLS\",\n    });\n\n    const organisation = response.data.updateOrganisation;\n\n    //////////////////////// GraphQL API ////////////////////////\n\n    // console.log(organisation);\n\n    // Dispatch - Reducer\n\n    dispatch(slice.actions.updateOrganisation({ organisation }));\n\n    return response;\n  }\n\n  async validateDuplicateInitials(initials, user) {\n    const response = await API.graphql({\n      query: organisationsByUser,\n      variables: { user: user.id.toString() },\n    });\n    const organisations = response.data.organisationsByUser.items;\n    const organisation = organisations.find((organisation) => {\n      return organisation.initials === initials;\n    });\n    return Boolean(!organisation);\n  }\n}\n\nexport const organisationApi = new OrganisationApi();\n"]},"metadata":{},"sourceType":"module"}