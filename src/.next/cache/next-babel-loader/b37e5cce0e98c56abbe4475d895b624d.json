{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/pulkitshah/Desktop/truckarv2/renderer/components/dashboard/order/delivery-details-grid.js\";\nimport React from \"react\";\nimport { DataGrid } from \"@mui/x-data-grid\";\nimport { deliveryDetailsTable } from \"../../grids/grid-columns\";\n\nconst Table = ({\n  order,\n  deliveries\n}) => {\n  const getOrderUnit = order => {\n    switch (JSON.parse(order.saleType).value) {\n      case \"quantity\":\n        return `${JSON.parse(order.saleType).unit}`;\n        break;\n\n      case \"fixed\":\n        return `(Fixed)`;\n        break;\n\n      case \"time\":\n        return `${JSON.parse(order.saleType).unit}`;\n        break;\n\n      default:\n        break;\n    }\n  };\n\n  const processRowUpdate = React.useCallback(async newRow => {\n    // Make the HTTP request to save in the backend\n    let order = newRow.order;\n    delete newRow.order;\n    JSON.parse(order.deliveries).map(del => {\n      if (del.id !== newRow.id) {\n        return del;\n      } else {\n        console.log(del);\n        return newRow;\n      }\n    });\n    console.log(order.deliveries); // const response = await mutateRow(newRow);\n    // return response;\n  }, []);\n  deliveries.map(del => {\n    del.order = order;\n    del.unit = getOrderUnit(order);\n    return del;\n  });\n  return /*#__PURE__*/_jsxDEV(DataGrid, {\n    rows: deliveries,\n    autoHeight: true,\n    columns: deliveryDetailsTable,\n    disableSelectionOnClick: true,\n    experimentalFeatures: {\n      newEditingApi: true\n    },\n    processRowUpdate: processRowUpdate\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 5\n  }, this);\n};\n\nexport default Table;","map":{"version":3,"sources":["/Users/pulkitshah/Desktop/truckarv2/renderer/components/dashboard/order/delivery-details-grid.js"],"names":["React","DataGrid","deliveryDetailsTable","Table","order","deliveries","getOrderUnit","JSON","parse","saleType","value","unit","processRowUpdate","useCallback","newRow","map","del","id","console","log","newEditingApi"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,QAAyB,kBAAzB;AACA,SAASC,oBAAT,QAAqC,0BAArC;;AAEA,MAAMC,KAAK,GAAG,CAAC;AAAEC,EAAAA,KAAF;AAASC,EAAAA;AAAT,CAAD,KAA2B;AACvC,QAAMC,YAAY,GAAIF,KAAD,IAAW;AAC9B,YAAQG,IAAI,CAACC,KAAL,CAAWJ,KAAK,CAACK,QAAjB,EAA2BC,KAAnC;AACE,WAAK,UAAL;AACE,eAAQ,GAAEH,IAAI,CAACC,KAAL,CAAWJ,KAAK,CAACK,QAAjB,EAA2BE,IAAK,EAA1C;AACA;;AACF,WAAK,OAAL;AACE,eAAQ,SAAR;AACA;;AACF,WAAK,MAAL;AACE,eAAQ,GAAEJ,IAAI,CAACC,KAAL,CAAWJ,KAAK,CAACK,QAAjB,EAA2BE,IAAK,EAA1C;AACA;;AACF;AACE;AAXJ;AAaD,GAdD;;AAgBA,QAAMC,gBAAgB,GAAGZ,KAAK,CAACa,WAAN,CAAkB,MAAOC,MAAP,IAAkB;AAC3D;AACA,QAAIV,KAAK,GAAGU,MAAM,CAACV,KAAnB;AACA,WAAOU,MAAM,CAACV,KAAd;AAEAG,IAAAA,IAAI,CAACC,KAAL,CAAWJ,KAAK,CAACC,UAAjB,EAA6BU,GAA7B,CAAkCC,GAAD,IAAS;AACxC,UAAIA,GAAG,CAACC,EAAJ,KAAWH,MAAM,CAACG,EAAtB,EAA0B;AACxB,eAAOD,GAAP;AACD,OAFD,MAEO;AACLE,QAAAA,OAAO,CAACC,GAAR,CAAYH,GAAZ;AACA,eAAOF,MAAP;AACD;AACF,KAPD;AAQAI,IAAAA,OAAO,CAACC,GAAR,CAAYf,KAAK,CAACC,UAAlB,EAb2D,CAe3D;AACA;AACD,GAjBwB,EAiBtB,EAjBsB,CAAzB;AAmBAA,EAAAA,UAAU,CAACU,GAAX,CAAgBC,GAAD,IAAS;AACtBA,IAAAA,GAAG,CAACZ,KAAJ,GAAYA,KAAZ;AACAY,IAAAA,GAAG,CAACL,IAAJ,GAAWL,YAAY,CAACF,KAAD,CAAvB;AACA,WAAOY,GAAP;AACD,GAJD;AAKA,sBACE,QAAC,QAAD;AACE,IAAA,IAAI,EAAEX,UADR;AAEE,IAAA,UAAU,EAAE,IAFd;AAGE,IAAA,OAAO,EAAEH,oBAHX;AAIE,IAAA,uBAAuB,MAJzB;AAKE,IAAA,oBAAoB,EAAE;AAAEkB,MAAAA,aAAa,EAAE;AAAjB,KALxB;AAME,IAAA,gBAAgB,EAAER;AANpB;AAAA;AAAA;AAAA;AAAA,UADF;AAUD,CAnDD;;AAqDA,eAAeT,KAAf","sourcesContent":["import React from \"react\";\nimport { DataGrid } from \"@mui/x-data-grid\";\nimport { deliveryDetailsTable } from \"../../grids/grid-columns\";\n\nconst Table = ({ order, deliveries }) => {\n  const getOrderUnit = (order) => {\n    switch (JSON.parse(order.saleType).value) {\n      case \"quantity\":\n        return `${JSON.parse(order.saleType).unit}`;\n        break;\n      case \"fixed\":\n        return `(Fixed)`;\n        break;\n      case \"time\":\n        return `${JSON.parse(order.saleType).unit}`;\n        break;\n      default:\n        break;\n    }\n  };\n\n  const processRowUpdate = React.useCallback(async (newRow) => {\n    // Make the HTTP request to save in the backend\n    let order = newRow.order;\n    delete newRow.order;\n\n    JSON.parse(order.deliveries).map((del) => {\n      if (del.id !== newRow.id) {\n        return del;\n      } else {\n        console.log(del);\n        return newRow;\n      }\n    });\n    console.log(order.deliveries);\n\n    // const response = await mutateRow(newRow);\n    // return response;\n  }, []);\n\n  deliveries.map((del) => {\n    del.order = order;\n    del.unit = getOrderUnit(order);\n    return del;\n  });\n  return (\n    <DataGrid\n      rows={deliveries}\n      autoHeight={true}\n      columns={deliveryDetailsTable}\n      disableSelectionOnClick\n      experimentalFeatures={{ newEditingApi: true }}\n      processRowUpdate={processRowUpdate}\n    />\n  );\n};\n\nexport default Table;\n"]},"metadata":{},"sourceType":"module"}