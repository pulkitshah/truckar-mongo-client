{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/pulkitshah/Desktop/truckarv2/renderer/components/dashboard/welcome/branch-create-form.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport { forwardRef, useImperativeHandle, useRef } from \"react\";\nimport { useState } from \"react\";\nimport { useRouter } from \"next/router\";\nimport toast from \"react-hot-toast\";\nimport * as Yup from \"yup\";\nimport { useFormik } from \"formik\";\nimport { Box, Button, Card, CardContent, Divider, FormControlLabel, FormHelperText, Grid, MenuItem, Switch, TextField, Typography } from \"@mui/material\";\nimport { FileDropzone } from \"../../file-dropzone\";\nimport { QuillEditor } from \"../../quill-editor\";\nimport GoogleMaps from \"./google-places-autocomplete\";\nconst categoryOptions = [{\n  label: \"Healthcare\",\n  value: \"healthcare\"\n}, {\n  label: \"Makeup\",\n  value: \"makeup\"\n}, {\n  label: \"Dress\",\n  value: \"dress\"\n}, {\n  label: \"Skincare\",\n  value: \"skincare\"\n}, {\n  label: \"Jewelry\",\n  value: \"jewelry\"\n}, {\n  label: \"Blouse\",\n  value: \"blouse\"\n}];\nexport const BranchCreateForm = /*#__PURE__*/forwardRef((_ref, ref) => {\n  let {\n    handleNext\n  } = _ref,\n      props = _objectWithoutProperties(_ref, [\"handleNext\"]);\n\n  const router = useRouter();\n  const {\n    0: files,\n    1: setFiles\n  } = useState([]);\n  useImperativeHandle(ref, () => ({\n    handleFormSubmit() {\n      console.log(\"ad\");\n      formik.handleSubmit();\n    }\n\n  }));\n  const formik = useFormik({\n    initialValues: {\n      name: \"\",\n      branchName: \"\",\n      addressLine2: \"\",\n      city: \"\",\n      submit: null\n    },\n    validationSchema: Yup.object({\n      branchName: Yup.string().max(255).required(\"Please enter a branch name.\"),\n      // addressLine1: Yup.string()\n      //   .max(255)\n      //   .required(\"Address Line 1 is required\"),\n      city: Yup.object().required(\"Please select a city.\")\n    }),\n    onSubmit: async (values, helpers) => {\n      try {\n        console.log(values); // NOTE: Make API request\n\n        toast.success(\"Branch created!\");\n        setActiveStep(1); // props.handlenext();\n        // router.push(\"/dashboard/branches\");\n      } catch (err) {\n        console.error(err);\n        toast.error(\"Something went wrong!\");\n        helpers.setStatus({\n          success: false\n        });\n        helpers.setErrors({\n          submit: err.message\n        });\n        helpers.setSubmitting(false);\n      }\n    }\n  });\n\n  const handleDrop = newFiles => {\n    setFiles(prevFiles => [...prevFiles, ...newFiles]);\n  };\n\n  const handleRemove = file => {\n    setFiles(prevFiles => prevFiles.filter(_file => _file.path !== file.path));\n  };\n\n  const handleRemoveAll = () => {\n    setFiles([]);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"form\", _objectSpread(_objectSpread({\n    onSubmit: formik.handleSubmit\n  }, props), {}, {\n    children: /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      spacing: 5,\n      alignItems: \"center\",\n      sx: {\n        mb: 4,\n        mt: 2\n      },\n      children: [/*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        md: 4,\n        xs: 12,\n        children: /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h6\",\n          children: \"Tell us your city\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        md: 8,\n        xs: 12,\n        children: /*#__PURE__*/_jsxDEV(GoogleMaps, {\n          formik: formik,\n          error: Boolean(formik.touched.city && formik.errors.city),\n          label: \"Your city in India\",\n          field: \"city\",\n          setFieldValue: formik.setFieldValue,\n          handleBlur: formik.handleBlur,\n          values: formik.values\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12,\n        children: /*#__PURE__*/_jsxDEV(Divider, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        md: 4,\n        xs: 12,\n        children: /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h6\",\n          children: \"Please pick a name\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        md: 8,\n        xs: 12,\n        children: /*#__PURE__*/_jsxDEV(TextField, {\n          error: Boolean(formik.touched.branchName && formik.errors.branchName),\n          fullWidth: true,\n          helperText: formik.touched.branchName && formik.errors.branchName,\n          label: \"Your branch name\",\n          name: \"branchName\",\n          onBlur: formik.handleBlur,\n          onChange: formik.handleChange,\n          value: formik.values.branchName\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 7\n    }, this)\n  }), void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 110,\n    columnNumber: 5\n  }, this);\n});","map":{"version":3,"sources":["/Users/pulkitshah/Desktop/truckarv2/renderer/components/dashboard/welcome/branch-create-form.js"],"names":["forwardRef","useImperativeHandle","useRef","useState","useRouter","toast","Yup","useFormik","Box","Button","Card","CardContent","Divider","FormControlLabel","FormHelperText","Grid","MenuItem","Switch","TextField","Typography","FileDropzone","QuillEditor","GoogleMaps","categoryOptions","label","value","BranchCreateForm","ref","handleNext","props","router","files","setFiles","handleFormSubmit","console","log","formik","handleSubmit","initialValues","name","branchName","addressLine2","city","submit","validationSchema","object","string","max","required","onSubmit","values","helpers","success","setActiveStep","err","error","setStatus","setErrors","message","setSubmitting","handleDrop","newFiles","prevFiles","handleRemove","file","filter","_file","path","handleRemoveAll","mb","mt","Boolean","touched","errors","setFieldValue","handleBlur","handleChange"],"mappings":"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","sourcesContent":["import { forwardRef, useImperativeHandle, useRef } from \"react\";\nimport { useState } from \"react\";\nimport { useRouter } from \"next/router\";\nimport toast from \"react-hot-toast\";\nimport * as Yup from \"yup\";\nimport { useFormik } from \"formik\";\nimport {\n  Box,\n  Button,\n  Card,\n  CardContent,\n  Divider,\n  FormControlLabel,\n  FormHelperText,\n  Grid,\n  MenuItem,\n  Switch,\n  TextField,\n  Typography,\n} from \"@mui/material\";\nimport { FileDropzone } from \"../../file-dropzone\";\nimport { QuillEditor } from \"../../quill-editor\";\nimport GoogleMaps from \"./google-places-autocomplete\";\nconst categoryOptions = [\n  {\n    label: \"Healthcare\",\n    value: \"healthcare\",\n  },\n  {\n    label: \"Makeup\",\n    value: \"makeup\",\n  },\n  {\n    label: \"Dress\",\n    value: \"dress\",\n  },\n  {\n    label: \"Skincare\",\n    value: \"skincare\",\n  },\n  {\n    label: \"Jewelry\",\n    value: \"jewelry\",\n  },\n  {\n    label: \"Blouse\",\n    value: \"blouse\",\n  },\n];\n\nexport const BranchCreateForm = forwardRef(({ handleNext, ...props }, ref) => {\n  const router = useRouter();\n  const [files, setFiles] = useState([]);\n\n  useImperativeHandle(ref, () => ({\n    handleFormSubmit() {\n      console.log(\"ad\");\n      formik.handleSubmit();\n    },\n  }));\n\n  const formik = useFormik({\n    initialValues: {\n      name: \"\",\n      branchName: \"\",\n      addressLine2: \"\",\n      city: \"\",\n      submit: null,\n    },\n    validationSchema: Yup.object({\n      branchName: Yup.string().max(255).required(\"Please enter a branch name.\"),\n      // addressLine1: Yup.string()\n      //   .max(255)\n      //   .required(\"Address Line 1 is required\"),\n      city: Yup.object().required(\"Please select a city.\"),\n    }),\n    onSubmit: async (values, helpers) => {\n      try {\n        console.log(values);\n        // NOTE: Make API request\n        toast.success(\"Branch created!\");\n        setActiveStep(1);\n        // props.handlenext();\n        // router.push(\"/dashboard/branches\");\n      } catch (err) {\n        console.error(err);\n        toast.error(\"Something went wrong!\");\n        helpers.setStatus({ success: false });\n        helpers.setErrors({ submit: err.message });\n        helpers.setSubmitting(false);\n      }\n    },\n  });\n\n  const handleDrop = (newFiles) => {\n    setFiles((prevFiles) => [...prevFiles, ...newFiles]);\n  };\n\n  const handleRemove = (file) => {\n    setFiles((prevFiles) =>\n      prevFiles.filter((_file) => _file.path !== file.path)\n    );\n  };\n\n  const handleRemoveAll = () => {\n    setFiles([]);\n  };\n\n  return (\n    <form onSubmit={formik.handleSubmit} {...props}>\n      <Grid container spacing={5} alignItems=\"center\" sx={{ mb: 4, mt: 2 }}>\n        <Grid item md={4} xs={12}>\n          <Typography variant=\"h6\">Tell us your city</Typography>\n        </Grid>\n        <Grid item md={8} xs={12}>\n          <GoogleMaps\n            formik={formik}\n            error={Boolean(formik.touched.city && formik.errors.city)}\n            label={\"Your city in India\"}\n            field={\"city\"}\n            setFieldValue={formik.setFieldValue}\n            handleBlur={formik.handleBlur}\n            values={formik.values}\n          />\n        </Grid>\n        <Grid item xs={12}>\n          <Divider />\n        </Grid>\n        <Grid item md={4} xs={12}>\n          <Typography variant=\"h6\">Please pick a name</Typography>\n        </Grid>\n        <Grid item md={8} xs={12}>\n          <TextField\n            error={Boolean(\n              formik.touched.branchName && formik.errors.branchName\n            )}\n            fullWidth\n            helperText={formik.touched.branchName && formik.errors.branchName}\n            label=\"Your branch name\"\n            name=\"branchName\"\n            onBlur={formik.handleBlur}\n            onChange={formik.handleChange}\n            value={formik.values.branchName}\n          />\n        </Grid>\n      </Grid>\n    </form>\n  );\n});\n"]},"metadata":{},"sourceType":"module"}