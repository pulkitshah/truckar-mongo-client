{"ast":null,"code":"import _slicedToArray from \"/Users/pulkitshah/Desktop/truckarv2/node_modules/next/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/pulkitshah/Desktop/truckarv2/renderer/components/dashboard/welcome/stepper.js\",\n    _s = $RefreshSig$();\n\nimport * as React from \"react\";\nimport { useRef } from \"react\";\nimport NextLink from \"next/link\";\nimport { Box, Button, Card, CardActions, CardContent, Container, Divider, Grid, MenuItem, TextField, Typography, Stepper, Step, StepButton } from \"@mui/material\";\nimport { ArrowRight as ArrowRightIcon } from \"../../../icons/arrow-right\";\nimport { Briefcase as BriefcaseIcon } from \"../../../icons/briefcase\";\nimport { useTranslation } from \"react-i18next\";\nimport { BranchCreateForm } from \"../../../components/dashboard/welcome/branch-create-form\";\nvar steps = [\"Create a main branch\", \"Add team members\", \"Create vehicles\"];\nexport default function HorizontalNonLinearStepper() {\n  _s();\n\n  var _this = this;\n\n  var branchCreateFormRef = useRef(null);\n\n  var _React$useState = React.useState(0),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      activeStep = _React$useState2[0],\n      setActiveStep = _React$useState2[1];\n\n  var _React$useState3 = React.useState({}),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      completed = _React$useState4[0],\n      setCompleted = _React$useState4[1];\n\n  var _useTranslation = useTranslation(),\n      t = _useTranslation.t;\n\n  var totalSteps = function totalSteps() {\n    return steps.length;\n  };\n\n  var completedSteps = function completedSteps() {\n    return Object.keys(completed).length;\n  };\n\n  var isLastStep = function isLastStep() {\n    return activeStep === totalSteps() - 1;\n  };\n\n  var allStepsCompleted = function allStepsCompleted() {\n    return completedSteps() === totalSteps();\n  };\n\n  var handleNext = function handleNext() {\n    var newActiveStep = activeStep + 1;\n\n    if (activeStep === 0) {\n      branchCreateFormRef.current.handleFormSubmit();\n      handleComplete();\n      setActiveStep(newActiveStep);\n    } else {\n      var _newActiveStep = isLastStep() && !allStepsCompleted() ? // It's the last step, but not all steps have been completed,\n      // find the first step that has been completed\n      steps.findIndex(function (step, i) {\n        return !(i in completed);\n      }) : activeStep + 1;\n\n      handleComplete();\n    }\n\n    setActiveStep(newActiveStep);\n  };\n\n  var handleBack = function handleBack() {\n    setActiveStep(function (prevActiveStep) {\n      return prevActiveStep - 1;\n    });\n  };\n\n  var handleStep = function handleStep(step) {\n    return function () {\n      setActiveStep(step);\n    };\n  };\n\n  var handleComplete = function handleComplete() {\n    var newCompleted = completed;\n    newCompleted[activeStep] = true;\n    setCompleted(newCompleted);\n  };\n\n  var handleReset = function handleReset() {\n    setActiveStep(0);\n    setCompleted({});\n  };\n\n  return /*#__PURE__*/_jsxDEV(Box, {\n    sx: {\n      minWidth: \"100%\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(Stepper, {\n      nonLinear: true,\n      activeStep: activeStep,\n      children: steps.map(function (label, index) {\n        return /*#__PURE__*/_jsxDEV(Step, {\n          completed: completed[index],\n          children: /*#__PURE__*/_jsxDEV(StepButton, {\n            color: \"inherit\",\n            onClick: handleStep(index),\n            children: label\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 91,\n            columnNumber: 13\n          }, _this)\n        }, label, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 11\n        }, _this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this), allStepsCompleted() ? /*#__PURE__*/_jsxDEV(React.Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        sx: {\n          mt: 2,\n          mb: 1\n        },\n        children: \"All steps completed - you're finished\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          display: \"flex\",\n          flexDirection: \"row\",\n          pt: 2\n        },\n        children: [/*#__PURE__*/_jsxDEV(Box, {\n          sx: {\n            flex: \"1 1 auto\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          onClick: handleReset,\n          children: \"Reset\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(React.Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12,\n        sx: {\n          py: 3\n        },\n        children: /*#__PURE__*/_jsxDEV(Card, {\n          children: [/*#__PURE__*/_jsxDEV(CardContent, {\n            children: [/*#__PURE__*/_jsxDEV(Box, {\n              sx: {\n                alignItems: \"center\",\n                display: \"flex\"\n              },\n              children: [/*#__PURE__*/_jsxDEV(BriefcaseIcon, {\n                color: \"primary\",\n                fontSize: \"small\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 119,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                color: \"primary.main\",\n                sx: {\n                  pl: 1\n                },\n                variant: \"subtitle2\",\n                children: t(\"Add your main branch details\")\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 120,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 113,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"h5\",\n              sx: {\n                mt: 2\n              },\n              children: t(\"Let us open your branch.\")\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 128,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Box, {\n              sx: {\n                alignItems: \"center\",\n                display: \"flex\"\n              },\n              children: /*#__PURE__*/_jsxDEV(BranchCreateForm, {\n                handleNext: handleNext,\n                ref: branchCreateFormRef\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 137,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 131,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 112,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Divider, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 143,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          display: \"flex\",\n          flexDirection: \"row\",\n          pt: 2\n        },\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          color: \"inherit\",\n          disabled: activeStep !== 2,\n          onClick: handleBack,\n          sx: {\n            mr: 1\n          },\n          children: \"Back\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Box, {\n          sx: {\n            flex: \"1 1 auto\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          onClick: handleNext,\n          sx: {\n            mr: 1\n          },\n          children: \"Next\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          onClick: handleComplete,\n          children: activeStep !== 0 && \"Finish\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 160,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 87,\n    columnNumber: 5\n  }, this);\n}\n\n_s(HorizontalNonLinearStepper, \"fazED6L6QRC1F1ZEy+vlNrysyR4=\", false, function () {\n  return [useTranslation];\n});\n\n_c = HorizontalNonLinearStepper;\n\nvar _c;\n\n$RefreshReg$(_c, \"HorizontalNonLinearStepper\");","map":{"version":3,"sources":["/Users/pulkitshah/Desktop/truckarv2/renderer/components/dashboard/welcome/stepper.js"],"names":["React","useRef","NextLink","Box","Button","Card","CardActions","CardContent","Container","Divider","Grid","MenuItem","TextField","Typography","Stepper","Step","StepButton","ArrowRight","ArrowRightIcon","Briefcase","BriefcaseIcon","useTranslation","BranchCreateForm","steps","HorizontalNonLinearStepper","branchCreateFormRef","useState","activeStep","setActiveStep","completed","setCompleted","t","totalSteps","length","completedSteps","Object","keys","isLastStep","allStepsCompleted","handleNext","newActiveStep","current","handleFormSubmit","handleComplete","findIndex","step","i","handleBack","prevActiveStep","handleStep","newCompleted","handleReset","minWidth","map","label","index","mt","mb","display","flexDirection","pt","flex","py","alignItems","pl","mr"],"mappings":"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","sourcesContent":["import * as React from \"react\";\nimport { useRef } from \"react\";\nimport NextLink from \"next/link\";\nimport {\n  Box,\n  Button,\n  Card,\n  CardActions,\n  CardContent,\n  Container,\n  Divider,\n  Grid,\n  MenuItem,\n  TextField,\n  Typography,\n  Stepper,\n  Step,\n  StepButton,\n} from \"@mui/material\";\nimport { ArrowRight as ArrowRightIcon } from \"../../../icons/arrow-right\";\nimport { Briefcase as BriefcaseIcon } from \"../../../icons/briefcase\";\nimport { useTranslation } from \"react-i18next\";\nimport { BranchCreateForm } from \"../../../components/dashboard/welcome/branch-create-form\";\n\nconst steps = [\"Create a main branch\", \"Add team members\", \"Create vehicles\"];\n\nexport default function HorizontalNonLinearStepper() {\n  const branchCreateFormRef = useRef(null);\n  const [activeStep, setActiveStep] = React.useState(0);\n  const [completed, setCompleted] = React.useState({});\n  const { t } = useTranslation();\n\n  const totalSteps = () => {\n    return steps.length;\n  };\n\n  const completedSteps = () => {\n    return Object.keys(completed).length;\n  };\n\n  const isLastStep = () => {\n    return activeStep === totalSteps() - 1;\n  };\n\n  const allStepsCompleted = () => {\n    return completedSteps() === totalSteps();\n  };\n\n  const handleNext = () => {\n    const newActiveStep = activeStep + 1;\n    if (activeStep === 0) {\n      branchCreateFormRef.current.handleFormSubmit();\n      handleComplete();\n      setActiveStep(newActiveStep);\n    } else {\n      const newActiveStep =\n        isLastStep() && !allStepsCompleted()\n          ? // It's the last step, but not all steps have been completed,\n            // find the first step that has been completed\n            steps.findIndex((step, i) => !(i in completed))\n          : activeStep + 1;\n      handleComplete();\n    }\n    setActiveStep(newActiveStep);\n  };\n\n  const handleBack = () => {\n    setActiveStep((prevActiveStep) => prevActiveStep - 1);\n  };\n\n  const handleStep = (step) => () => {\n    setActiveStep(step);\n  };\n\n  const handleComplete = () => {\n    const newCompleted = completed;\n    newCompleted[activeStep] = true;\n    setCompleted(newCompleted);\n  };\n\n  const handleReset = () => {\n    setActiveStep(0);\n    setCompleted({});\n  };\n\n  return (\n    <Box sx={{ minWidth: \"100%\" }}>\n      <Stepper nonLinear activeStep={activeStep}>\n        {steps.map((label, index) => (\n          <Step key={label} completed={completed[index]}>\n            <StepButton color=\"inherit\" onClick={handleStep(index)}>\n              {label}\n            </StepButton>\n          </Step>\n        ))}\n      </Stepper>\n\n      {allStepsCompleted() ? (\n        <React.Fragment>\n          <Typography sx={{ mt: 2, mb: 1 }}>\n            All steps completed - you&apos;re finished\n          </Typography>\n          <Box sx={{ display: \"flex\", flexDirection: \"row\", pt: 2 }}>\n            <Box sx={{ flex: \"1 1 auto\" }} />\n            <Button onClick={handleReset}>Reset</Button>\n          </Box>\n        </React.Fragment>\n      ) : (\n        <React.Fragment>\n          <Grid item xs={12} sx={{ py: 3 }}>\n            <Card>\n              <CardContent>\n                <Box\n                  sx={{\n                    alignItems: \"center\",\n                    display: \"flex\",\n                  }}\n                >\n                  <BriefcaseIcon color=\"primary\" fontSize=\"small\" />\n                  <Typography\n                    color=\"primary.main\"\n                    sx={{ pl: 1 }}\n                    variant=\"subtitle2\"\n                  >\n                    {t(\"Add your main branch details\")}\n                  </Typography>\n                </Box>\n                <Typography variant=\"h5\" sx={{ mt: 2 }}>\n                  {t(\"Let us open your branch.\")}\n                </Typography>\n                <Box\n                  sx={{\n                    alignItems: \"center\",\n                    display: \"flex\",\n                  }}\n                >\n                  <BranchCreateForm\n                    handleNext={handleNext}\n                    ref={branchCreateFormRef}\n                  />\n                </Box>\n              </CardContent>\n              <Divider />\n            </Card>\n          </Grid>\n          <Box sx={{ display: \"flex\", flexDirection: \"row\", pt: 2 }}>\n            <Button\n              color=\"inherit\"\n              disabled={activeStep !== 2}\n              onClick={handleBack}\n              sx={{ mr: 1 }}\n            >\n              Back\n            </Button>\n            <Box sx={{ flex: \"1 1 auto\" }} />\n            <Button onClick={handleNext} sx={{ mr: 1 }}>\n              Next\n            </Button>\n            {\n              <Button onClick={handleComplete}>\n                {activeStep !== 0 && \"Finish\"}\n              </Button>\n            }\n          </Box>\n        </React.Fragment>\n      )}\n    </Box>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}