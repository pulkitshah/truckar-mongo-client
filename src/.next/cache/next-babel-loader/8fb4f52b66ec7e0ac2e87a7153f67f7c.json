{"ast":null,"code":"import React from \"react\";\nimport { useQuery } from \"@apollo/client\";\nimport gql from \"graphql-tag\";\n\nconst getTrips = user => {\n  const {\n    tripsPoll,\n    fetchMore,\n    loading\n  } = getTripsOfUser(user);\n  return {\n    loading,\n    tripsPoll,\n    fetchMore\n  };\n}; // TODO: Add the GraphQL query for fetching all deliveries.\n\n\nconst GetTripsOfUserQuery = gql`\n  query AllTrips($user: ObjectId!, $limit: Int) {\n    trips(query: { user: $user }, limit: $limit) {\n      _id\n      orderNo\n      vehicleNumber\n    }\n  }\n`;\n\nfunction getTripsOfUser(user) {\n  var _data$trips;\n\n  const queryResult = useQuery(GetTripsOfUserQuery, {\n    variables: {\n      user: user._id,\n      offset: 0,\n      limit: 10000\n    }\n  }, {});\n  const {\n    data,\n    loading,\n    fetchMore,\n    error,\n    startPolling,\n    stopPolling\n  } = queryResult;\n  React.useEffect(() => {\n    // check server for updates every 1000ms\n    startPolling(1000); // stop polling server for data when component unmounts\n\n    return () => stopPolling();\n  }, [startPolling, stopPolling]);\n\n  if (error) {\n    throw new Error(JSON.stringify(error, null, 2));\n  } // If the query has finished, return the deliveries from the result data\n  // Otherwise, return an empty list\n\n\n  const tripsPoll = (_data$trips = data === null || data === void 0 ? void 0 : data.trips) !== null && _data$trips !== void 0 ? _data$trips : [];\n  return {\n    tripsPoll,\n    fetchMoreTrips: fetchMore,\n    tripsloading: loading\n  };\n}\n\nexport default getTrips;","map":{"version":3,"sources":["/Users/pulkitshah/Desktop/truckarv2/renderer/graphql/trips.js"],"names":["React","useQuery","gql","getTrips","user","tripsPoll","fetchMore","loading","getTripsOfUser","GetTripsOfUserQuery","queryResult","variables","_id","offset","limit","data","error","startPolling","stopPolling","useEffect","Error","JSON","stringify","trips","fetchMoreTrips","tripsloading"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,QAAyB,gBAAzB;AACA,OAAOC,GAAP,MAAgB,aAAhB;;AAEA,MAAMC,QAAQ,GAAIC,IAAD,IAAU;AACzB,QAAM;AAAEC,IAAAA,SAAF;AAAaC,IAAAA,SAAb;AAAwBC,IAAAA;AAAxB,MACJC,cAAc,CAACJ,IAAD,CADhB;AAEA,SAAO;AACLG,IAAAA,OADK;AAELF,IAAAA,SAFK;AAGLC,IAAAA;AAHK,GAAP;AAKD,CARD,C,CAUA;;;AAEA,MAAMG,mBAAmB,GAAGP,GAAI;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CARA;;AAUA,SAASM,cAAT,CAAwBJ,IAAxB,EAA8B;AAAA;;AAC5B,QAAMM,WAAW,GAAGT,QAAQ,CAC1BQ,mBAD0B,EAE1B;AACEE,IAAAA,SAAS,EAAE;AACTP,MAAAA,IAAI,EAAEA,IAAI,CAACQ,GADF;AAETC,MAAAA,MAAM,EAAE,CAFC;AAGTC,MAAAA,KAAK,EAAE;AAHE;AADb,GAF0B,EAS1B,EAT0B,CAA5B;AAWA,QAAM;AAAEC,IAAAA,IAAF;AAAQR,IAAAA,OAAR;AAAiBD,IAAAA,SAAjB;AAA4BU,IAAAA,KAA5B;AAAmCC,IAAAA,YAAnC;AAAiDC,IAAAA;AAAjD,MACJR,WADF;AAGAV,EAAAA,KAAK,CAACmB,SAAN,CAAgB,MAAM;AACpB;AACAF,IAAAA,YAAY,CAAC,IAAD,CAAZ,CAFoB,CAGpB;;AACA,WAAO,MAAMC,WAAW,EAAxB;AACD,GALD,EAKG,CAACD,YAAD,EAAeC,WAAf,CALH;;AAOA,MAAIF,KAAJ,EAAW;AACT,UAAM,IAAII,KAAJ,CAAUC,IAAI,CAACC,SAAL,CAAeN,KAAf,EAAsB,IAAtB,EAA4B,CAA5B,CAAV,CAAN;AACD,GAxB2B,CAyB5B;AACA;;;AACA,QAAMX,SAAS,kBAAGU,IAAH,aAAGA,IAAH,uBAAGA,IAAI,CAAEQ,KAAT,qDAAkB,EAAjC;AAEA,SAAO;AACLlB,IAAAA,SADK;AAELmB,IAAAA,cAAc,EAAElB,SAFX;AAGLmB,IAAAA,YAAY,EAAElB;AAHT,GAAP;AAKD;;AASD,eAAeJ,QAAf","sourcesContent":["import React from \"react\";\nimport { useQuery } from \"@apollo/client\";\nimport gql from \"graphql-tag\";\n\nconst getTrips = (user) => {\n  const { tripsPoll, fetchMore, loading } =\n    getTripsOfUser(user);\n  return {\n    loading,\n    tripsPoll,\n    fetchMore,\n  };\n};\n\n// TODO: Add the GraphQL query for fetching all deliveries.\n\nconst GetTripsOfUserQuery = gql`\n  query AllTrips($user: ObjectId!, $limit: Int) {\n    trips(query: { user: $user }, limit: $limit) {\n      _id\n      orderNo\n      vehicleNumber\n    }\n  }\n`;\n\nfunction getTripsOfUser(user) {\n  const queryResult = useQuery(\n    GetTripsOfUserQuery,\n    {\n      variables: {\n        user: user._id,\n        offset: 0,\n        limit: 10000,\n      },\n    },\n    {}\n  );\n  const { data, loading, fetchMore, error, startPolling, stopPolling } =\n    queryResult;\n\n  React.useEffect(() => {\n    // check server for updates every 1000ms\n    startPolling(1000);\n    // stop polling server for data when component unmounts\n    return () => stopPolling();\n  }, [startPolling, stopPolling]);\n  \n  if (error) {\n    throw new Error(JSON.stringify(error, null, 2));\n  }\n  // If the query has finished, return the deliveries from the result data\n  // Otherwise, return an empty list\n  const tripsPoll = data?.trips ?? [];\n\n  return {\n    tripsPoll,\n    fetchMoreTrips: fetchMore,\n    tripsloading: loading,\n  };\n}\n\n\n\n\n\n\n\n\nexport default getTrips;\n"]},"metadata":{},"sourceType":"module"}