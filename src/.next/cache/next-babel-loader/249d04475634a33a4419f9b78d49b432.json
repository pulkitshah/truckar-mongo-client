{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/pulkitshah/Desktop/truckarv2/renderer/components/dashboard/autocompletes/PartyAutocomplete.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* eslint-disable no-use-before-define */\nimport React, { useState, useEffect, useCallback } from \"react\";\nimport clsx from \"clsx\";\nimport * as Yup from \"yup\";\nimport { Formik } from \"formik\";\nimport { Box, Card, CardContent, Divider, Grid, Switch, Typography, makeStyles } from \"@material-ui/core\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport Button from \"@material-ui/core/Button\";\nimport Autocomplete, { createFilterOptions } from \"@material-ui/lab/Autocomplete\";\nimport axios from \"src/utils/axios\";\nimport useIsMountedRef from \"../../../hooks/use-mounted\";\nimport GoogleMaps from \"../welcome/google-places-autocomplete\";\nconst filter = createFilterOptions();\nconst useStyles = makeStyles(() => ({\n  root: {}\n}));\n\nconst FreeSoloCreateOptionDialog = (_ref) => {\n  let {\n    className,\n    touched,\n    setFieldValue,\n    errors,\n    handleBlur,\n    type,\n    values\n  } = _ref,\n      rest = _objectWithoutProperties(_ref, [\"className\", \"touched\", \"setFieldValue\", \"errors\", \"handleBlur\", \"type\", \"values\"]);\n\n  const classes = useStyles();\n  const [value, setValue] = React.useState(values && values[type]);\n  const [open, toggleOpen] = React.useState(false);\n  const {\n    0: parties,\n    1: setParties\n  } = useState([]);\n  const isMountedRef = useIsMountedRef();\n  const getParties = useCallback(async () => {\n    try {\n      // console.log();\n      const response = await axios.get(`/api/parties/${type === \"transporter\" ? \"transporters\" : \"\"}`);\n\n      if (isMountedRef.current) {\n        setParties(response.data);\n      }\n    } catch (err) {\n      console.error(err);\n    }\n  }, [isMountedRef, type]);\n  useEffect(() => {\n    getParties();\n\n    if (!open) {\n      setParties([]);\n    }\n  }, [getParties, open]);\n\n  const handleClose = () => {\n    setDialogValue({\n      name: \"\",\n      transporter: type !== \"customer\" ? true : false\n    });\n    toggleOpen(false);\n  };\n\n  const [dialogValue, setDialogValue] = React.useState({\n    name: \"\",\n    transporter: type !== \"customer\" ? true : false\n  });\n\n  const handleSubmit = async event => {\n    event.preventDefault();\n    setValue({\n      name: dialogValue.name,\n      transporter: dialogValue.transporter\n    });\n\n    try {\n      // NOTE: Make API request\n      console.log(value);\n      const response = await axios.post(`/api/parties/`, {\n        name: dialogValue.name.replace(/\\w\\S*/g, function (txt) {\n          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();\n        }),\n        transporter: dialogValue.transporter\n      });\n      console.log(response.data);\n      setFieldValue(type, response.data);\n    } catch (err) {\n      console.error(err);\n    }\n\n    handleClose();\n  };\n\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Autocomplete, {\n      value: value,\n      onChange: (event, newValue) => {\n        if (typeof newValue === \"string\") {\n          // timeout to avoid instant validation of the dialog's form.\n          setTimeout(() => {\n            toggleOpen(true);\n            setDialogValue({\n              name: newValue.replace(/\\w\\S*/g, function (txt) {\n                return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();\n              }),\n              transporter: type !== \"customer\" ? true : false\n            });\n          });\n        } else if (newValue && newValue.inputValue) {\n          toggleOpen(true);\n          setDialogValue({\n            name: newValue.inputValue,\n            transporter: type !== \"customer\" ? true : false\n          });\n        } else {\n          setFieldValue(type, newValue);\n          setValue(newValue);\n        }\n      },\n      filterOptions: (options, params) => {\n        const filtered = filter(options, params);\n\n        if (params.inputValue !== \"\") {\n          filtered.push({\n            inputValue: params.inputValue,\n            name: `Add \"${params.inputValue}\"`\n          });\n        }\n\n        return filtered;\n      },\n      id: type,\n      options: parties,\n      getOptionLabel: option => {\n        // e.g value selected with enter, right from the input\n        if (typeof option === \"string\") {\n          return option.replace(/\\w\\S*/g, function (txt) {\n            return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();\n          });\n        }\n\n        if (option.inputValue) {\n          return option.inputValue.replace(/\\w\\S*/g, function (txt) {\n            return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();\n          });\n        }\n\n        return option.name.replace(/\\w\\S*/g, function (txt) {\n          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();\n        });\n      },\n      clearOnBlur: true,\n      handleHomeEndKeys: true,\n      renderOption: option => {\n        return /*#__PURE__*/_jsxDEV(React.Fragment, {\n          children: [option.name.replace(/\\w\\S*/g, function (txt) {\n            return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();\n          }), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 179,\n            columnNumber: 15\n          }, this), option.mobile && `(M) ${option.mobile.replace(/ /g, \"\")}`, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 181,\n            columnNumber: 15\n          }, this), option.location && `Location - ${option.location.structured_formatting.main_text}`, /*#__PURE__*/_jsxDEV(Divider, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 184,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 173,\n          columnNumber: 13\n        }, this);\n      },\n      fullWidth: true,\n      freeSolo: true,\n      renderInput: params => /*#__PURE__*/_jsxDEV(TextField, _objectSpread(_objectSpread({}, params), {}, {\n        label: type.charAt(0).toUpperCase() + type.slice(1),\n        error: Boolean(type === \"customer\" ? touched.customer && errors.customer : touched.transporter && errors.transporter),\n        onBlur: handleBlur,\n        helperText: type === \"customer\" ? touched.customer && errors.customer : touched.transporter && errors.transporter,\n        variant: \"outlined\"\n      }), void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Dialog, {\n      open: open,\n      onClose: handleClose,\n      \"aria-labelledby\": \"form-dialog-name\",\n      children: /*#__PURE__*/_jsxDEV(\"form\", {\n        children: [/*#__PURE__*/_jsxDEV(DialogTitle, {\n          id: \"form-dialog-name\",\n          children: \"Add a new party\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 215,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Formik, {\n          initialValues: {\n            name: dialogValue.name || \"\",\n            mobile: dialogValue.mobile || \"\",\n            location: dialogValue.location || \"\",\n            transporter: dialogValue.transporter || \"\",\n            submit: null\n          },\n          validationSchema: Yup.object().shape({\n            name: Yup.string().max(255).required(\"Name is required\"),\n            mobile: Yup.string().matches(/^[6-9]\\d{9}$/, \"Phone number is not valid\").required(\"Mobile is required\")\n          }),\n          onSubmit: async (values, {\n            resetForm,\n            setErrors,\n            setStatus,\n            setSubmitting\n          }) => {\n            try {\n              // NOTE: Make API request\n              console.log(values);\n              const response = await axios.post(`/api/parties/`, _objectSpread({\n                name: values.name.replace(/\\w\\S*/g, function (txt) {\n                  return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();\n                })\n              }, values));\n              setFieldValue(type, response.data); // dispatch(updateParty(party, values));\n\n              resetForm();\n              setStatus({\n                success: true\n              });\n              setSubmitting(false);\n              handleClose();\n            } catch (err) {\n              console.log(err);\n              setStatus({\n                success: false\n              });\n              setErrors({\n                submit: err.message\n              });\n              setSubmitting(false);\n            }\n          },\n          children: ({\n            errors,\n            handleBlur,\n            handleChange,\n            handleSubmit,\n            isSubmitting,\n            setFieldValue,\n            touched,\n            values\n          }) => /*#__PURE__*/_jsxDEV(\"form\", _objectSpread(_objectSpread({\n            className: clsx(classes.root, className),\n            onSubmit: handleSubmit\n          }, rest), {}, {\n            children: /*#__PURE__*/_jsxDEV(Card, {\n              children: /*#__PURE__*/_jsxDEV(CardContent, {\n                children: [/*#__PURE__*/_jsxDEV(Grid, {\n                  container: true,\n                  spacing: 3,\n                  children: [/*#__PURE__*/_jsxDEV(Grid, {\n                    item: true,\n                    xs: 12,\n                    children: /*#__PURE__*/_jsxDEV(TextField, {\n                      error: Boolean(touched.name && errors.name),\n                      fullWidth: true,\n                      helperText: touched.name && errors.name,\n                      label: \"Main Contact Name\",\n                      name: \"name\",\n                      onBlur: handleBlur,\n                      onChange: event => {\n                        setFieldValue(\"name\", event.target.value.replace(/\\w\\S*/g, function (txt) {\n                          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();\n                        }));\n                      },\n                      required: true,\n                      value: values.name,\n                      variant: \"outlined\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 278,\n                      columnNumber: 25\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 277,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(Grid, {\n                    item: true,\n                    xs: 12,\n                    children: /*#__PURE__*/_jsxDEV(TextField, {\n                      error: Boolean(touched.mobile && errors.mobile),\n                      fullWidth: true,\n                      helperText: touched.mobile && errors.mobile,\n                      label: \"Mobile\",\n                      name: \"mobile\",\n                      onBlur: handleBlur,\n                      onChange: event => {\n                        setFieldValue(\"mobile\", event.target.value.replace(/ /g, \"\"));\n                      },\n                      value: values.mobile,\n                      variant: \"outlined\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 305,\n                      columnNumber: 25\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 304,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(Grid, {\n                    item: true,\n                    xs: 12,\n                    children: /*#__PURE__*/_jsxDEV(GoogleMaps, {\n                      error: Boolean(touched.mobile && errors.mobile),\n                      name: \"location\",\n                      field: \"location\",\n                      setFieldValue: setFieldValue,\n                      handleBlur: handleBlur,\n                      values: values\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 323,\n                      columnNumber: 25\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 322,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(Grid, {\n                    item: true,\n                    xs: 12,\n                    children: [/*#__PURE__*/_jsxDEV(Typography, {\n                      variant: \"h5\",\n                      color: \"textPrimary\",\n                      children: \"Party Type\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 333,\n                      columnNumber: 25\n                    }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                      variant: \"body2\",\n                      color: \"textSecondary\",\n                      children: \"Is this party a transporter?\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 336,\n                      columnNumber: 25\n                    }, this), /*#__PURE__*/_jsxDEV(Switch, {\n                      checked: values.transporter,\n                      color: \"secondary\",\n                      edge: \"start\",\n                      name: \"transporter\",\n                      onChange: handleChange,\n                      value: values.transporter\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 339,\n                      columnNumber: 25\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 332,\n                    columnNumber: 23\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 276,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(Box, {\n                  mt: 2,\n                  children: /*#__PURE__*/_jsxDEV(Grid, {\n                    container: true,\n                    spacing: 3,\n                    children: [/*#__PURE__*/_jsxDEV(Grid, {\n                      item: true,\n                      children: /*#__PURE__*/_jsxDEV(Button, {\n                        variant: \"contained\",\n                        color: \"secondary\",\n                        type: \"submit\",\n                        disabled: isSubmitting,\n                        children: \"Create Party\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 352,\n                        columnNumber: 27\n                      }, this)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 351,\n                      columnNumber: 25\n                    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n                      item: true,\n                      children: /*#__PURE__*/_jsxDEV(Button, {\n                        variant: \"contained\",\n                        color: \"secondary\",\n                        onClick: handleClose,\n                        children: \"Cancel\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 362,\n                        columnNumber: 27\n                      }, this)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 361,\n                      columnNumber: 25\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 350,\n                    columnNumber: 23\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 349,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 275,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 274,\n              columnNumber: 17\n            }, this)\n          }), void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 269,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 216,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 209,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 112,\n    columnNumber: 5\n  }, this);\n};\n\nexport default FreeSoloCreateOptionDialog;","map":{"version":3,"sources":["/Users/pulkitshah/Desktop/truckarv2/renderer/components/dashboard/autocompletes/PartyAutocomplete.js"],"names":["React","useState","useEffect","useCallback","clsx","Yup","Formik","Box","Card","CardContent","Divider","Grid","Switch","Typography","makeStyles","TextField","Dialog","DialogTitle","Button","Autocomplete","createFilterOptions","axios","useIsMountedRef","GoogleMaps","filter","useStyles","root","FreeSoloCreateOptionDialog","className","touched","setFieldValue","errors","handleBlur","type","values","rest","classes","value","setValue","open","toggleOpen","parties","setParties","isMountedRef","getParties","response","get","current","data","err","console","error","handleClose","setDialogValue","name","transporter","dialogValue","handleSubmit","event","preventDefault","log","post","replace","txt","charAt","toUpperCase","substr","toLowerCase","newValue","setTimeout","inputValue","options","params","filtered","push","option","mobile","location","structured_formatting","main_text","slice","Boolean","customer","submit","object","shape","string","max","required","matches","resetForm","setErrors","setStatus","setSubmitting","success","message","handleChange","isSubmitting","target"],"mappings":"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","sourcesContent":["/* eslint-disable no-use-before-define */\nimport React, { useState, useEffect, useCallback } from \"react\";\nimport clsx from \"clsx\";\nimport * as Yup from \"yup\";\nimport { Formik } from \"formik\";\nimport {\n  Box,\n  Card,\n  CardContent,\n  Divider,\n  Grid,\n  Switch,\n  Typography,\n  makeStyles,\n} from \"@material-ui/core\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport Button from \"@material-ui/core/Button\";\nimport Autocomplete, {\n  createFilterOptions,\n} from \"@material-ui/lab/Autocomplete\";\n\nimport axios from \"src/utils/axios\";\nimport useIsMountedRef from \"../../../hooks/use-mounted\";\nimport GoogleMaps from \"../welcome/google-places-autocomplete\";\n\nconst filter = createFilterOptions();\n\nconst useStyles = makeStyles(() => ({\n  root: {},\n}));\n\nconst FreeSoloCreateOptionDialog = ({\n  className,\n  touched,\n  setFieldValue,\n  errors,\n  handleBlur,\n  type,\n  values,\n  ...rest\n}) => {\n  const classes = useStyles();\n  const [value, setValue] = React.useState(values && values[type]);\n  const [open, toggleOpen] = React.useState(false);\n  const [parties, setParties] = useState([]);\n  const isMountedRef = useIsMountedRef();\n\n  const getParties = useCallback(async () => {\n    try {\n      // console.log();\n      const response = await axios.get(\n        `/api/parties/${type === \"transporter\" ? \"transporters\" : \"\"}`\n      );\n      if (isMountedRef.current) {\n        setParties(response.data);\n      }\n    } catch (err) {\n      console.error(err);\n    }\n  }, [isMountedRef, type]);\n\n  useEffect(() => {\n    getParties();\n\n    if (!open) {\n      setParties([]);\n    }\n  }, [getParties, open]);\n\n  const handleClose = () => {\n    setDialogValue({\n      name: \"\",\n      transporter: type !== \"customer\" ? true : false,\n    });\n\n    toggleOpen(false);\n  };\n\n  const [dialogValue, setDialogValue] = React.useState({\n    name: \"\",\n    transporter: type !== \"customer\" ? true : false,\n  });\n\n  const handleSubmit = async (event) => {\n    event.preventDefault();\n    setValue({\n      name: dialogValue.name,\n      transporter: dialogValue.transporter,\n    });\n\n    try {\n      // NOTE: Make API request\n      console.log(value);\n      const response = await axios.post(`/api/parties/`, {\n        name: dialogValue.name.replace(/\\w\\S*/g, function (txt) {\n          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();\n        }),\n        transporter: dialogValue.transporter,\n      });\n      console.log(response.data);\n      setFieldValue(type, response.data);\n    } catch (err) {\n      console.error(err);\n    }\n\n    handleClose();\n  };\n\n  return (\n    <React.Fragment>\n      <Autocomplete\n        value={value}\n        onChange={(event, newValue) => {\n          if (typeof newValue === \"string\") {\n            // timeout to avoid instant validation of the dialog's form.\n            setTimeout(() => {\n              toggleOpen(true);\n              setDialogValue({\n                name: newValue.replace(/\\w\\S*/g, function (txt) {\n                  return (\n                    txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase()\n                  );\n                }),\n                transporter: type !== \"customer\" ? true : false,\n              });\n            });\n          } else if (newValue && newValue.inputValue) {\n            toggleOpen(true);\n            setDialogValue({\n              name: newValue.inputValue,\n              transporter: type !== \"customer\" ? true : false,\n            });\n          } else {\n            setFieldValue(type, newValue);\n            setValue(newValue);\n          }\n        }}\n        filterOptions={(options, params) => {\n          const filtered = filter(options, params);\n\n          if (params.inputValue !== \"\") {\n            filtered.push({\n              inputValue: params.inputValue,\n              name: `Add \"${params.inputValue}\"`,\n            });\n          }\n          return filtered;\n        }}\n        id={type}\n        options={parties}\n        getOptionLabel={(option) => {\n          // e.g value selected with enter, right from the input\n          if (typeof option === \"string\") {\n            return option.replace(/\\w\\S*/g, function (txt) {\n              return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();\n            });\n          }\n          if (option.inputValue) {\n            return option.inputValue.replace(/\\w\\S*/g, function (txt) {\n              return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();\n            });\n          }\n          return option.name.replace(/\\w\\S*/g, function (txt) {\n            return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();\n          });\n        }}\n        clearOnBlur\n        handleHomeEndKeys\n        renderOption={(option) => {\n          return (\n            <React.Fragment>\n              {option.name.replace(/\\w\\S*/g, function (txt) {\n                return (\n                  txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase()\n                );\n              })}\n              <br />\n              {option.mobile && `(M) ${option.mobile.replace(/ /g, \"\")}`}\n              <br />\n              {option.location &&\n                `Location - ${option.location.structured_formatting.main_text}`}\n              <Divider />\n            </React.Fragment>\n          );\n        }}\n        fullWidth\n        freeSolo\n        renderInput={(params) => (\n          <TextField\n            {...params}\n            label={type.charAt(0).toUpperCase() + type.slice(1)}\n            error={Boolean(\n              type === \"customer\"\n                ? touched.customer && errors.customer\n                : touched.transporter && errors.transporter\n            )}\n            onBlur={handleBlur}\n            helperText={\n              type === \"customer\"\n                ? touched.customer && errors.customer\n                : touched.transporter && errors.transporter\n            }\n            variant=\"outlined\"\n          />\n        )}\n      />\n      <Dialog\n        open={open}\n        onClose={handleClose}\n        aria-labelledby=\"form-dialog-name\"\n      >\n        <form>\n          <DialogTitle id=\"form-dialog-name\">Add a new party</DialogTitle>\n          <Formik\n            initialValues={{\n              name: dialogValue.name || \"\",\n              mobile: dialogValue.mobile || \"\",\n              location: dialogValue.location || \"\",\n              transporter: dialogValue.transporter || \"\",\n              submit: null,\n            }}\n            validationSchema={Yup.object().shape({\n              name: Yup.string().max(255).required(\"Name is required\"),\n              mobile: Yup.string()\n                .matches(/^[6-9]\\d{9}$/, \"Phone number is not valid\")\n                .required(\"Mobile is required\"),\n            })}\n            onSubmit={async (\n              values,\n              { resetForm, setErrors, setStatus, setSubmitting }\n            ) => {\n              try {\n                // NOTE: Make API request\n                console.log(values);\n                const response = await axios.post(`/api/parties/`, {\n                  name: values.name.replace(/\\w\\S*/g, function (txt) {\n                    return (\n                      txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase()\n                    );\n                  }),\n                  ...values,\n                });\n                setFieldValue(type, response.data);\n                // dispatch(updateParty(party, values));\n                resetForm();\n                setStatus({ success: true });\n                setSubmitting(false);\n                handleClose();\n              } catch (err) {\n                console.log(err);\n                setStatus({ success: false });\n                setErrors({ submit: err.message });\n                setSubmitting(false);\n              }\n            }}\n          >\n            {({\n              errors,\n              handleBlur,\n              handleChange,\n              handleSubmit,\n              isSubmitting,\n              setFieldValue,\n              touched,\n              values,\n            }) => (\n              <form\n                className={clsx(classes.root, className)}\n                onSubmit={handleSubmit}\n                {...rest}\n              >\n                <Card>\n                  <CardContent>\n                    <Grid container spacing={3}>\n                      <Grid item xs={12}>\n                        <TextField\n                          error={Boolean(touched.name && errors.name)}\n                          fullWidth\n                          helperText={touched.name && errors.name}\n                          label=\"Main Contact Name\"\n                          name=\"name\"\n                          onBlur={handleBlur}\n                          onChange={(event) => {\n                            setFieldValue(\n                              \"name\",\n                              event.target.value.replace(\n                                /\\w\\S*/g,\n                                function (txt) {\n                                  return (\n                                    txt.charAt(0).toUpperCase() +\n                                    txt.substr(1).toLowerCase()\n                                  );\n                                }\n                              )\n                            );\n                          }}\n                          required\n                          value={values.name}\n                          variant=\"outlined\"\n                        />\n                      </Grid>\n                      <Grid item xs={12}>\n                        <TextField\n                          error={Boolean(touched.mobile && errors.mobile)}\n                          fullWidth\n                          helperText={touched.mobile && errors.mobile}\n                          label=\"Mobile\"\n                          name=\"mobile\"\n                          onBlur={handleBlur}\n                          onChange={(event) => {\n                            setFieldValue(\n                              \"mobile\",\n                              event.target.value.replace(/ /g, \"\")\n                            );\n                          }}\n                          value={values.mobile}\n                          variant=\"outlined\"\n                        />\n                      </Grid>\n                      <Grid item xs={12}>\n                        <GoogleMaps\n                          error={Boolean(touched.mobile && errors.mobile)}\n                          name={\"location\"}\n                          field={\"location\"}\n                          setFieldValue={setFieldValue}\n                          handleBlur={handleBlur}\n                          values={values}\n                        />\n                      </Grid>\n                      <Grid item xs={12}>\n                        <Typography variant=\"h5\" color=\"textPrimary\">\n                          Party Type\n                        </Typography>\n                        <Typography variant=\"body2\" color=\"textSecondary\">\n                          Is this party a transporter?\n                        </Typography>\n                        <Switch\n                          checked={values.transporter}\n                          color=\"secondary\"\n                          edge=\"start\"\n                          name=\"transporter\"\n                          onChange={handleChange}\n                          value={values.transporter}\n                        />\n                      </Grid>\n                    </Grid>\n                    <Box mt={2}>\n                      <Grid container spacing={3}>\n                        <Grid item>\n                          <Button\n                            variant=\"contained\"\n                            color=\"secondary\"\n                            type=\"submit\"\n                            disabled={isSubmitting}\n                          >\n                            Create Party\n                          </Button>\n                        </Grid>\n                        <Grid item>\n                          <Button\n                            variant=\"contained\"\n                            color=\"secondary\"\n                            onClick={handleClose}\n                          >\n                            Cancel\n                          </Button>\n                        </Grid>\n                      </Grid>\n                    </Box>\n                  </CardContent>\n                </Card>\n              </form>\n            )}\n          </Formik>\n        </form>\n      </Dialog>\n    </React.Fragment>\n  );\n};\nexport default FreeSoloCreateOptionDialog;\n"]},"metadata":{},"sourceType":"module"}