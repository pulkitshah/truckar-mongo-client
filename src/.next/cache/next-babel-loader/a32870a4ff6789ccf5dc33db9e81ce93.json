{"ast":null,"code":"import _regeneratorRuntime from \"/Users/pulkitshah/Desktop/truckarv2/node_modules/next/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/pulkitshah/Desktop/truckarv2/node_modules/next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/pulkitshah/Desktop/truckarv2/node_modules/next/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/pulkitshah/Desktop/truckarv2/node_modules/next/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { API } from \"aws-amplify\";\nimport { organisationsByUser } from \"../graphql/queries\";\nimport { createOrganisation as _createOrganisation, updateOrganisation } from \"../graphql/mutations\";\nimport { Organisation } from \"../models\";\nimport { DataStore, Predicates } from \"@aws-amplify/datastore\";\nvar now = new Date();\n\nvar OrganisationApi = /*#__PURE__*/function () {\n  function OrganisationApi() {\n    _classCallCheck(this, OrganisationApi);\n  }\n\n  _createClass(OrganisationApi, [{\n    key: \"getOrganisationsByUser\",\n    value: function () {\n      var _getOrganisationsByUser = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(user) {\n        var organisationesDB;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return API.graphql({\n                  query: organisationsByUser,\n                  variables: {\n                    user: user.id.toString()\n                  }\n                });\n\n              case 2:\n                organisationesDB = _context.sent;\n                return _context.abrupt(\"return\", organisationesDB);\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      function getOrganisationsByUser(_x) {\n        return _getOrganisationsByUser.apply(this, arguments);\n      }\n\n      return getOrganisationsByUser;\n    }()\n  }, {\n    key: \"createOrganisation\",\n    value: function () {\n      var _createOrganisation2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(newOrganisation) {\n        var response, response2;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return DataStore.save(new Organisation(newOrganisation));\n\n              case 2:\n                response = _context2.sent;\n                _context2.next = 5;\n                return API.graphql({\n                  query: _createOrganisation,\n                  variables: {\n                    input: newOrganisation\n                  },\n                  authMode: \"AMAZON_COGNITO_USER_POOLS\"\n                });\n\n              case 5:\n                response2 = _context2.sent;\n                console.log(repsonse2);\n                return _context2.abrupt(\"return\", response);\n\n              case 8:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      function createOrganisation(_x2) {\n        return _createOrganisation2.apply(this, arguments);\n      }\n\n      return createOrganisation;\n    }()\n  }, {\n    key: \"editOrganisation\",\n    value: function () {\n      var _editOrganisation = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(editedOrganisation) {\n        var response;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.next = 2;\n                return API.graphql({\n                  query: updateOrganisation,\n                  variables: {\n                    input: editedOrganisation\n                  },\n                  authMode: \"AMAZON_COGNITO_USER_POOLS\"\n                });\n\n              case 2:\n                response = _context3.sent;\n                return _context3.abrupt(\"return\", response);\n\n              case 4:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      }));\n\n      function editOrganisation(_x3) {\n        return _editOrganisation.apply(this, arguments);\n      }\n\n      return editOrganisation;\n    }()\n  }]);\n\n  return OrganisationApi;\n}();\n\nexport var organisationApi = new OrganisationApi();","map":{"version":3,"sources":["/Users/pulkitshah/Desktop/truckarv2/renderer/api/organisation-api.js"],"names":["API","organisationsByUser","createOrganisation","updateOrganisation","Organisation","DataStore","Predicates","now","Date","OrganisationApi","user","graphql","query","variables","id","toString","organisationesDB","newOrganisation","save","response","input","authMode","response2","console","log","repsonse2","editedOrganisation","organisationApi"],"mappings":";;;;AAAA,SAASA,GAAT,QAAoB,aAApB;AACA,SAASC,mBAAT,QAAoC,oBAApC;AACA,SAASC,kBAAkB,IAAlBA,mBAAT,EAA6BC,kBAA7B,QAAuD,sBAAvD;AACA,SAASC,YAAT,QAA6B,WAA7B;AACA,SAASC,SAAT,EAAoBC,UAApB,QAAsC,wBAAtC;AAEA,IAAMC,GAAG,GAAG,IAAIC,IAAJ,EAAZ;;IAEMC,e;;;;;;;;8GACyBC,I;;;;;;;uBACIV,GAAG,CAACW,OAAJ,CAAY;AACzCC,kBAAAA,KAAK,EAAEX,mBADkC;AAEzCY,kBAAAA,SAAS,EAAE;AAAEH,oBAAAA,IAAI,EAAEA,IAAI,CAACI,EAAL,CAAQC,QAAR;AAAR;AAF8B,iBAAZ,C;;;AAAzBC,gBAAAA,gB;iDAICA,gB;;;;;;;;;;;;;;;;;;;4GAGgBC,e;;;;;;;uBACAZ,SAAS,CAACa,IAAV,CAAe,IAAId,YAAJ,CAAiBa,eAAjB,CAAf,C;;;AAAjBE,gBAAAA,Q;;uBACkBnB,GAAG,CAACW,OAAJ,CAAY;AAClCC,kBAAAA,KAAK,EAAEV,mBAD2B;AAElCW,kBAAAA,SAAS,EAAE;AAAEO,oBAAAA,KAAK,EAAEH;AAAT,mBAFuB;AAGlCI,kBAAAA,QAAQ,EAAE;AAHwB,iBAAZ,C;;;AAAlBC,gBAAAA,S;AAKNC,gBAAAA,OAAO,CAACC,GAAR,CAAYC,SAAZ;kDACON,Q;;;;;;;;;;;;;;;;;;;yGAGcO,kB;;;;;;;uBACE1B,GAAG,CAACW,OAAJ,CAAY;AACjCC,kBAAAA,KAAK,EAAET,kBAD0B;AAEjCU,kBAAAA,SAAS,EAAE;AAAEO,oBAAAA,KAAK,EAAEM;AAAT,mBAFsB;AAGjCL,kBAAAA,QAAQ,EAAE;AAHuB,iBAAZ,C;;;AAAjBF,gBAAAA,Q;kDAKCA,Q;;;;;;;;;;;;;;;;;;;;;AAIX,OAAO,IAAMQ,eAAe,GAAG,IAAIlB,eAAJ,EAAxB","sourcesContent":["import { API } from \"aws-amplify\";\nimport { organisationsByUser } from \"../graphql/queries\";\nimport { createOrganisation, updateOrganisation } from \"../graphql/mutations\";\nimport { Organisation } from \"../models\";\nimport { DataStore, Predicates } from \"@aws-amplify/datastore\";\n\nconst now = new Date();\n\nclass OrganisationApi {\n  async getOrganisationsByUser(user) {\n    const organisationesDB = await API.graphql({\n      query: organisationsByUser,\n      variables: { user: user.id.toString() },\n    });\n    return organisationesDB;\n  }\n\n  async createOrganisation(newOrganisation) {\n    const response = await DataStore.save(new Organisation(newOrganisation));\n    const response2 = await API.graphql({\n      query: createOrganisation,\n      variables: { input: newOrganisation },\n      authMode: \"AMAZON_COGNITO_USER_POOLS\",\n    });\n    console.log(repsonse2);\n    return response;\n  }\n\n  async editOrganisation(editedOrganisation) {\n    const response = await API.graphql({\n      query: updateOrganisation,\n      variables: { input: editedOrganisation },\n      authMode: \"AMAZON_COGNITO_USER_POOLS\",\n    });\n    return response;\n  }\n}\n\nexport const organisationApi = new OrganisationApi();\n"]},"metadata":{},"sourceType":"module"}