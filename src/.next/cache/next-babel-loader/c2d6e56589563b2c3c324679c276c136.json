{"ast":null,"code":"import { API } from \"aws-amplify\";\nimport { organisationsByUser } from \"../graphql/queries\";\nimport { createOrganisation, updateOrganisation } from \"../graphql/mutations\";\nimport { Organisation } from \"../models\";\nimport { DataStore, Predicates } from \"@aws-amplify/datastore\";\nimport moment from \"moment\";\nimport { slice } from \"../slices/organisations\";\nconst now = new Date();\n\nclass OrganisationApi {\n  async getOrganisationsByUser(user, dispatch) {\n    try {\n      //////////////////////// GraphQL API ////////////////////////\n      // const response = await API.graphql({\n      //   query: organisationsByUser,\n      //   variables: { user: user.id.toString() },\n      // });\n      // const organisations = response.data.organisationsByUser.items\n      //////////////////////// GraphQL API ////////////////////////\n      //////////////////////// DataStore API ////////////////////////\n      const organisations = await DataStore.query(Organisation, c => c.user(\"eq\", user.id)); //////////////////////// DataStore API ////////////////////////\n      // console.log(organisationesDB);\n      // Dispatch - Reducer\n\n      dispatch(slice.actions.getOrganisations(organisations));\n      return organisations;\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  async createOrganisation(newOrganisation, dispatch) {\n    const createdAt = moment().toISOString();\n    let newOrg = newOrganisation;\n    newOrg.createdAt = createdAt; //////////////////////// GraphQL API ////////////////////////\n\n    const response = await API.graphql({\n      query: createOrganisation,\n      variables: {\n        input: newOrg\n      },\n      authMode: \"AMAZON_COGNITO_USER_POOLS\"\n    });\n    const organisation = response.data.createOrganisation; //////////////////////// GraphQL API ////////////////////////\n    //////////////////////// DataStore API ////////////////////////\n    // const organisation = await DataStore.save(new Organisation(newOrg));\n    //////////////////////// DataStore API ////////////////////////\n    // console.log(organisation);\n    // Dispatch - Reducer\n\n    dispatch(slice.actions.createOrganisation(organisation));\n    return organisation;\n  }\n\n  async updateOrganisation(editedOrganisation, dispatch) {\n    //////////////////////// GraphQL API ////////////////////////\n    const response = await API.graphql({\n      query: updateOrganisation,\n      variables: {\n        input: editedOrganisation\n      },\n      authMode: \"AMAZON_COGNITO_USER_POOLS\"\n    });\n    const organisation = response.data.updateOrganisation; //////////////////////// GraphQL API ////////////////////////\n\n    dispatch(slice.actions.updateOrganisation({\n      organisation\n    }));\n    return response;\n  }\n\n}\n\nexport const organisationApi = new OrganisationApi();","map":{"version":3,"sources":["/Users/pulkitshah/Desktop/truckarv2/renderer/api/organisation-api.js"],"names":["API","organisationsByUser","createOrganisation","updateOrganisation","Organisation","DataStore","Predicates","moment","slice","now","Date","OrganisationApi","getOrganisationsByUser","user","dispatch","organisations","query","c","id","actions","getOrganisations","error","console","log","newOrganisation","createdAt","toISOString","newOrg","response","graphql","variables","input","authMode","organisation","data","editedOrganisation","organisationApi"],"mappings":"AAAA,SAASA,GAAT,QAAoB,aAApB;AACA,SAASC,mBAAT,QAAoC,oBAApC;AACA,SAASC,kBAAT,EAA6BC,kBAA7B,QAAuD,sBAAvD;AACA,SAASC,YAAT,QAA6B,WAA7B;AACA,SAASC,SAAT,EAAoBC,UAApB,QAAsC,wBAAtC;AACA,OAAOC,MAAP,MAAmB,QAAnB;AACA,SAASC,KAAT,QAAsB,yBAAtB;AAEA,MAAMC,GAAG,GAAG,IAAIC,IAAJ,EAAZ;;AAEA,MAAMC,eAAN,CAAsB;AACpB,QAAMC,sBAAN,CAA6BC,IAA7B,EAAmCC,QAAnC,EAA6C;AAC3C,QAAI;AACF;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA,YAAMC,aAAa,GAAG,MAAMV,SAAS,CAACW,KAAV,CAAgBZ,YAAhB,EAA+Ba,CAAD,IACxDA,CAAC,CAACJ,IAAF,CAAO,IAAP,EAAaA,IAAI,CAACK,EAAlB,CAD0B,CAA5B,CAbE,CAiBF;AAEA;AAEA;;AAEAJ,MAAAA,QAAQ,CAACN,KAAK,CAACW,OAAN,CAAcC,gBAAd,CAA+BL,aAA/B,CAAD,CAAR;AAEA,aAAOA,aAAP;AACD,KA1BD,CA0BE,OAAOM,KAAP,EAAc;AACdC,MAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACD;AACF;;AAED,QAAMnB,kBAAN,CAAyBsB,eAAzB,EAA0CV,QAA1C,EAAoD;AAClD,UAAMW,SAAS,GAAGlB,MAAM,GAAGmB,WAAT,EAAlB;AACA,QAAIC,MAAM,GAAGH,eAAb;AACAG,IAAAA,MAAM,CAACF,SAAP,GAAmBA,SAAnB,CAHkD,CAKlD;;AAEA,UAAMG,QAAQ,GAAG,MAAM5B,GAAG,CAAC6B,OAAJ,CAAY;AACjCb,MAAAA,KAAK,EAAEd,kBAD0B;AAEjC4B,MAAAA,SAAS,EAAE;AAAEC,QAAAA,KAAK,EAAEJ;AAAT,OAFsB;AAGjCK,MAAAA,QAAQ,EAAE;AAHuB,KAAZ,CAAvB;AAMA,UAAMC,YAAY,GAAGL,QAAQ,CAACM,IAAT,CAAchC,kBAAnC,CAbkD,CAelD;AAEA;AAEA;AAEA;AAEA;AAEA;;AAEAY,IAAAA,QAAQ,CAACN,KAAK,CAACW,OAAN,CAAcjB,kBAAd,CAAiC+B,YAAjC,CAAD,CAAR;AAEA,WAAOA,YAAP;AACD;;AAED,QAAM9B,kBAAN,CAAyBgC,kBAAzB,EAA6CrB,QAA7C,EAAuD;AACrD;AAEA,UAAMc,QAAQ,GAAG,MAAM5B,GAAG,CAAC6B,OAAJ,CAAY;AACjCb,MAAAA,KAAK,EAAEb,kBAD0B;AAEjC2B,MAAAA,SAAS,EAAE;AAAEC,QAAAA,KAAK,EAAEI;AAAT,OAFsB;AAGjCH,MAAAA,QAAQ,EAAE;AAHuB,KAAZ,CAAvB;AAMA,UAAMC,YAAY,GAAGL,QAAQ,CAACM,IAAT,CAAc/B,kBAAnC,CATqD,CAWrD;;AAEAW,IAAAA,QAAQ,CAACN,KAAK,CAACW,OAAN,CAAchB,kBAAd,CAAiC;AAAE8B,MAAAA;AAAF,KAAjC,CAAD,CAAR;AAEA,WAAOL,QAAP;AACD;;AAjFmB;;AAoFtB,OAAO,MAAMQ,eAAe,GAAG,IAAIzB,eAAJ,EAAxB","sourcesContent":["import { API } from \"aws-amplify\";\nimport { organisationsByUser } from \"../graphql/queries\";\nimport { createOrganisation, updateOrganisation } from \"../graphql/mutations\";\nimport { Organisation } from \"../models\";\nimport { DataStore, Predicates } from \"@aws-amplify/datastore\";\nimport moment from \"moment\";\nimport { slice } from \"../slices/organisations\";\n\nconst now = new Date();\n\nclass OrganisationApi {\n  async getOrganisationsByUser(user, dispatch) {\n    try {\n      //////////////////////// GraphQL API ////////////////////////\n\n      // const response = await API.graphql({\n      //   query: organisationsByUser,\n      //   variables: { user: user.id.toString() },\n      // });\n      // const organisations = response.data.organisationsByUser.items\n\n      //////////////////////// GraphQL API ////////////////////////\n\n      //////////////////////// DataStore API ////////////////////////\n\n      const organisations = await DataStore.query(Organisation, (c) =>\n        c.user(\"eq\", user.id)\n      );\n\n      //////////////////////// DataStore API ////////////////////////\n\n      // console.log(organisationesDB);\n\n      // Dispatch - Reducer\n\n      dispatch(slice.actions.getOrganisations(organisations));\n\n      return organisations;\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  async createOrganisation(newOrganisation, dispatch) {\n    const createdAt = moment().toISOString();\n    let newOrg = newOrganisation;\n    newOrg.createdAt = createdAt;\n\n    //////////////////////// GraphQL API ////////////////////////\n\n    const response = await API.graphql({\n      query: createOrganisation,\n      variables: { input: newOrg },\n      authMode: \"AMAZON_COGNITO_USER_POOLS\",\n    });\n\n    const organisation = response.data.createOrganisation;\n\n    //////////////////////// GraphQL API ////////////////////////\n\n    //////////////////////// DataStore API ////////////////////////\n\n    // const organisation = await DataStore.save(new Organisation(newOrg));\n\n    //////////////////////// DataStore API ////////////////////////\n\n    // console.log(organisation);\n\n    // Dispatch - Reducer\n\n    dispatch(slice.actions.createOrganisation(organisation));\n\n    return organisation;\n  }\n\n  async updateOrganisation(editedOrganisation, dispatch) {\n    //////////////////////// GraphQL API ////////////////////////\n\n    const response = await API.graphql({\n      query: updateOrganisation,\n      variables: { input: editedOrganisation },\n      authMode: \"AMAZON_COGNITO_USER_POOLS\",\n    });\n\n    const organisation = response.data.updateOrganisation;\n\n    //////////////////////// GraphQL API ////////////////////////\n\n    dispatch(slice.actions.updateOrganisation({ organisation }));\n\n    return response;\n  }\n}\n\nexport const organisationApi = new OrganisationApi();\n"]},"metadata":{},"sourceType":"module"}