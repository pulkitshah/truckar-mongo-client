{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { API } from \"aws-amplify\";\nimport { addressesByUser } from \"../graphql/queries\";\nimport { createAddress, updateAddress } from \"../graphql/mutations\";\nimport { Address } from \"../models\";\nimport { DataStore, Predicates } from \"@aws-amplify/datastore\";\nimport moment from \"moment\";\nimport { slice } from \"../slices/addresses\";\nconst now = new Date();\n\nclass AddressApi {\n  async getAddressesByUser(user, party, dispatch) {\n    try {\n      //////////////////////// GraphQL API ////////////////////////\n      const response = await API.graphql({\n        query: addressesByUser,\n        variables: {\n          and: [{\n            user: user.id.toString()\n          }, {\n            partyId: party.id\n          }]\n        }\n      });\n      const addresses = response.data.addressesByUser.items; //////////////////////// GraphQL API ////////////////////////\n      //////////////////////// DataStore API ////////////////////////\n      // const addresses = await DataStore.query(\n      //   Address,\n      //   (c) => c.user(\"eq\", user.id) && c.party(\"eq\", party)\n      // );\n      //////////////////////// DataStore API ////////////////////////\n\n      console.log(addresses); // Dispatch - Reducer\n\n      dispatch(slice.actions.getAddresses(addresses));\n      return addresses;\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  async createAddress(createdAddress, dispatch) {\n    const createdAt = moment().toISOString();\n\n    let newAddress = _objectSpread({}, createdAddress);\n\n    newAddress.createdAt = createdAt;\n    console.log(newAddress); //////////////////////// GraphQL API ////////////////////////\n\n    const response = await API.graphql({\n      query: createAddress,\n      variables: {\n        input: newAddress\n      },\n      authMode: \"AMAZON_COGNITO_USER_POOLS\"\n    });\n    const address = response.data.createAddress; //////////////////////// GraphQL API ////////////////////////\n    //////////////////////// DataStore API ////////////////////////\n    // const address = await DataStore.save(new Address(newAddress));\n    //////////////////////// DataStore API ////////////////////////\n    // console.log(address);\n    // Dispatch - Reducer\n\n    dispatch(slice.actions.createAddress({\n      address\n    }));\n    return address;\n  }\n\n  async updateAddress(editedAddress, dispatch) {\n    //////////////////////// GraphQL API ////////////////////////\n    const response = await API.graphql({\n      query: updateAddress,\n      variables: {\n        input: editedAddress\n      },\n      authMode: \"AMAZON_COGNITO_USER_POOLS\"\n    });\n    const address = response.data.updateAddress; //////////////////////// GraphQL API ////////////////////////\n    // console.log(address);\n    // Dispatch - Reducer\n\n    dispatch(slice.actions.updateAddress({\n      address\n    }));\n    return response;\n  }\n\n}\n\nexport const addressApi = new AddressApi();","map":{"version":3,"sources":["/Users/pulkitshah/Desktop/truckarv2/renderer/api/address-api.js"],"names":["API","addressesByUser","createAddress","updateAddress","Address","DataStore","Predicates","moment","slice","now","Date","AddressApi","getAddressesByUser","user","party","dispatch","response","graphql","query","variables","and","id","toString","partyId","addresses","data","items","console","log","actions","getAddresses","error","createdAddress","createdAt","toISOString","newAddress","input","authMode","address","editedAddress","addressApi"],"mappings":"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","sourcesContent":["import { API } from \"aws-amplify\";\nimport { addressesByUser } from \"../graphql/queries\";\nimport { createAddress, updateAddress } from \"../graphql/mutations\";\nimport { Address } from \"../models\";\nimport { DataStore, Predicates } from \"@aws-amplify/datastore\";\nimport moment from \"moment\";\nimport { slice } from \"../slices/addresses\";\n\nconst now = new Date();\n\nclass AddressApi {\n  async getAddressesByUser(user, party, dispatch) {\n    try {\n      //////////////////////// GraphQL API ////////////////////////\n\n      const response = await API.graphql({\n        query: addressesByUser,\n        variables: {\n          and: [{ user: user.id.toString() }, { partyId: party.id }],\n        },\n      });\n      const addresses = response.data.addressesByUser.items;\n\n      //////////////////////// GraphQL API ////////////////////////\n\n      //////////////////////// DataStore API ////////////////////////\n\n      // const addresses = await DataStore.query(\n      //   Address,\n      //   (c) => c.user(\"eq\", user.id) && c.party(\"eq\", party)\n      // );\n\n      //////////////////////// DataStore API ////////////////////////\n\n      console.log(addresses);\n\n      // Dispatch - Reducer\n\n      dispatch(slice.actions.getAddresses(addresses));\n\n      return addresses;\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  async createAddress(createdAddress, dispatch) {\n    const createdAt = moment().toISOString();\n    let newAddress = { ...createdAddress };\n    newAddress.createdAt = createdAt;\n\n    console.log(newAddress);\n\n    //////////////////////// GraphQL API ////////////////////////\n\n    const response = await API.graphql({\n      query: createAddress,\n      variables: { input: newAddress },\n      authMode: \"AMAZON_COGNITO_USER_POOLS\",\n    });\n\n    const address = response.data.createAddress;\n\n    //////////////////////// GraphQL API ////////////////////////\n\n    //////////////////////// DataStore API ////////////////////////\n\n    // const address = await DataStore.save(new Address(newAddress));\n\n    //////////////////////// DataStore API ////////////////////////\n\n    // console.log(address);\n\n    // Dispatch - Reducer\n\n    dispatch(slice.actions.createAddress({ address }));\n\n    return address;\n  }\n\n  async updateAddress(editedAddress, dispatch) {\n    //////////////////////// GraphQL API ////////////////////////\n\n    const response = await API.graphql({\n      query: updateAddress,\n      variables: { input: editedAddress },\n      authMode: \"AMAZON_COGNITO_USER_POOLS\",\n    });\n\n    const address = response.data.updateAddress;\n\n    //////////////////////// GraphQL API ////////////////////////\n\n    // console.log(address);\n\n    // Dispatch - Reducer\n\n    dispatch(slice.actions.updateAddress({ address }));\n\n    return response;\n  }\n}\n\nexport const addressApi = new AddressApi();\n"]},"metadata":{},"sourceType":"module"}