{"ast":null,"code":"import _defineProperty from \"/Users/pulkitshah/Desktop/truckarv2/node_modules/next/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _regeneratorRuntime from \"/Users/pulkitshah/Desktop/truckarv2/node_modules/next/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/pulkitshah/Desktop/truckarv2/node_modules/next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/pulkitshah/Desktop/truckarv2/node_modules/next/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/pulkitshah/Desktop/truckarv2/node_modules/next/node_modules/@babel/runtime/helpers/esm/createClass\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { API } from \"aws-amplify\";\nimport { partiesByUser } from \"../graphql/queries\";\nimport { createParty as _createParty, updateParty as _updateParty } from \"../graphql/mutations\";\nimport { Party } from \"../models\";\nimport { DataStore, Predicates } from \"@aws-amplify/datastore\";\nimport moment from \"moment\";\nimport { slice } from \"../slices/parties\";\nvar now = new Date();\n\nvar PartyApi = /*#__PURE__*/function () {\n  function PartyApi() {\n    _classCallCheck(this, PartyApi);\n  }\n\n  _createClass(PartyApi, [{\n    key: \"getPartiesByUser\",\n    value: function () {\n      var _getPartiesByUser = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(user, dispatch) {\n        var parties;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.prev = 0;\n                _context.next = 3;\n                return DataStore.query(Party, function (c) {\n                  return c.user(\"eq\", user.id);\n                });\n\n              case 3:\n                parties = _context.sent;\n                //////////////////////// DataStore API ////////////////////////\n                // console.log(partyesDB);\n                // Dispatch - Reducer\n                dispatch(slice.actions.getParties(parties));\n                return _context.abrupt(\"return\", parties);\n\n              case 8:\n                _context.prev = 8;\n                _context.t0 = _context[\"catch\"](0);\n                console.log(_context.t0);\n\n              case 11:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, null, [[0, 8]]);\n      }));\n\n      function getPartiesByUser(_x, _x2) {\n        return _getPartiesByUser.apply(this, arguments);\n      }\n\n      return getPartiesByUser;\n    }()\n  }, {\n    key: \"createParty\",\n    value: function () {\n      var _createParty2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(createdParty, dispatch) {\n        var createdAt, newParty, response, party;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                createdAt = moment().toISOString();\n                newParty = createdParty;\n                newParty.createdAt = createdAt; //////////////////////// GraphQL API ////////////////////////\n\n                _context2.next = 5;\n                return API.graphql({\n                  query: _createParty,\n                  variables: {\n                    input: newParty\n                  },\n                  authMode: \"AMAZON_COGNITO_USER_POOLS\"\n                });\n\n              case 5:\n                response = _context2.sent;\n                party = response.data.createParty; //////////////////////// GraphQL API ////////////////////////\n                //////////////////////// DataStore API ////////////////////////\n                // const party = await DataStore.save(new Party(newParty));\n                //////////////////////// DataStore API ////////////////////////\n                // console.log(party);\n                // Dispatch - Reducer\n\n                dispatch(slice.actions.createParty({\n                  party: party\n                }));\n                return _context2.abrupt(\"return\", party);\n\n              case 9:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      function createParty(_x3, _x4) {\n        return _createParty2.apply(this, arguments);\n      }\n\n      return createParty;\n    }()\n  }, {\n    key: \"updateParty\",\n    value: function () {\n      var _updateParty2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(editedParty, dispatch) {\n        var response, party;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.next = 2;\n                return API.graphql({\n                  query: _updateParty,\n                  variables: {\n                    input: editedParty\n                  },\n                  authMode: \"AMAZON_COGNITO_USER_POOLS\"\n                });\n\n              case 2:\n                response = _context3.sent;\n                party = response.data.updateParty; //////////////////////// GraphQL API ////////////////////////\n                // console.log(party);\n                // Dispatch - Reducer\n\n                dispatch(slice.actions.updateParty({\n                  party: party\n                }));\n                return _context3.abrupt(\"return\", response);\n\n              case 6:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      }));\n\n      function updateParty(_x5, _x6) {\n        return _updateParty2.apply(this, arguments);\n      }\n\n      return updateParty;\n    }()\n  }, {\n    key: \"createPartyAddress\",\n    value: function () {\n      var _createPartyAddress = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(party, createdAddress, dispatch) {\n        var createdAt, newAddress, newParty;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                createdAt = moment().toISOString();\n                newAddress = createdAddress;\n                newAddress.createdAt = createdAt;\n                console.log(newAddress);\n                newParty = party;\n                console.log(Boolean(newParty.address));\n\n                if (newParty.address) {\n                  newParty.address = _objectSpread(_objectSpread({}, party.address), {}, {\n                    newAddress: newAddress\n                  });\n                } else {\n                  newParty.address = {\n                    newAddress: newAddress\n                  };\n                }\n\n                console.log(newParty);\n                return _context4.abrupt(\"return\", party);\n\n              case 9:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4);\n      }));\n\n      function createPartyAddress(_x7, _x8, _x9) {\n        return _createPartyAddress.apply(this, arguments);\n      }\n\n      return createPartyAddress;\n    }()\n  }]);\n\n  return PartyApi;\n}();\n\nexport var partyApi = new PartyApi();","map":{"version":3,"sources":["/Users/pulkitshah/Desktop/truckarv2/renderer/api/party-api.js"],"names":["API","partiesByUser","createParty","updateParty","Party","DataStore","Predicates","moment","slice","now","Date","PartyApi","user","dispatch","query","c","id","parties","actions","getParties","console","log","createdParty","createdAt","toISOString","newParty","graphql","variables","input","authMode","response","party","data","editedParty","createdAddress","newAddress","Boolean","address","partyApi"],"mappings":";;;;;;;;;;AAAA,SAASA,GAAT,QAAoB,aAApB;AACA,SAASC,aAAT,QAA8B,oBAA9B;AACA,SAASC,WAAW,IAAXA,YAAT,EAAsBC,WAAW,IAAXA,YAAtB,QAAyC,sBAAzC;AACA,SAASC,KAAT,QAAsB,WAAtB;AACA,SAASC,SAAT,EAAoBC,UAApB,QAAsC,wBAAtC;AACA,OAAOC,MAAP,MAAmB,QAAnB;AACA,SAASC,KAAT,QAAsB,mBAAtB;AAEA,IAAMC,GAAG,GAAG,IAAIC,IAAJ,EAAZ;;IAEMC,Q;;;;;;;;wGACmBC,I,EAAMC,Q;;;;;;;;uBAcHR,SAAS,CAACS,KAAV,CAAgBV,KAAhB,EAAuB,UAACW,CAAD;AAAA,yBAC3CA,CAAC,CAACH,IAAF,CAAO,IAAP,EAAaA,IAAI,CAACI,EAAlB,CAD2C;AAAA,iBAAvB,C;;;AAAhBC,gBAAAA,O;AAIN;AAEA;AAEA;AAEAJ,gBAAAA,QAAQ,CAACL,KAAK,CAACU,OAAN,CAAcC,UAAd,CAAyBF,OAAzB,CAAD,CAAR;iDAEOA,O;;;;;AAEPG,gBAAAA,OAAO,CAACC,GAAR;;;;;;;;;;;;;;;;;;;qGAIcC,Y,EAAcT,Q;;;;;;AACxBU,gBAAAA,S,GAAYhB,MAAM,GAAGiB,WAAT,E;AACdC,gBAAAA,Q,GAAWH,Y;AACfG,gBAAAA,QAAQ,CAACF,SAAT,GAAqBA,SAArB,C,CAEA;;;uBAEuBvB,GAAG,CAAC0B,OAAJ,CAAY;AACjCZ,kBAAAA,KAAK,EAAEZ,YAD0B;AAEjCyB,kBAAAA,SAAS,EAAE;AAAEC,oBAAAA,KAAK,EAAEH;AAAT,mBAFsB;AAGjCI,kBAAAA,QAAQ,EAAE;AAHuB,iBAAZ,C;;;AAAjBC,gBAAAA,Q;AAMAC,gBAAAA,K,GAAQD,QAAQ,CAACE,IAAT,CAAc9B,W,EAE5B;AAEA;AAEA;AAEA;AAEA;AAEA;;AAEAW,gBAAAA,QAAQ,CAACL,KAAK,CAACU,OAAN,CAAchB,WAAd,CAA0B;AAAE6B,kBAAAA,KAAK,EAALA;AAAF,iBAA1B,CAAD,CAAR;kDAEOA,K;;;;;;;;;;;;;;;;;;;qGAGSE,W,EAAapB,Q;;;;;;;uBAGNb,GAAG,CAAC0B,OAAJ,CAAY;AACjCZ,kBAAAA,KAAK,EAAEX,YAD0B;AAEjCwB,kBAAAA,SAAS,EAAE;AAAEC,oBAAAA,KAAK,EAAEK;AAAT,mBAFsB;AAGjCJ,kBAAAA,QAAQ,EAAE;AAHuB,iBAAZ,C;;;AAAjBC,gBAAAA,Q;AAMAC,gBAAAA,K,GAAQD,QAAQ,CAACE,IAAT,CAAc7B,W,EAE5B;AAEA;AAEA;;AAEAU,gBAAAA,QAAQ,CAACL,KAAK,CAACU,OAAN,CAAcf,WAAd,CAA0B;AAAE4B,kBAAAA,KAAK,EAALA;AAAF,iBAA1B,CAAD,CAAR;kDAEOD,Q;;;;;;;;;;;;;;;;;;;2GAGgBC,K,EAAOG,c,EAAgBrB,Q;;;;;;AACxCU,gBAAAA,S,GAAYhB,MAAM,GAAGiB,WAAT,E;AACdW,gBAAAA,U,GAAaD,c;AACjBC,gBAAAA,UAAU,CAACZ,SAAX,GAAuBA,SAAvB;AAEAH,gBAAAA,OAAO,CAACC,GAAR,CAAYc,UAAZ;AAEIV,gBAAAA,Q,GAAWM,K;AACfX,gBAAAA,OAAO,CAACC,GAAR,CAAYe,OAAO,CAACX,QAAQ,CAACY,OAAV,CAAnB;;AAEA,oBAAIZ,QAAQ,CAACY,OAAb,EAAsB;AACpBZ,kBAAAA,QAAQ,CAACY,OAAT,mCAAwBN,KAAK,CAACM,OAA9B;AAAuCF,oBAAAA,UAAU,EAAVA;AAAvC;AACD,iBAFD,MAEO;AACLV,kBAAAA,QAAQ,CAACY,OAAT,GAAmB;AAAEF,oBAAAA,UAAU,EAAVA;AAAF,mBAAnB;AACD;;AACDf,gBAAAA,OAAO,CAACC,GAAR,CAAYI,QAAZ;kDAEOM,K;;;;;;;;;;;;;;;;;;;;;AAIX,OAAO,IAAMO,QAAQ,GAAG,IAAI3B,QAAJ,EAAjB","sourcesContent":["import { API } from \"aws-amplify\";\nimport { partiesByUser } from \"../graphql/queries\";\nimport { createParty, updateParty } from \"../graphql/mutations\";\nimport { Party } from \"../models\";\nimport { DataStore, Predicates } from \"@aws-amplify/datastore\";\nimport moment from \"moment\";\nimport { slice } from \"../slices/parties\";\n\nconst now = new Date();\n\nclass PartyApi {\n  async getPartiesByUser(user, dispatch) {\n    try {\n      //////////////////////// GraphQL API ////////////////////////\n\n      // const response = await API.graphql({\n      //   query: partiesByUser,\n      //   variables: { user: user.id.toString() },\n      // });\n      // const parties = response.data.partiesByUser.items\n\n      //////////////////////// GraphQL API ////////////////////////\n\n      //////////////////////// DataStore API ////////////////////////\n\n      const parties = await DataStore.query(Party, (c) =>\n        c.user(\"eq\", user.id)\n      );\n\n      //////////////////////// DataStore API ////////////////////////\n\n      // console.log(partyesDB);\n\n      // Dispatch - Reducer\n\n      dispatch(slice.actions.getParties(parties));\n\n      return parties;\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  async createParty(createdParty, dispatch) {\n    const createdAt = moment().toISOString();\n    let newParty = createdParty;\n    newParty.createdAt = createdAt;\n\n    //////////////////////// GraphQL API ////////////////////////\n\n    const response = await API.graphql({\n      query: createParty,\n      variables: { input: newParty },\n      authMode: \"AMAZON_COGNITO_USER_POOLS\",\n    });\n\n    const party = response.data.createParty;\n\n    //////////////////////// GraphQL API ////////////////////////\n\n    //////////////////////// DataStore API ////////////////////////\n\n    // const party = await DataStore.save(new Party(newParty));\n\n    //////////////////////// DataStore API ////////////////////////\n\n    // console.log(party);\n\n    // Dispatch - Reducer\n\n    dispatch(slice.actions.createParty({ party }));\n\n    return party;\n  }\n\n  async updateParty(editedParty, dispatch) {\n    //////////////////////// GraphQL API ////////////////////////\n\n    const response = await API.graphql({\n      query: updateParty,\n      variables: { input: editedParty },\n      authMode: \"AMAZON_COGNITO_USER_POOLS\",\n    });\n\n    const party = response.data.updateParty;\n\n    //////////////////////// GraphQL API ////////////////////////\n\n    // console.log(party);\n\n    // Dispatch - Reducer\n\n    dispatch(slice.actions.updateParty({ party }));\n\n    return response;\n  }\n\n  async createPartyAddress(party, createdAddress, dispatch) {\n    const createdAt = moment().toISOString();\n    let newAddress = createdAddress;\n    newAddress.createdAt = createdAt;\n\n    console.log(newAddress);\n\n    let newParty = party;\n    console.log(Boolean(newParty.address));\n\n    if (newParty.address) {\n      newParty.address = { ...party.address, newAddress };\n    } else {\n      newParty.address = { newAddress };\n    }\n    console.log(newParty);\n\n    return party;\n  }\n}\n\nexport const partyApi = new PartyApi();\n"]},"metadata":{},"sourceType":"module"}