{"ast":null,"code":"import _regeneratorRuntime from \"/Users/pulkitshah/Desktop/truckarv2/node_modules/next/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/pulkitshah/Desktop/truckarv2/node_modules/next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/pulkitshah/Desktop/truckarv2/node_modules/next/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/pulkitshah/Desktop/truckarv2/node_modules/next/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { API } from \"aws-amplify\";\nimport { vehiclesByUser } from \"../graphql/queries\";\nimport { createVehicle as _createVehicle, updateVehicle as _updateVehicle } from \"../graphql/mutations\";\nimport { Vehicle } from \"../models\";\nimport { DataStore, Predicates } from \"@aws-amplify/datastore\";\nimport moment from \"moment\";\nimport { slice } from \"../slices/vehicles\";\nvar now = new Date();\n\nvar VehicleApi = /*#__PURE__*/function () {\n  function VehicleApi() {\n    _classCallCheck(this, VehicleApi);\n  }\n\n  _createClass(VehicleApi, [{\n    key: \"getVehiclesByUser\",\n    value: function () {\n      var _getVehiclesByUser = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(user, dispatch) {\n        var response, vehicles;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.prev = 0;\n                //////////////////////// GraphQL API ////////////////////////\n                console.log(\"response\");\n                _context.next = 4;\n                return API.graphql({\n                  query: vehiclesByUser,\n                  variables: {\n                    user: user.id.toString()\n                  }\n                });\n\n              case 4:\n                response = _context.sent;\n                console.log(response);\n                vehicles = response.data.vehiclesByUser.items; //////////////////////// GraphQL API ////////////////////////\n                //////////////////////// DataStore API ////////////////////////\n                // const vehicles = await DataStore.query(Vehicle, (c) =>\n                //   c.user(\"eq\", user.id)\n                // );\n                //////////////////////// DataStore API ////////////////////////\n\n                console.log(vehicles); // Dispatch - Reducer\n\n                dispatch(slice.actions.getVehicles(vehicles));\n                return _context.abrupt(\"return\", vehicles);\n\n              case 12:\n                _context.prev = 12;\n                _context.t0 = _context[\"catch\"](0);\n                console.log(_context.t0);\n\n              case 15:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, null, [[0, 12]]);\n      }));\n\n      function getVehiclesByUser(_x, _x2) {\n        return _getVehiclesByUser.apply(this, arguments);\n      }\n\n      return getVehiclesByUser;\n    }()\n  }, {\n    key: \"createVehicle\",\n    value: function () {\n      var _createVehicle2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(newVehicle, dispatch) {\n        var createdAt, newOrg, response, vehicle;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                createdAt = moment().toISOString();\n                newOrg = newVehicle;\n                newOrg.createdAt = createdAt; //////////////////////// GraphQL API ////////////////////////\n\n                _context2.next = 5;\n                return API.graphql({\n                  query: _createVehicle,\n                  variables: {\n                    input: newOrg\n                  },\n                  authMode: \"AMAZON_COGNITO_USER_POOLS\"\n                });\n\n              case 5:\n                response = _context2.sent;\n                vehicle = response.data.createVehicle; //////////////////////// GraphQL API ////////////////////////\n                //////////////////////// DataStore API ////////////////////////\n                // const vehicle = await DataStore.save(new Vehicle(newOrg));\n                //////////////////////// DataStore API ////////////////////////\n\n                console.log(vehicle); // Dispatch - Reducer\n\n                dispatch(slice.actions.createVehicle({\n                  vehicle: vehicle\n                }));\n                return _context2.abrupt(\"return\", vehicle);\n\n              case 10:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      function createVehicle(_x3, _x4) {\n        return _createVehicle2.apply(this, arguments);\n      }\n\n      return createVehicle;\n    }()\n  }, {\n    key: \"updateVehicle\",\n    value: function () {\n      var _updateVehicle2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(editedVehicle, dispatch) {\n        var response, vehicle;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.next = 2;\n                return API.graphql({\n                  query: _updateVehicle,\n                  variables: {\n                    input: editedVehicle\n                  },\n                  authMode: \"AMAZON_COGNITO_USER_POOLS\"\n                });\n\n              case 2:\n                response = _context3.sent;\n                vehicle = response.data.updateVehicle; //////////////////////// GraphQL API ////////////////////////\n                // console.log(vehicle);\n                // Dispatch - Reducer\n\n                dispatch(slice.actions.updateVehicle({\n                  vehicle: vehicle\n                }));\n                return _context3.abrupt(\"return\", response);\n\n              case 6:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      }));\n\n      function updateVehicle(_x5, _x6) {\n        return _updateVehicle2.apply(this, arguments);\n      }\n\n      return updateVehicle;\n    }()\n  }]);\n\n  return VehicleApi;\n}();\n\nexport var vehicleApi = new VehicleApi();","map":{"version":3,"sources":["/Users/pulkitshah/Desktop/truckarv2/renderer/api/vehicle-api.js"],"names":["API","vehiclesByUser","createVehicle","updateVehicle","Vehicle","DataStore","Predicates","moment","slice","now","Date","VehicleApi","user","dispatch","console","log","graphql","query","variables","id","toString","response","vehicles","data","items","actions","getVehicles","newVehicle","createdAt","toISOString","newOrg","input","authMode","vehicle","editedVehicle","vehicleApi"],"mappings":";;;;AAAA,SAASA,GAAT,QAAoB,aAApB;AACA,SAASC,cAAT,QAA+B,oBAA/B;AACA,SAASC,aAAa,IAAbA,cAAT,EAAwBC,aAAa,IAAbA,cAAxB,QAA6C,sBAA7C;AACA,SAASC,OAAT,QAAwB,WAAxB;AACA,SAASC,SAAT,EAAoBC,UAApB,QAAsC,wBAAtC;AACA,OAAOC,MAAP,MAAmB,QAAnB;AACA,SAASC,KAAT,QAAsB,oBAAtB;AAEA,IAAMC,GAAG,GAAG,IAAIC,IAAJ,EAAZ;;IAEMC,U;;;;;;;;yGACoBC,I,EAAMC,Q;;;;;;;AAE1B;AACAC,gBAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ;;uBACuBf,GAAG,CAACgB,OAAJ,CAAY;AACjCC,kBAAAA,KAAK,EAAEhB,cAD0B;AAEjCiB,kBAAAA,SAAS,EAAE;AAAEN,oBAAAA,IAAI,EAAEA,IAAI,CAACO,EAAL,CAAQC,QAAR;AAAR;AAFsB,iBAAZ,C;;;AAAjBC,gBAAAA,Q;AAINP,gBAAAA,OAAO,CAACC,GAAR,CAAYM,QAAZ;AAEMC,gBAAAA,Q,GAAWD,QAAQ,CAACE,IAAT,CAActB,cAAd,CAA6BuB,K,EAE9C;AAEA;AAEA;AACA;AACA;AAEA;;AAEAV,gBAAAA,OAAO,CAACC,GAAR,CAAYO,QAAZ,E,CAEA;;AAEAT,gBAAAA,QAAQ,CAACL,KAAK,CAACiB,OAAN,CAAcC,WAAd,CAA0BJ,QAA1B,CAAD,CAAR;iDAEOA,Q;;;;;AAEPR,gBAAAA,OAAO,CAACC,GAAR;;;;;;;;;;;;;;;;;;;uGAIgBY,U,EAAYd,Q;;;;;;AACxBe,gBAAAA,S,GAAYrB,MAAM,GAAGsB,WAAT,E;AACdC,gBAAAA,M,GAASH,U;AACbG,gBAAAA,MAAM,CAACF,SAAP,GAAmBA,SAAnB,C,CAEA;;;uBAEuB5B,GAAG,CAACgB,OAAJ,CAAY;AACjCC,kBAAAA,KAAK,EAAEf,cAD0B;AAEjCgB,kBAAAA,SAAS,EAAE;AAAEa,oBAAAA,KAAK,EAAED;AAAT,mBAFsB;AAGjCE,kBAAAA,QAAQ,EAAE;AAHuB,iBAAZ,C;;;AAAjBX,gBAAAA,Q;AAMAY,gBAAAA,O,GAAUZ,QAAQ,CAACE,IAAT,CAAcrB,a,EAE9B;AAEA;AAEA;AAEA;;AAEAY,gBAAAA,OAAO,CAACC,GAAR,CAAYkB,OAAZ,E,CAEA;;AAEApB,gBAAAA,QAAQ,CAACL,KAAK,CAACiB,OAAN,CAAcvB,aAAd,CAA4B;AAAE+B,kBAAAA,OAAO,EAAPA;AAAF,iBAA5B,CAAD,CAAR;kDAEOA,O;;;;;;;;;;;;;;;;;;;uGAGWC,a,EAAerB,Q;;;;;;;uBAGVb,GAAG,CAACgB,OAAJ,CAAY;AACjCC,kBAAAA,KAAK,EAAEd,cAD0B;AAEjCe,kBAAAA,SAAS,EAAE;AAAEa,oBAAAA,KAAK,EAAEG;AAAT,mBAFsB;AAGjCF,kBAAAA,QAAQ,EAAE;AAHuB,iBAAZ,C;;;AAAjBX,gBAAAA,Q;AAMAY,gBAAAA,O,GAAUZ,QAAQ,CAACE,IAAT,CAAcpB,a,EAE9B;AAEA;AAEA;;AAEAU,gBAAAA,QAAQ,CAACL,KAAK,CAACiB,OAAN,CAActB,aAAd,CAA4B;AAAE8B,kBAAAA,OAAO,EAAPA;AAAF,iBAA5B,CAAD,CAAR;kDAEOZ,Q;;;;;;;;;;;;;;;;;;;;;AAIX,OAAO,IAAMc,UAAU,GAAG,IAAIxB,UAAJ,EAAnB","sourcesContent":["import { API } from \"aws-amplify\";\nimport { vehiclesByUser } from \"../graphql/queries\";\nimport { createVehicle, updateVehicle } from \"../graphql/mutations\";\nimport { Vehicle } from \"../models\";\nimport { DataStore, Predicates } from \"@aws-amplify/datastore\";\nimport moment from \"moment\";\nimport { slice } from \"../slices/vehicles\";\n\nconst now = new Date();\n\nclass VehicleApi {\n  async getVehiclesByUser(user, dispatch) {\n    try {\n      //////////////////////// GraphQL API ////////////////////////\n      console.log(\"response\");\n      const response = await API.graphql({\n        query: vehiclesByUser,\n        variables: { user: user.id.toString() },\n      });\n      console.log(response);\n\n      const vehicles = response.data.vehiclesByUser.items;\n\n      //////////////////////// GraphQL API ////////////////////////\n\n      //////////////////////// DataStore API ////////////////////////\n\n      // const vehicles = await DataStore.query(Vehicle, (c) =>\n      //   c.user(\"eq\", user.id)\n      // );\n\n      //////////////////////// DataStore API ////////////////////////\n\n      console.log(vehicles);\n\n      // Dispatch - Reducer\n\n      dispatch(slice.actions.getVehicles(vehicles));\n\n      return vehicles;\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  async createVehicle(newVehicle, dispatch) {\n    const createdAt = moment().toISOString();\n    let newOrg = newVehicle;\n    newOrg.createdAt = createdAt;\n\n    //////////////////////// GraphQL API ////////////////////////\n\n    const response = await API.graphql({\n      query: createVehicle,\n      variables: { input: newOrg },\n      authMode: \"AMAZON_COGNITO_USER_POOLS\",\n    });\n\n    const vehicle = response.data.createVehicle;\n\n    //////////////////////// GraphQL API ////////////////////////\n\n    //////////////////////// DataStore API ////////////////////////\n\n    // const vehicle = await DataStore.save(new Vehicle(newOrg));\n\n    //////////////////////// DataStore API ////////////////////////\n\n    console.log(vehicle);\n\n    // Dispatch - Reducer\n\n    dispatch(slice.actions.createVehicle({ vehicle }));\n\n    return vehicle;\n  }\n\n  async updateVehicle(editedVehicle, dispatch) {\n    //////////////////////// GraphQL API ////////////////////////\n\n    const response = await API.graphql({\n      query: updateVehicle,\n      variables: { input: editedVehicle },\n      authMode: \"AMAZON_COGNITO_USER_POOLS\",\n    });\n\n    const vehicle = response.data.updateVehicle;\n\n    //////////////////////// GraphQL API ////////////////////////\n\n    // console.log(vehicle);\n\n    // Dispatch - Reducer\n\n    dispatch(slice.actions.updateVehicle({ vehicle }));\n\n    return response;\n  }\n}\n\nexport const vehicleApi = new VehicleApi();\n"]},"metadata":{},"sourceType":"module"}