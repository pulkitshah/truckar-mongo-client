{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/pulkitshah/Desktop/truckarv2/renderer/components/dashboard/welcome/google-places-autocomplete.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport * as React from \"react\";\nimport Box from \"@mui/material/Box\";\nimport TextField from \"@mui/material/TextField\";\nimport Autocomplete from \"@mui/material/Autocomplete\";\nimport LocationOnIcon from \"@mui/icons-material/LocationOn\";\nimport Grid from \"@mui/material/Grid\";\nimport Typography from \"@mui/material/Typography\";\nimport parse from \"autosuggest-highlight/parse\";\nimport throttle from \"lodash/throttle\"; // This key was created specifically for the demo in mui.com.\n// You need to create a new one for your application.\n\nconst GOOGLE_MAPS_API_KEY = \"AIzaSyDxGCC86EWkjtOccLqVDZKcw-yii2YHcmU\";\n\nfunction loadScript(src, position, id) {\n  if (!position) {\n    return;\n  }\n\n  const script = document.createElement(\"script\");\n  script.setAttribute(\"async\", \"\");\n  script.setAttribute(\"id\", id);\n  script.src = src;\n  position.appendChild(script);\n}\n\nconst autocompleteService = {\n  current: null\n};\nexport default function GoogleMaps({}) {\n  const [value, setValue] = React.useState(null);\n  const [inputValue, setInputValue] = React.useState(\"\");\n  const [options, setOptions] = React.useState([]);\n  const loaded = React.useRef(false);\n\n  if (false && !loaded.current) {\n    if (!document.querySelector(\"#google-maps\")) {\n      loadScript(`https://maps.googleapis.com/maps/api/js?key=${GOOGLE_MAPS_API_KEY}&libraries=places`, document.querySelector(\"head\"), \"google-maps\");\n    }\n\n    loaded.current = true;\n  }\n\n  const fetch = React.useMemo(() => throttle((request, callback) => {\n    autocompleteService.current.getPlacePredictions(request, callback);\n  }, 200), []);\n  React.useEffect(() => {\n    let active = true;\n\n    if (!autocompleteService.current && window.google) {\n      autocompleteService.current = new window.google.maps.places.AutocompleteService();\n    }\n\n    if (!autocompleteService.current) {\n      return undefined;\n    }\n\n    if (inputValue === \"\") {\n      setOptions(value ? [value] : []);\n      return undefined;\n    }\n\n    fetch({\n      input: inputValue,\n      types: [\"(cities)\"],\n      componentRestrictions: {\n        country: \"in\"\n      },\n      fields: [\"address_components\", \"geometry\", \"icon\", \"name\"]\n    }, results => {\n      if (active) {\n        let newOptions = [];\n\n        if (value) {\n          newOptions = [value];\n        }\n\n        if (results) {\n          newOptions = [...newOptions, ...results];\n        }\n\n        setOptions(newOptions);\n      }\n    });\n    return () => {\n      active = false;\n    };\n  }, [value, inputValue, fetch]);\n  return /*#__PURE__*/_jsxDEV(Autocomplete, {\n    id: \"google-map-demo\",\n    autoSelect: true,\n    onBlur: handleBlur,\n    sx: {\n      width: 300\n    },\n    getOptionLabel: option => typeof option === \"string\" ? option : option.description,\n    filterOptions: x => x,\n    options: options,\n    autoComplete: true,\n    includeInputInList: true,\n    filterSelectedOptions: true,\n    value: value,\n    onChange: (event, newValue) => {\n      var geocoder = new window.google.maps.Geocoder();\n\n      if (newValue) {\n        geocoder.geocode({\n          placeId: newValue.place_id\n        }, function (results, status) {\n          if (status === window.google.maps.GeocoderStatus.OK) {\n            setFieldValue(`${field}.latitude`, results[0].geometry.location.lat());\n            setFieldValue(`${field}.longitude`, results[0].geometry.location.lng());\n            setFieldValue(`${field}.description`, newValue.description);\n            setFieldValue(`${field}.structured_formatting`, newValue.structured_formatting);\n            setFieldValue(`${field}.place_id`, newValue.place_id);\n          } else {\n            alert(\"Can't find address: \" + status);\n          }\n        });\n      }\n\n      setOptions(newValue ? [newValue, ...options] : options);\n      setValue(newValue);\n    },\n    onInputChange: (event, newInputValue) => {\n      setInputValue(newInputValue);\n    },\n    renderInput: params => /*#__PURE__*/_jsxDEV(TextField, _objectSpread(_objectSpread({}, params), {}, {\n      label: \"City\",\n      helperText: touched && error ? error : \"\",\n      error: Boolean(touched && error),\n      fullWidth: true\n    }), void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 9\n    }, this),\n    renderOption: (props, option) => {\n      const matches = option.structured_formatting.main_text_matched_substrings;\n      const parts = parse(option.structured_formatting.main_text, matches.map(match => [match.offset, match.offset + match.length]));\n      return /*#__PURE__*/_jsxDEV(\"li\", _objectSpread(_objectSpread({}, props), {}, {\n        children: /*#__PURE__*/_jsxDEV(Grid, {\n          container: true,\n          alignItems: \"center\",\n          children: [/*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            children: /*#__PURE__*/_jsxDEV(Box, {\n              component: LocationOnIcon,\n              sx: {\n                color: \"text.secondary\",\n                mr: 2\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 169,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 168,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: true,\n            children: [parts.map((part, index) => /*#__PURE__*/_jsxDEV(\"span\", {\n              style: {\n                fontWeight: part.highlight ? 700 : 400\n              },\n              children: part.text\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 176,\n              columnNumber: 19\n            }, this)), /*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"body2\",\n              color: \"text.secondary\",\n              children: option.structured_formatting.secondary_text\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 186,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 174,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 167,\n          columnNumber: 13\n        }, this)\n      }), void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 11\n      }, this);\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 101,\n    columnNumber: 5\n  }, this);\n}","map":{"version":3,"sources":["/Users/pulkitshah/Desktop/truckarv2/renderer/components/dashboard/welcome/google-places-autocomplete.js"],"names":["React","Box","TextField","Autocomplete","LocationOnIcon","Grid","Typography","parse","throttle","GOOGLE_MAPS_API_KEY","loadScript","src","position","id","script","document","createElement","setAttribute","appendChild","autocompleteService","current","GoogleMaps","value","setValue","useState","inputValue","setInputValue","options","setOptions","loaded","useRef","querySelector","fetch","useMemo","request","callback","getPlacePredictions","useEffect","active","window","google","maps","places","AutocompleteService","undefined","input","types","componentRestrictions","country","fields","results","newOptions","handleBlur","width","option","description","x","event","newValue","geocoder","Geocoder","geocode","placeId","place_id","status","GeocoderStatus","OK","setFieldValue","field","geometry","location","lat","lng","structured_formatting","alert","newInputValue","params","touched","error","Boolean","props","matches","main_text_matched_substrings","parts","main_text","map","match","offset","length","color","mr","part","index","fontWeight","highlight","text","secondary_text"],"mappings":"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","sourcesContent":["import * as React from \"react\";\nimport Box from \"@mui/material/Box\";\nimport TextField from \"@mui/material/TextField\";\nimport Autocomplete from \"@mui/material/Autocomplete\";\nimport LocationOnIcon from \"@mui/icons-material/LocationOn\";\nimport Grid from \"@mui/material/Grid\";\nimport Typography from \"@mui/material/Typography\";\nimport parse from \"autosuggest-highlight/parse\";\nimport throttle from \"lodash/throttle\";\n\n// This key was created specifically for the demo in mui.com.\n// You need to create a new one for your application.\nconst GOOGLE_MAPS_API_KEY = \"AIzaSyDxGCC86EWkjtOccLqVDZKcw-yii2YHcmU\";\n\nfunction loadScript(src, position, id) {\n  if (!position) {\n    return;\n  }\n\n  const script = document.createElement(\"script\");\n  script.setAttribute(\"async\", \"\");\n  script.setAttribute(\"id\", id);\n  script.src = src;\n  position.appendChild(script);\n}\n\nconst autocompleteService = { current: null };\n\nexport default function GoogleMaps({}) {\n  const [value, setValue] = React.useState(null);\n  const [inputValue, setInputValue] = React.useState(\"\");\n  const [options, setOptions] = React.useState([]);\n  const loaded = React.useRef(false);\n\n  if (typeof window !== \"undefined\" && !loaded.current) {\n    if (!document.querySelector(\"#google-maps\")) {\n      loadScript(\n        `https://maps.googleapis.com/maps/api/js?key=${GOOGLE_MAPS_API_KEY}&libraries=places`,\n        document.querySelector(\"head\"),\n        \"google-maps\"\n      );\n    }\n\n    loaded.current = true;\n  }\n\n  const fetch = React.useMemo(\n    () =>\n      throttle((request, callback) => {\n        autocompleteService.current.getPlacePredictions(request, callback);\n      }, 200),\n    []\n  );\n\n  React.useEffect(() => {\n    let active = true;\n\n    if (!autocompleteService.current && window.google) {\n      autocompleteService.current =\n        new window.google.maps.places.AutocompleteService();\n    }\n    if (!autocompleteService.current) {\n      return undefined;\n    }\n\n    if (inputValue === \"\") {\n      setOptions(value ? [value] : []);\n      return undefined;\n    }\n\n    fetch(\n      {\n        input: inputValue,\n        types: [\"(cities)\"],\n        componentRestrictions: { country: \"in\" },\n        fields: [\"address_components\", \"geometry\", \"icon\", \"name\"],\n      },\n      (results) => {\n        if (active) {\n          let newOptions = [];\n\n          if (value) {\n            newOptions = [value];\n          }\n\n          if (results) {\n            newOptions = [...newOptions, ...results];\n          }\n\n          setOptions(newOptions);\n        }\n      }\n    );\n\n    return () => {\n      active = false;\n    };\n  }, [value, inputValue, fetch]);\n\n  return (\n    <Autocomplete\n      id=\"google-map-demo\"\n      autoSelect={true}\n      onBlur={handleBlur}\n      sx={{ width: 300 }}\n      getOptionLabel={(option) =>\n        typeof option === \"string\" ? option : option.description\n      }\n      filterOptions={(x) => x}\n      options={options}\n      autoComplete\n      includeInputInList\n      filterSelectedOptions\n      value={value}\n      onChange={(event, newValue) => {\n        var geocoder = new window.google.maps.Geocoder();\n        if (newValue) {\n          geocoder.geocode(\n            { placeId: newValue.place_id },\n            function (results, status) {\n              if (status === window.google.maps.GeocoderStatus.OK) {\n                setFieldValue(\n                  `${field}.latitude`,\n                  results[0].geometry.location.lat()\n                );\n                setFieldValue(\n                  `${field}.longitude`,\n                  results[0].geometry.location.lng()\n                );\n                setFieldValue(`${field}.description`, newValue.description);\n                setFieldValue(\n                  `${field}.structured_formatting`,\n                  newValue.structured_formatting\n                );\n                setFieldValue(`${field}.place_id`, newValue.place_id);\n              } else {\n                alert(\"Can't find address: \" + status);\n              }\n            }\n          );\n        }\n        setOptions(newValue ? [newValue, ...options] : options);\n        setValue(newValue);\n      }}\n      onInputChange={(event, newInputValue) => {\n        setInputValue(newInputValue);\n      }}\n      renderInput={(params) => (\n        <TextField\n          {...params}\n          label={\"City\"}\n          helperText={touched && error ? error : \"\"}\n          error={Boolean(touched && error)}\n          fullWidth\n        />\n      )}\n      renderOption={(props, option) => {\n        const matches =\n          option.structured_formatting.main_text_matched_substrings;\n        const parts = parse(\n          option.structured_formatting.main_text,\n          matches.map((match) => [match.offset, match.offset + match.length])\n        );\n\n        return (\n          <li {...props}>\n            <Grid container alignItems=\"center\">\n              <Grid item>\n                <Box\n                  component={LocationOnIcon}\n                  sx={{ color: \"text.secondary\", mr: 2 }}\n                />\n              </Grid>\n              <Grid item xs>\n                {parts.map((part, index) => (\n                  <span\n                    key={index}\n                    style={{\n                      fontWeight: part.highlight ? 700 : 400,\n                    }}\n                  >\n                    {part.text}\n                  </span>\n                ))}\n\n                <Typography variant=\"body2\" color=\"text.secondary\">\n                  {option.structured_formatting.secondary_text}\n                </Typography>\n              </Grid>\n            </Grid>\n          </li>\n        );\n      }}\n    />\n  );\n}\n"]},"metadata":{},"sourceType":"module"}