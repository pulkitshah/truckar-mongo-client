{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/pulkitshah/Desktop/truckarv2/renderer/components/dashboard/autocompletes/party-autocomplete.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* eslint-disable no-use-before-define */\nimport React, { useState, useEffect } from \"react\";\nimport { Divider, TextField } from \"@mui/material\";\nimport { useDispatch } from \"../../../store\";\nimport { createFilterOptions } from \"@mui/material/Autocomplete\";\nimport { Autocomplete } from \"@react-google-maps/api\";\nimport { partyApi } from \"../../../api/party-api\";\nimport AddNewPartyFromAutocomplete from \"./party-addnew-autocomplete\";\n\nconst FreeSoloCreateOptionDialog = (_ref) => {\n  let {\n    className,\n    touched,\n    errors,\n    formik,\n    handleBlur,\n    setFieldValue,\n    type,\n    values,\n    user\n  } = _ref,\n      rest = _objectWithoutProperties(_ref, [\"className\", \"touched\", \"errors\", \"formik\", \"handleBlur\", \"setFieldValue\", \"type\", \"values\", \"user\"]);\n\n  const dispatch = useDispatch();\n  const filter = createFilterOptions();\n  const [value, setValue] = React.useState(values && values[type]);\n  const [open, toggleOpen] = React.useState(false);\n  const {\n    0: parties,\n    1: setParties\n  } = useState([]);\n  const [dialogValue, setDialogValue] = React.useState({\n    name: \"\",\n    transporter: type !== \"customer\" ? true : false\n  });\n  useEffect(async () => {\n    try {\n      const partiesDB = await partyApi.getPartiesByUser(user, dispatch);\n      setParties(partiesDB);\n    } catch (error) {\n      console.log(error);\n    }\n  }, []);\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Autocomplete, {\n      children: /*#__PURE__*/_jsxDEV(TextField, _objectSpread(_objectSpread({\n        onKeyPress: e => {\n          e.which === 13 && e.preventDefault();\n        }\n      }, params), {}, {\n        label: type.charAt(0).toUpperCase() + type.slice(1),\n        error: Boolean(type === \"customer\" ? touched.customer && errors.customer : touched.transporter && errors.transporter),\n        onBlur: handleBlur,\n        helperText: type === \"customer\" ? touched.customer && errors.customer : touched.transporter && errors.transporter,\n        variant: \"outlined\"\n      }), void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(AddNewPartyFromAutocomplete, {\n      open: open,\n      toggleOpen: toggleOpen,\n      dialogValue: dialogValue,\n      setDialogValue: setDialogValue,\n      setFieldValue: formik.setFieldValue,\n      type: type\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 5\n  }, this);\n};\n\nexport default FreeSoloCreateOptionDialog;","map":{"version":3,"sources":["/Users/pulkitshah/Desktop/truckarv2/renderer/components/dashboard/autocompletes/party-autocomplete.js"],"names":["React","useState","useEffect","Divider","TextField","useDispatch","createFilterOptions","Autocomplete","partyApi","AddNewPartyFromAutocomplete","FreeSoloCreateOptionDialog","className","touched","errors","formik","handleBlur","setFieldValue","type","values","user","rest","dispatch","filter","value","setValue","open","toggleOpen","parties","setParties","dialogValue","setDialogValue","name","transporter","partiesDB","getPartiesByUser","error","console","log","e","which","preventDefault","params","charAt","toUpperCase","slice","Boolean","customer"],"mappings":"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","sourcesContent":["/* eslint-disable no-use-before-define */\nimport React, { useState, useEffect } from \"react\";\nimport { Divider, TextField } from \"@mui/material\";\nimport { useDispatch } from \"../../../store\";\nimport { createFilterOptions } from \"@mui/material/Autocomplete\";\nimport { Autocomplete } from \"@react-google-maps/api\";\nimport { partyApi } from \"../../../api/party-api\";\nimport AddNewPartyFromAutocomplete from \"./party-addnew-autocomplete\";\n\nconst FreeSoloCreateOptionDialog = ({\n  className,\n  touched,\n  errors,\n  formik,\n  handleBlur,\n  setFieldValue,\n  type,\n  values,\n  user,\n  ...rest\n}) => {\n  const dispatch = useDispatch();\n  const filter = createFilterOptions();\n  const [value, setValue] = React.useState(values && values[type]);\n  const [open, toggleOpen] = React.useState(false);\n  const [parties, setParties] = useState([]);\n  const [dialogValue, setDialogValue] = React.useState({\n    name: \"\",\n    transporter: type !== \"customer\" ? true : false,\n  });\n\n  useEffect(async () => {\n    try {\n      const partiesDB = await partyApi.getPartiesByUser(user, dispatch);\n      setParties(partiesDB);\n    } catch (error) {\n      console.log(error);\n    }\n  }, []);\n\n  return (\n    <React.Fragment>\n      <Autocomplete>\n        <TextField\n          onKeyPress={(e) => {\n            e.which === 13 && e.preventDefault();\n          }}\n          {...params}\n          label={type.charAt(0).toUpperCase() + type.slice(1)}\n          error={Boolean(\n            type === \"customer\"\n              ? touched.customer && errors.customer\n              : touched.transporter && errors.transporter\n          )}\n          onBlur={handleBlur}\n          helperText={\n            type === \"customer\"\n              ? touched.customer && errors.customer\n              : touched.transporter && errors.transporter\n          }\n          variant=\"outlined\"\n        />\n      </Autocomplete>\n      <AddNewPartyFromAutocomplete\n        open={open}\n        toggleOpen={toggleOpen}\n        dialogValue={dialogValue}\n        setDialogValue={setDialogValue}\n        setFieldValue={formik.setFieldValue}\n        type={type}\n      />\n    </React.Fragment>\n  );\n};\nexport default FreeSoloCreateOptionDialog;\n"]},"metadata":{},"sourceType":"module"}