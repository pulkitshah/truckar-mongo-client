{"ast":null,"code":"import _regeneratorRuntime from \"/Users/pulkitshah/Desktop/truckarv2/node_modules/next/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/pulkitshah/Desktop/truckarv2/node_modules/next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/pulkitshah/Desktop/truckarv2/node_modules/next/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/pulkitshah/Desktop/truckarv2/node_modules/next/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { createResourceId } from \"../utils/create-resource-id\";\nimport { sign, decode, JWT_SECRET, JWT_EXPIRES_IN } from \"../utils/jwt\";\nimport { wait } from \"../utils/wait\";\nimport { fetchApiResult } from \"../helper\";\nvar users = [{\n  id: \"5e86809283e28b96d2d38537\",\n  avatar: \"/static/mock-images/avatars/avatar-anika_visser.png\",\n  email: \"demo@devias.io\",\n  name: \"Anika Visser\",\n  password: \"Password123!\",\n  plan: \"Premium\"\n}];\n\nvar AuthApi = /*#__PURE__*/function () {\n  function AuthApi() {\n    _classCallCheck(this, AuthApi);\n  }\n\n  _createClass(AuthApi, [{\n    key: \"login\",\n    value: function () {\n      var _login = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(_ref) {\n        var email, password, response;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                email = _ref.email, password = _ref.password;\n                _context.next = 3;\n                return fetchApiResult(\"/api/auth\", \"post\", {\n                  email: email,\n                  password: password\n                });\n\n              case 3:\n                response = _context.sent;\n                return _context.abrupt(\"return\", response);\n\n              case 5:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      function login(_x) {\n        return _login.apply(this, arguments);\n      }\n\n      return login;\n    }()\n  }, {\n    key: \"register\",\n    value: function () {\n      var _register = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(_ref2) {\n        var email, name, password;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                email = _ref2.email, name = _ref2.name, password = _ref2.password;\n                _context2.next = 3;\n                return wait(1000);\n\n              case 3:\n                return _context2.abrupt(\"return\", new Promise(function (resolve, reject) {\n                  try {\n                    // Check if a user already exists\n                    var user = users.find(function (_user) {\n                      return _user.email === email;\n                    });\n\n                    if (user) {\n                      reject(new Error(\"User already exists\"));\n                      return;\n                    }\n\n                    user = {\n                      id: createResourceId(),\n                      avatar: null,\n                      email: email,\n                      name: name,\n                      password: password,\n                      plan: \"Standard\"\n                    };\n                    users.push(user);\n                    var accessToken = sign({\n                      userId: user.id\n                    }, JWT_SECRET, {\n                      expiresIn: JWT_EXPIRES_IN\n                    });\n                    resolve(accessToken);\n                  } catch (err) {\n                    console.error(\"[Auth Api]: \", err);\n                    reject(new Error(\"Internal server error\"));\n                  }\n                }));\n\n              case 4:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      function register(_x2) {\n        return _register.apply(this, arguments);\n      }\n\n      return register;\n    }()\n  }, {\n    key: \"me\",\n    value: function () {\n      var _me = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.next = 2;\n                return fetchApiResult(\"/api/auth\", \"get\");\n\n              case 2:\n                return _context3.abrupt(\"return\", _context3.sent);\n\n              case 3:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      }));\n\n      function me() {\n        return _me.apply(this, arguments);\n      }\n\n      return me;\n    }()\n  }]);\n\n  return AuthApi;\n}();\n\nexport var authApi = new AuthApi();","map":{"version":3,"sources":["/Users/pulkitshah/Desktop/truckarv2/renderer/api/auth-api.js"],"names":["createResourceId","sign","decode","JWT_SECRET","JWT_EXPIRES_IN","wait","fetchApiResult","users","id","avatar","email","name","password","plan","AuthApi","response","Promise","resolve","reject","user","find","_user","Error","push","accessToken","userId","expiresIn","err","console","error","authApi"],"mappings":";;;;AAAA,SAASA,gBAAT,QAAiC,6BAAjC;AACA,SAASC,IAAT,EAAeC,MAAf,EAAuBC,UAAvB,EAAmCC,cAAnC,QAAyD,cAAzD;AACA,SAASC,IAAT,QAAqB,eAArB;AACA,SAASC,cAAT,QAA+B,WAA/B;AAEA,IAAMC,KAAK,GAAG,CACZ;AACEC,EAAAA,EAAE,EAAE,0BADN;AAEEC,EAAAA,MAAM,EAAE,qDAFV;AAGEC,EAAAA,KAAK,EAAE,gBAHT;AAIEC,EAAAA,IAAI,EAAE,cAJR;AAKEC,EAAAA,QAAQ,EAAE,cALZ;AAMEC,EAAAA,IAAI,EAAE;AANR,CADY,CAAd;;IAWMC,O;;;;;;;;;;;;;;AACUJ,gBAAAA,K,QAAAA,K,EAAOE,Q,QAAAA,Q;;uBACIN,cAAc,cAAc,MAAd,EAAsB;AACzDI,kBAAAA,KAAK,EAALA,KADyD;AAEzDE,kBAAAA,QAAQ,EAARA;AAFyD,iBAAtB,C;;;AAA/BG,gBAAAA,Q;iDAICA,Q;;;;;;;;;;;;;;;;;;;;;;;;;AAGQL,gBAAAA,K,SAAAA,K,EAAOC,I,SAAAA,I,EAAMC,Q,SAAAA,Q;;uBACtBP,IAAI,CAAC,IAAD,C;;;kDAEH,IAAIW,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtC,sBAAI;AACF;AACA,wBAAIC,IAAI,GAAGZ,KAAK,CAACa,IAAN,CAAW,UAACC,KAAD;AAAA,6BAAWA,KAAK,CAACX,KAAN,KAAgBA,KAA3B;AAAA,qBAAX,CAAX;;AAEA,wBAAIS,IAAJ,EAAU;AACRD,sBAAAA,MAAM,CAAC,IAAII,KAAJ,CAAU,qBAAV,CAAD,CAAN;AACA;AACD;;AAEDH,oBAAAA,IAAI,GAAG;AACLX,sBAAAA,EAAE,EAAER,gBAAgB,EADf;AAELS,sBAAAA,MAAM,EAAE,IAFH;AAGLC,sBAAAA,KAAK,EAALA,KAHK;AAILC,sBAAAA,IAAI,EAAJA,IAJK;AAKLC,sBAAAA,QAAQ,EAARA,QALK;AAMLC,sBAAAA,IAAI,EAAE;AAND,qBAAP;AASAN,oBAAAA,KAAK,CAACgB,IAAN,CAAWJ,IAAX;AAEA,wBAAMK,WAAW,GAAGvB,IAAI,CAAC;AAAEwB,sBAAAA,MAAM,EAAEN,IAAI,CAACX;AAAf,qBAAD,EAAsBL,UAAtB,EAAkC;AACxDuB,sBAAAA,SAAS,EAAEtB;AAD6C,qBAAlC,CAAxB;AAIAa,oBAAAA,OAAO,CAACO,WAAD,CAAP;AACD,mBAzBD,CAyBE,OAAOG,GAAP,EAAY;AACZC,oBAAAA,OAAO,CAACC,KAAR,CAAc,cAAd,EAA8BF,GAA9B;AACAT,oBAAAA,MAAM,CAAC,IAAII,KAAJ,CAAU,uBAAV,CAAD,CAAN;AACD;AACF,iBA9BM,C;;;;;;;;;;;;;;;;;;;;;;;;;uBAkCMhB,cAAc,cAAc,KAAd,C;;;;;;;;;;;;;;;;;;;;;;;;AAI/B,OAAO,IAAMwB,OAAO,GAAG,IAAIhB,OAAJ,EAAhB","sourcesContent":["import { createResourceId } from \"../utils/create-resource-id\";\nimport { sign, decode, JWT_SECRET, JWT_EXPIRES_IN } from \"../utils/jwt\";\nimport { wait } from \"../utils/wait\";\nimport { fetchApiResult } from \"../helper\";\n\nconst users = [\n  {\n    id: \"5e86809283e28b96d2d38537\",\n    avatar: \"/static/mock-images/avatars/avatar-anika_visser.png\",\n    email: \"demo@devias.io\",\n    name: \"Anika Visser\",\n    password: \"Password123!\",\n    plan: \"Premium\",\n  },\n];\n\nclass AuthApi {\n  async login({ email, password }) {\n    const response = await fetchApiResult(`/api/auth`, \"post\", {\n      email,\n      password,\n    });\n    return response;\n  }\n\n  async register({ email, name, password }) {\n    await wait(1000);\n\n    return new Promise((resolve, reject) => {\n      try {\n        // Check if a user already exists\n        let user = users.find((_user) => _user.email === email);\n\n        if (user) {\n          reject(new Error(\"User already exists\"));\n          return;\n        }\n\n        user = {\n          id: createResourceId(),\n          avatar: null,\n          email,\n          name,\n          password,\n          plan: \"Standard\",\n        };\n\n        users.push(user);\n\n        const accessToken = sign({ userId: user.id }, JWT_SECRET, {\n          expiresIn: JWT_EXPIRES_IN,\n        });\n\n        resolve(accessToken);\n      } catch (err) {\n        console.error(\"[Auth Api]: \", err);\n        reject(new Error(\"Internal server error\"));\n      }\n    });\n  }\n\n  async me() {\n    return await fetchApiResult(`/api/auth`, \"get\");\n  }\n}\n\nexport const authApi = new AuthApi();\n"]},"metadata":{},"sourceType":"module"}