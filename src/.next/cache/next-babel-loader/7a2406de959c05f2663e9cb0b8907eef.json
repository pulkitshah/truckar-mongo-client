{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/pulkitshah/Desktop/truckarv2/renderer/contexts/settings-context.js\";\nimport { createContext, useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nconst initialSettings = {\n  direction: 'ltr',\n  responsiveFontSizes: true,\n  theme: 'light'\n};\nexport const restoreSettings = () => {\n  let settings = null;\n\n  try {\n    const storedData = window.localStorage.getItem('settings');\n\n    if (storedData) {\n      settings = JSON.parse(storedData);\n    } else {\n      settings = {\n        direction: 'ltr',\n        responsiveFontSizes: true,\n        theme: window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light'\n      };\n    }\n  } catch (err) {\n    console.error(err); // If stored data is not a strigified JSON this will fail,\n    // that's why we catch the error\n  }\n\n  return settings;\n};\nexport const storeSettings = settings => {\n  window.localStorage.setItem('settings', JSON.stringify(settings));\n};\nexport const SettingsContext = /*#__PURE__*/createContext({\n  settings: initialSettings,\n  saveSettings: () => {}\n});\nexport const SettingsProvider = props => {\n  const {\n    children\n  } = props;\n  const {\n    0: settings,\n    1: setSettings\n  } = useState(initialSettings);\n  useEffect(() => {\n    const restoredSettings = restoreSettings();\n\n    if (restoredSettings) {\n      setSettings(restoredSettings);\n    }\n  }, []);\n\n  const saveSettings = updatedSettings => {\n    setSettings(updatedSettings);\n    storeSettings(updatedSettings);\n  };\n\n  return /*#__PURE__*/_jsxDEV(SettingsContext.Provider, {\n    value: {\n      settings,\n      saveSettings\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 5\n  }, this);\n};\nSettingsProvider.propTypes = {\n  children: PropTypes.node.isRequired\n};\nexport const SettingsConsumer = SettingsContext.Consumer;","map":{"version":3,"sources":["/Users/pulkitshah/Desktop/truckarv2/renderer/contexts/settings-context.js"],"names":["createContext","useEffect","useState","PropTypes","initialSettings","direction","responsiveFontSizes","theme","restoreSettings","settings","storedData","window","localStorage","getItem","JSON","parse","matchMedia","matches","err","console","error","storeSettings","setItem","stringify","SettingsContext","saveSettings","SettingsProvider","props","children","setSettings","restoredSettings","updatedSettings","propTypes","node","isRequired","SettingsConsumer","Consumer"],"mappings":";;AAAA,SAASA,aAAT,EAAwBC,SAAxB,EAAmCC,QAAnC,QAAmD,OAAnD;AACA,OAAOC,SAAP,MAAsB,YAAtB;AAEA,MAAMC,eAAe,GAAG;AACtBC,EAAAA,SAAS,EAAE,KADW;AAEtBC,EAAAA,mBAAmB,EAAE,IAFC;AAGtBC,EAAAA,KAAK,EAAE;AAHe,CAAxB;AAMA,OAAO,MAAMC,eAAe,GAAG,MAAM;AACnC,MAAIC,QAAQ,GAAG,IAAf;;AAEA,MAAI;AACF,UAAMC,UAAU,GAAGC,MAAM,CAACC,YAAP,CAAoBC,OAApB,CAA4B,UAA5B,CAAnB;;AAEA,QAAIH,UAAJ,EAAgB;AACdD,MAAAA,QAAQ,GAAGK,IAAI,CAACC,KAAL,CAAWL,UAAX,CAAX;AACD,KAFD,MAEO;AACLD,MAAAA,QAAQ,GAAG;AACTJ,QAAAA,SAAS,EAAE,KADF;AAETC,QAAAA,mBAAmB,EAAE,IAFZ;AAGTC,QAAAA,KAAK,EAAEI,MAAM,CAACK,UAAP,CAAkB,8BAAlB,EAAkDC,OAAlD,GACH,MADG,GAEH;AALK,OAAX;AAOD;AACF,GAdD,CAcE,OAAOC,GAAP,EAAY;AACZC,IAAAA,OAAO,CAACC,KAAR,CAAcF,GAAd,EADY,CAEZ;AACA;AACD;;AAED,SAAOT,QAAP;AACD,CAxBM;AA0BP,OAAO,MAAMY,aAAa,GAAIZ,QAAD,IAAc;AACzCE,EAAAA,MAAM,CAACC,YAAP,CAAoBU,OAApB,CAA4B,UAA5B,EAAwCR,IAAI,CAACS,SAAL,CAAed,QAAf,CAAxC;AACD,CAFM;AAIP,OAAO,MAAMe,eAAe,gBAAGxB,aAAa,CAAC;AAC3CS,EAAAA,QAAQ,EAAEL,eADiC;AAE3CqB,EAAAA,YAAY,EAAE,MAAM,CAAG;AAFoB,CAAD,CAArC;AAKP,OAAO,MAAMC,gBAAgB,GAAIC,KAAD,IAAW;AACzC,QAAM;AAAEC,IAAAA;AAAF,MAAeD,KAArB;AACA,QAAM;AAAA,OAAClB,QAAD;AAAA,OAAWoB;AAAX,MAA0B3B,QAAQ,CAACE,eAAD,CAAxC;AAEAH,EAAAA,SAAS,CAAC,MAAM;AACd,UAAM6B,gBAAgB,GAAGtB,eAAe,EAAxC;;AAEA,QAAIsB,gBAAJ,EAAsB;AACpBD,MAAAA,WAAW,CAACC,gBAAD,CAAX;AACD;AACF,GANQ,EAMN,EANM,CAAT;;AAQA,QAAML,YAAY,GAAIM,eAAD,IAAqB;AACxCF,IAAAA,WAAW,CAACE,eAAD,CAAX;AACAV,IAAAA,aAAa,CAACU,eAAD,CAAb;AACD,GAHD;;AAKA,sBACE,QAAC,eAAD,CAAiB,QAAjB;AACE,IAAA,KAAK,EAAE;AACLtB,MAAAA,QADK;AAELgB,MAAAA;AAFK,KADT;AAAA,cAMGG;AANH;AAAA;AAAA;AAAA;AAAA,UADF;AAUD,CA3BM;AA6BPF,gBAAgB,CAACM,SAAjB,GAA6B;AAC3BJ,EAAAA,QAAQ,EAAEzB,SAAS,CAAC8B,IAAV,CAAeC;AADE,CAA7B;AAIA,OAAO,MAAMC,gBAAgB,GAAGX,eAAe,CAACY,QAAzC","sourcesContent":["import { createContext, useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\n\nconst initialSettings = {\n  direction: 'ltr',\n  responsiveFontSizes: true,\n  theme: 'light'\n};\n\nexport const restoreSettings = () => {\n  let settings = null;\n\n  try {\n    const storedData = window.localStorage.getItem('settings');\n\n    if (storedData) {\n      settings = JSON.parse(storedData);\n    } else {\n      settings = {\n        direction: 'ltr',\n        responsiveFontSizes: true,\n        theme: window.matchMedia('(prefers-color-scheme: dark)').matches\n          ? 'dark'\n          : 'light'\n      };\n    }\n  } catch (err) {\n    console.error(err);\n    // If stored data is not a strigified JSON this will fail,\n    // that's why we catch the error\n  }\n\n  return settings;\n};\n\nexport const storeSettings = (settings) => {\n  window.localStorage.setItem('settings', JSON.stringify(settings));\n};\n\nexport const SettingsContext = createContext({\n  settings: initialSettings,\n  saveSettings: () => { }\n});\n\nexport const SettingsProvider = (props) => {\n  const { children } = props;\n  const [settings, setSettings] = useState(initialSettings);\n\n  useEffect(() => {\n    const restoredSettings = restoreSettings();\n\n    if (restoredSettings) {\n      setSettings(restoredSettings);\n    }\n  }, []);\n\n  const saveSettings = (updatedSettings) => {\n    setSettings(updatedSettings);\n    storeSettings(updatedSettings);\n  };\n\n  return (\n    <SettingsContext.Provider\n      value={{\n        settings,\n        saveSettings\n      }}\n    >\n      {children}\n    </SettingsContext.Provider>\n  );\n};\n\nSettingsProvider.propTypes = {\n  children: PropTypes.node.isRequired\n};\n\nexport const SettingsConsumer = SettingsContext.Consumer;\n"]},"metadata":{},"sourceType":"module"}