{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/pulkitshah/Desktop/truckarv2/renderer/components/dashboard/order/order-create-form.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useState, useRef, useMemo, useCallback } from \"react\";\nimport { useRouter } from \"next/router\";\nimport toast from \"react-hot-toast\";\nimport * as Yup from \"yup\";\nimport { useFormik } from \"formik\";\nimport moment from \"moment\";\nimport { Box, Button, Card, CardContent, Grid, TextField, Typography } from \"@mui/material\";\nimport { DatePicker } from \"@mui/x-date-pickers/DatePicker\";\nimport { useAuth } from \"../../../hooks/use-auth\";\nimport DeliveryDetails from \"./delivery-details\";\nimport PartyAutocomplete from \"../autocompletes/party-autocomplete/party-autocomplete\";\nimport VehicleAutocomplete from \"../autocompletes/vehicle-autocomplete/vehicle-autocomplete\";\nimport DriverAutocomplete from \"../autocompletes/driver-autocomplete/driver-autocomplete\";\nimport GoogleMaps from \"./google-maps\";\nimport { orderApi } from \"../../../api/order-api\";\nimport { useDispatch } from \"../../../store\";\nexport const OrderCreateForm = props => {\n  const router = useRouter();\n  const dispatch = useDispatch();\n  const {\n    user\n  } = useAuth();\n  const {\n    0: selectedVehicle,\n    1: setSelectedVehicle\n  } = useState(null);\n  const {\n    0: driver,\n    1: setDriver\n  } = useState();\n  const {\n    0: addresses,\n    1: setAddresses\n  } = useState({\n    waypoints: []\n  });\n  const [saleType, setSaleType] = React.useState(\"quantity\");\n  const [purchaseType, setPurchaseType] = React.useState(\"quantity\");\n  const saleTypes = [{\n    value: \"quantity\",\n    label: \"Per Ton\"\n  }, {\n    value: \"fixed\",\n    label: \"Fixed\"\n  }];\n  const purchaseTypes = [{\n    value: \"quantity\",\n    label: \"Per Ton\"\n  }, {\n    value: \"fixed\",\n    label: \"Fixed\"\n  }];\n  let validationShape = {\n    orderNo: Yup.number().required(\"Order No is required\").test({\n      name: \"Checking Duplicate Order No\",\n      exclusive: false,\n      params: {},\n      message: \"${path} must be less than 10% of the price\",\n      test: async function (value) {\n        try {\n          console.log(value);\n          const response = await orderApi.validateDuplicateOrderNo(value, user); // console.log(response);\n\n          return response;\n        } catch (error) {\n          console.log(error);\n        }\n      }\n    }) // customer: Yup.object().nullable().required(\"Customer is required\"),\n    // vehicle: Yup.lazy((value) => {\n    //   switch (typeof value) {\n    //     case \"object\":\n    //       return Yup.object().nullable().required(\"Vehicle is required\");\n    //     case \"string\":\n    //       return Yup.string().required(\"Vehicle is required\");\n    //     default:\n    //       return Yup.string().required(\"Vehicle is required\");\n    //   }\n    // }),\n    // saleType: Yup.string().required(\"Sale is required\"),\n    // saleRate: Yup.string().required(\"Sale Rate is required\"),\n\n  };\n\n  if (typeof selectedVehicle === \"object\" && selectedVehicle !== null) {} else {// validationShape.transporter = Yup.object().required(\n    //   \"Transporter is required\"\n    // );\n    // validationShape.purchaseType = Yup.string().required(\n    //   \"Purchase is required\"\n    // );\n    // validationShape.purchaseRate = Yup.string().required(\n    //   \"Purchase Rate is required\"\n    // );\n  } // validationShape.deliveryDetails = Yup.array().of(\n  //   Yup.object().shape({\n  //     loading: Yup.object().required(\"Loading Point is Required\"), // these constraints take precedence\n  //     unloading: Yup.object().required(\"Unloading Point is Required\"), // these constraints take precedence\n  //   })\n  // );\n\n\n  const formik = useFormik({\n    initialValues: {\n      saleDate: moment(),\n      saleType: saleType,\n      purchaseType: purchaseType,\n      deliveryDetails: [{\n        loading: \"\",\n        unloading: \"\"\n      }]\n    },\n    validationSchema: Yup.object().shape(validationShape),\n    onSubmit: async (values, helpers) => {\n      try {\n        console.log(values);\n        const newOrder = {\n          orderNo: parseInt(values.orderNo),\n          saleDate: values.saleDate.format(),\n          // customer: values.customer,\n          customerId: values.customer.id,\n          saleRate: values.saleRate,\n          saleType: values.saleType,\n          user: user.id,\n          deliveries: JSON.stringify(values.deliveryDetails)\n        };\n\n        if (typeof selectedVehicle === \"object\" && selectedVehicle !== null) {\n          // newOrder.vehicle = values.vehicle;\n          newOrder.vehicleId = values.vehicle.id;\n          newOrder.vehicleNumber = values.vehicle.vehicleNumber;\n\n          if (values.driver) {\n            // newOrder.driver = values.driver;\n            newOrder.driverId = values.driver.id;\n          }\n        } else {\n          newOrder.vehicleNumber = values.vehicle; // newOrder.transporter = values.transporter;\n\n          newOrder.transporterId = values.transporter.id;\n          newOrder.purchaseRate = values.purchaseRate;\n          newOrder.purchaseType = values.purchaseType;\n          if (values.minimumPurchaseGuarantee) newOrder.minimumPurchaseGuarantee = values.minimumPurchaseGuarantee;\n        }\n\n        if (values.minimumSaleGuarantee) newOrder.minimumSaleGuarantee = values.minimumSaleGuarantee;\n        console.log(newOrder);\n        await orderApi.createOrder(newOrder, dispatch);\n        toast.success(\"Order created!\"); // router.push(\"/dashboard/orders\");\n      } catch (err) {\n        console.error(err);\n        toast.error(\"Something went wrong!\");\n        helpers.setStatus({\n          success: false\n        });\n        helpers.setErrors({\n          submit: err.message\n        });\n        helpers.setSubmitting(false);\n      }\n    }\n  });\n  React.useEffect(() => {\n    setAddresses({\n      waypoints: [...addresses.waypoints]\n    }); // Setting Origin\n\n    setAddresses(addresses => _objectSpread(_objectSpread({}, addresses), {\n      origin: formik.values.deliveryDetails[0].loading.description\n    })); // Setting Destination\n\n    if (formik.values.deliveryDetails[formik.values.deliveryDetails.length - 1].unloading.description) {\n      setAddresses(addresses => _objectSpread(_objectSpread({}, addresses), {\n        destination: formik.values.deliveryDetails[formik.values.deliveryDetails.length - 1].unloading.description\n      }));\n    } // Setting waypoints\n\n\n    let waypoints = [];\n    formik.values.deliveryDetails.map(delivery => {\n      if (delivery.loading.description) {\n        waypoints.push({\n          location: delivery.loading.description\n        });\n      }\n\n      if (delivery.unloading.description) {\n        waypoints.push({\n          location: delivery.unloading.description\n        });\n      }\n    });\n    waypoints = waypoints.filter(waypoint => waypoint.location !== formik.values.deliveryDetails[0].loading.description);\n    waypoints = waypoints.filter(waypoint => waypoint.location !== formik.values.deliveryDetails[formik.values.deliveryDetails.length - 1].unloading.description);\n    waypoints = [...new Map(waypoints.map(item => [item.location, item])).values()];\n    setAddresses({\n      origin: formik.values.deliveryDetails[0].loading.description,\n      destination: formik.values.deliveryDetails[formik.values.deliveryDetails.length - 1].unloading.description,\n      waypoints: waypoints\n    });\n  }, [formik.values.deliveryDetails]);\n  return /*#__PURE__*/_jsxDEV(\"form\", _objectSpread(_objectSpread({\n    onSubmit: formik.handleSubmit\n  }, props), {}, {\n    children: [/*#__PURE__*/_jsxDEV(Card, {\n      children: /*#__PURE__*/_jsxDEV(CardContent, {\n        children: /*#__PURE__*/_jsxDEV(Grid, {\n          container: true,\n          spacing: 3,\n          children: [/*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            md: 4,\n            xs: 12,\n            children: /*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"h6\",\n              children: \"Basic details\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 257,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 256,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            md: 8,\n            xs: 12,\n            children: /*#__PURE__*/_jsxDEV(Grid, {\n              container: true,\n              spacing: 3,\n              children: [/*#__PURE__*/_jsxDEV(Grid, {\n                item: true,\n                md: 4,\n                xs: 12,\n                children: /*#__PURE__*/_jsxDEV(TextField, {\n                  error: Boolean(formik.touched.orderNo && formik.errors.orderNo),\n                  fullWidth: true,\n                  helperText: formik.touched.orderNo && formik.errors.orderNo,\n                  label: \"Order No\",\n                  name: \"orderNo\",\n                  onBlur: formik.handleBlur,\n                  onChange: event => {\n                    formik.setFieldValue(`orderNo`, event.target.value);\n                  },\n                  value: formik.values.orderNo\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 262,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 261,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Grid, {\n                item: true,\n                md: 4,\n                xs: 12,\n                children: /*#__PURE__*/_jsxDEV(DatePicker, {\n                  id: \"saleDate\",\n                  name: \"saleDate\",\n                  label: \"Sale date\",\n                  showTodayButton: true,\n                  inputFormat: \"DD/MM/YYYY\",\n                  value: formik.values.saleDate,\n                  onClick: () => setFieldTouched(\"end\"),\n                  onChange: date => formik.setFieldValue(\"saleDate\", moment(date)),\n                  renderInput: params => /*#__PURE__*/_jsxDEV(TextField, _objectSpread({\n                    fullWidth: true\n                  }, params), void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 290,\n                    columnNumber: 23\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 278,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 277,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Grid, {\n                item: true,\n                md: 4,\n                xs: 12,\n                children: /*#__PURE__*/_jsxDEV(PartyAutocomplete, {\n                  errors: formik.errors,\n                  touched: formik.touched,\n                  setFieldValue: formik.setFieldValue,\n                  handleBlur: formik.handleBlur,\n                  type: \"customer\",\n                  user: user,\n                  formik: formik\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 295,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 294,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 260,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 259,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 255,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 254,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 253,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Card, {\n      sx: {\n        mt: 3\n      },\n      children: /*#__PURE__*/_jsxDEV(CardContent, {\n        children: /*#__PURE__*/_jsxDEV(Grid, {\n          container: true,\n          spacing: 3,\n          children: [/*#__PURE__*/_jsxDEV(Grid, {\n            sx: {\n              mb: 6\n            },\n            item: true,\n            md: 4,\n            xs: 12,\n            children: [/*#__PURE__*/_jsxDEV(Typography, {\n              sx: {\n                mb: 3\n              },\n              variant: \"h6\",\n              children: \"Delivery details\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 315,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(GoogleMaps, {\n              addresses: addresses\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 318,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 314,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            md: 8,\n            xs: 12,\n            children: /*#__PURE__*/_jsxDEV(DeliveryDetails, {\n              formik: formik\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 321,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 320,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 313,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 312,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 311,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Card, {\n      sx: {\n        mt: 3\n      },\n      children: /*#__PURE__*/_jsxDEV(CardContent, {\n        children: /*#__PURE__*/_jsxDEV(Grid, {\n          container: true,\n          spacing: 3,\n          children: [/*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            md: 4,\n            xs: 12,\n            children: /*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"h6\",\n              children: \"Vehicle details\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 330,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 329,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            md: 8,\n            xs: 12,\n            children: /*#__PURE__*/_jsxDEV(Grid, {\n              container: true,\n              spacing: 3,\n              children: [/*#__PURE__*/_jsxDEV(Grid, {\n                item: true,\n                md: 4,\n                xs: 12,\n                children: /*#__PURE__*/_jsxDEV(VehicleAutocomplete, {\n                  errors: formik.errors,\n                  touched: formik.touched,\n                  setFieldValue: formik.setFieldValue,\n                  handleBlur: formik.handleBlur,\n                  setSelectedVehicle: setSelectedVehicle,\n                  setDriver: setDriver,\n                  user: user\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 335,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 334,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Grid, {\n                item: true,\n                md: 4,\n                xs: 12,\n                children: typeof selectedVehicle === \"object\" && selectedVehicle !== null ? /*#__PURE__*/_jsxDEV(DriverAutocomplete, {\n                  errors: formik.errors,\n                  touched: formik.touched,\n                  setFieldValue: formik.setFieldValue,\n                  handleBlur: formik.handleBlur,\n                  setSelectedVehicle: setSelectedVehicle,\n                  setDriver: setDriver,\n                  user: user,\n                  values: formik.values\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 348,\n                  columnNumber: 21\n                }, this) : selectedVehicle !== null && /*#__PURE__*/_jsxDEV(PartyAutocomplete, {\n                  errors: formik.errors,\n                  touched: formik.touched,\n                  setFieldValue: formik.setFieldValue,\n                  handleBlur: formik.handleBlur,\n                  type: \"transporter\",\n                  user: user,\n                  formik: formik\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 360,\n                  columnNumber: 23\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 345,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 333,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 332,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 328,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 327,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 326,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Card, {\n      sx: {\n        mt: 3\n      },\n      children: /*#__PURE__*/_jsxDEV(CardContent, {\n        children: /*#__PURE__*/_jsxDEV(Grid, {\n          container: true,\n          spacing: 3,\n          children: [/*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            md: 4,\n            xs: 12,\n            children: /*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"h6\",\n              children: \"Sale details\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 381,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 380,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            md: 8,\n            xs: 12,\n            children: /*#__PURE__*/_jsxDEV(Grid, {\n              container: true,\n              spacing: 3,\n              children: [/*#__PURE__*/_jsxDEV(Grid, {\n                item: true,\n                md: 4,\n                xs: 12,\n                children: /*#__PURE__*/_jsxDEV(TextField, {\n                  error: Boolean(formik.touched.saleType && formik.errors.saleType),\n                  onBlur: formik.handleBlur,\n                  name: \"saleType\",\n                  label: \"Sale Type\",\n                  InputLabelProps: {\n                    shrink: true\n                  },\n                  fullWidth: true,\n                  id: \"saleType\",\n                  select: true,\n                  value: saleType,\n                  onChange: event => {\n                    setSaleType(event.target.value);\n                    formik.setFieldValue(\"saleType\", event.target.value);\n                  },\n                  SelectProps: {\n                    native: true\n                  },\n                  helperText: \"Please select sale type\",\n                  variant: \"outlined\",\n                  children: saleTypes.map(option => /*#__PURE__*/_jsxDEV(\"option\", {\n                    value: option.value,\n                    children: option.label\n                  }, option.value, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 411,\n                    columnNumber: 23\n                  }, this))\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 386,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 385,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Grid, {\n                item: true,\n                md: 4,\n                xs: 12,\n                children: /*#__PURE__*/_jsxDEV(TextField, {\n                  error: Boolean(formik.touched.saleRate && formik.errors.saleRate),\n                  variant: \"outlined\",\n                  onChange: formik.handleChange,\n                  onBlur: formik.handleBlur,\n                  helperText: formik.touched.saleRate && formik.errors.saleRate,\n                  id: \"saleRate\",\n                  name: \"saleRate\",\n                  label: \"Sale Rate\",\n                  fullWidth: true\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 418,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 417,\n                columnNumber: 17\n              }, this), saleType === \"quantity\" && /*#__PURE__*/_jsxDEV(Grid, {\n                item: true,\n                md: 4,\n                xs: 6,\n                children: /*#__PURE__*/_jsxDEV(TextField, {\n                  error: Boolean(formik.touched.minimumSaleGuarantee && formik.errors.minimumSaleGuarantee),\n                  variant: \"outlined\",\n                  onChange: formik.handleChange,\n                  onBlur: formik.handleBlur,\n                  helperText: formik.touched.minimumSaleGuarantee && formik.errors.minimumSaleGuarantee,\n                  id: \"minimumSaleGuarantee\",\n                  name: \"minimumSaleGuarantee\",\n                  label: \"Min. Load Guarantee\",\n                  fullWidth: true\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 436,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 435,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 384,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 383,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 379,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 378,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 377,\n      columnNumber: 7\n    }, this), !(typeof selectedVehicle === \"object\") && selectedVehicle !== null && /*#__PURE__*/_jsxDEV(Card, {\n      sx: {\n        mt: 3\n      },\n      children: /*#__PURE__*/_jsxDEV(CardContent, {\n        children: /*#__PURE__*/_jsxDEV(Grid, {\n          container: true,\n          spacing: 3,\n          children: [/*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            md: 4,\n            xs: 12,\n            children: /*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"h6\",\n              children: \"Purchase details\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 465,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 464,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            md: 8,\n            xs: 12,\n            children: /*#__PURE__*/_jsxDEV(Grid, {\n              container: true,\n              spacing: 3,\n              children: [/*#__PURE__*/_jsxDEV(Grid, {\n                item: true,\n                md: 4,\n                xs: 12,\n                children: /*#__PURE__*/_jsxDEV(TextField, {\n                  error: Boolean(formik.touched.purchaseType && formik.errors.purchaseType),\n                  onBlur: formik.handleBlur,\n                  name: \"purchaseType\",\n                  label: \"Purchase Type\",\n                  InputLabelProps: {\n                    shrink: true\n                  },\n                  fullWidth: true,\n                  id: \"purchaseType\",\n                  select: true,\n                  value: purchaseType,\n                  onChange: event => {\n                    setPurchaseType(event.target.value);\n                    event.target.value;\n                    formik.setFieldValue(\"purchaseType\", event.target.value);\n                  },\n                  SelectProps: {\n                    native: true\n                  },\n                  helperText: \"Please select purchase type\",\n                  variant: \"outlined\",\n                  children: purchaseTypes.map(option => /*#__PURE__*/_jsxDEV(\"option\", {\n                    value: option.value,\n                    children: option.label\n                  }, option.value, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 500,\n                    columnNumber: 25\n                  }, this))\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 470,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 469,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(Grid, {\n                item: true,\n                md: 4,\n                xs: 12,\n                children: /*#__PURE__*/_jsxDEV(TextField, {\n                  error: Boolean(formik.touched.purchaseRate && formik.errors.purchaseRate),\n                  variant: \"outlined\",\n                  onChange: formik.handleChange,\n                  onBlur: formik.handleBlur,\n                  helperText: formik.touched.purchaseRate && formik.errors.purchaseRate,\n                  id: \"purchaseRate\",\n                  name: \"purchaseRate\",\n                  label: \"Purchase Rate\",\n                  fullWidth: true\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 507,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 506,\n                columnNumber: 19\n              }, this), purchaseType === \"quantity\" && /*#__PURE__*/_jsxDEV(Grid, {\n                item: true,\n                md: 4,\n                xs: 6,\n                children: /*#__PURE__*/_jsxDEV(TextField, {\n                  error: Boolean(formik.touched.minimumPurchaseGuarantee && formik.errors.minimumPurchaseGuarantee),\n                  variant: \"outlined\",\n                  onChange: formik.handleChange,\n                  onBlur: formik.handleBlur,\n                  helperText: formik.touched.minimumPurchaseGuarantee && formik.errors.minimumPurchaseGuarantee,\n                  id: \"minimumPurchaseGuarantee\",\n                  name: \"minimumPurchaseGuarantee\",\n                  label: \"Min. Load Guarantee\",\n                  fullWidth: true\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 527,\n                  columnNumber: 23\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 526,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 468,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 467,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 463,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 462,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 461,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        display: \"flex\",\n        flexWrap: \"wrap\",\n        justifyContent: \"space-between\",\n        mx: -1,\n        mb: -1,\n        mt: 3\n      },\n      children: [/*#__PURE__*/_jsxDEV(Button, {\n        color: \"error\",\n        sx: {\n          m: 1,\n          mr: \"auto\"\n        },\n        children: \"Delete\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 562,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        sx: {\n          m: 1\n        },\n        variant: \"outlined\",\n        children: \"Cancel\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 571,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        sx: {\n          m: 1\n        },\n        type: \"submit\",\n        variant: \"contained\",\n        children: \"Create\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 574,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 552,\n      columnNumber: 7\n    }, this)]\n  }), void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 252,\n    columnNumber: 5\n  }, this);\n};","map":{"version":3,"sources":["/Users/pulkitshah/Desktop/truckarv2/renderer/components/dashboard/order/order-create-form.js"],"names":["React","useState","useRef","useMemo","useCallback","useRouter","toast","Yup","useFormik","moment","Box","Button","Card","CardContent","Grid","TextField","Typography","DatePicker","useAuth","DeliveryDetails","PartyAutocomplete","VehicleAutocomplete","DriverAutocomplete","GoogleMaps","orderApi","useDispatch","OrderCreateForm","props","router","dispatch","user","selectedVehicle","setSelectedVehicle","driver","setDriver","addresses","setAddresses","waypoints","saleType","setSaleType","purchaseType","setPurchaseType","saleTypes","value","label","purchaseTypes","validationShape","orderNo","number","required","test","name","exclusive","params","message","console","log","response","validateDuplicateOrderNo","error","formik","initialValues","saleDate","deliveryDetails","loading","unloading","validationSchema","object","shape","onSubmit","values","helpers","newOrder","parseInt","format","customerId","customer","id","saleRate","deliveries","JSON","stringify","vehicleId","vehicle","vehicleNumber","driverId","transporterId","transporter","purchaseRate","minimumPurchaseGuarantee","minimumSaleGuarantee","createOrder","success","err","setStatus","setErrors","submit","setSubmitting","useEffect","origin","description","length","destination","map","delivery","push","location","filter","waypoint","Map","item","handleSubmit","Boolean","touched","errors","handleBlur","event","setFieldValue","target","setFieldTouched","date","mt","mb","shrink","native","option","handleChange","display","flexWrap","justifyContent","mx","m","mr"],"mappings":"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","sourcesContent":["import React, { useState, useRef, useMemo, useCallback } from \"react\";\nimport { useRouter } from \"next/router\";\nimport toast from \"react-hot-toast\";\nimport * as Yup from \"yup\";\nimport { useFormik } from \"formik\";\nimport moment from \"moment\";\n\nimport {\n  Box,\n  Button,\n  Card,\n  CardContent,\n  Grid,\n  TextField,\n  Typography,\n} from \"@mui/material\";\nimport { DatePicker } from \"@mui/x-date-pickers/DatePicker\";\nimport { useAuth } from \"../../../hooks/use-auth\";\nimport DeliveryDetails from \"./delivery-details\";\nimport PartyAutocomplete from \"../autocompletes/party-autocomplete/party-autocomplete\";\nimport VehicleAutocomplete from \"../autocompletes/vehicle-autocomplete/vehicle-autocomplete\";\nimport DriverAutocomplete from \"../autocompletes/driver-autocomplete/driver-autocomplete\";\nimport GoogleMaps from \"./google-maps\";\nimport { orderApi } from \"../../../api/order-api\";\nimport { useDispatch } from \"../../../store\";\n\nexport const OrderCreateForm = (props) => {\n  const router = useRouter();\n  const dispatch = useDispatch();\n  const { user } = useAuth();\n  const [selectedVehicle, setSelectedVehicle] = useState(null);\n  const [driver, setDriver] = useState();\n  const [addresses, setAddresses] = useState({ waypoints: [] });\n\n  const [saleType, setSaleType] = React.useState(\"quantity\");\n  const [purchaseType, setPurchaseType] = React.useState(\"quantity\");\n\n  const saleTypes = [\n    {\n      value: \"quantity\",\n      label: \"Per Ton\",\n    },\n    {\n      value: \"fixed\",\n      label: \"Fixed\",\n    },\n  ];\n\n  const purchaseTypes = [\n    {\n      value: \"quantity\",\n      label: \"Per Ton\",\n    },\n    {\n      value: \"fixed\",\n      label: \"Fixed\",\n    },\n  ];\n\n  let validationShape = {\n    orderNo: Yup.number()\n      .required(\"Order No is required\")\n      .test({\n        name: \"Checking Duplicate Order No\",\n        exclusive: false,\n        params: {},\n        message: \"${path} must be less than 10% of the price\",\n        test: async function (value) {\n          try {\n            console.log(value);\n            const response = await orderApi.validateDuplicateOrderNo(\n              value,\n              user\n            );\n            // console.log(response);\n            return response;\n          } catch (error) {\n            console.log(error);\n          }\n        },\n      }),\n    // customer: Yup.object().nullable().required(\"Customer is required\"),\n    // vehicle: Yup.lazy((value) => {\n    //   switch (typeof value) {\n    //     case \"object\":\n    //       return Yup.object().nullable().required(\"Vehicle is required\");\n    //     case \"string\":\n    //       return Yup.string().required(\"Vehicle is required\");\n    //     default:\n    //       return Yup.string().required(\"Vehicle is required\");\n    //   }\n    // }),\n    // saleType: Yup.string().required(\"Sale is required\"),\n    // saleRate: Yup.string().required(\"Sale Rate is required\"),\n  };\n\n  if (typeof selectedVehicle === \"object\" && selectedVehicle !== null) {\n  } else {\n    // validationShape.transporter = Yup.object().required(\n    //   \"Transporter is required\"\n    // );\n    // validationShape.purchaseType = Yup.string().required(\n    //   \"Purchase is required\"\n    // );\n    // validationShape.purchaseRate = Yup.string().required(\n    //   \"Purchase Rate is required\"\n    // );\n  }\n\n  // validationShape.deliveryDetails = Yup.array().of(\n  //   Yup.object().shape({\n  //     loading: Yup.object().required(\"Loading Point is Required\"), // these constraints take precedence\n  //     unloading: Yup.object().required(\"Unloading Point is Required\"), // these constraints take precedence\n  //   })\n  // );\n\n  const formik = useFormik({\n    initialValues: {\n      saleDate: moment(),\n      saleType: saleType,\n      purchaseType: purchaseType,\n      deliveryDetails: [\n        {\n          loading: \"\",\n          unloading: \"\",\n        },\n      ],\n    },\n    validationSchema: Yup.object().shape(validationShape),\n    onSubmit: async (values, helpers) => {\n      try {\n        console.log(values);\n\n        const newOrder = {\n          orderNo: parseInt(values.orderNo),\n          saleDate: values.saleDate.format(),\n          // customer: values.customer,\n          customerId: values.customer.id,\n          saleRate: values.saleRate,\n          saleType: values.saleType,\n          user: user.id,\n          deliveries: JSON.stringify(values.deliveryDetails),\n        };\n\n        if (typeof selectedVehicle === \"object\" && selectedVehicle !== null) {\n          // newOrder.vehicle = values.vehicle;\n          newOrder.vehicleId = values.vehicle.id;\n          newOrder.vehicleNumber = values.vehicle.vehicleNumber;\n          if (values.driver) {\n            // newOrder.driver = values.driver;\n            newOrder.driverId = values.driver.id;\n          }\n        } else {\n          newOrder.vehicleNumber = values.vehicle;\n          // newOrder.transporter = values.transporter;\n          newOrder.transporterId = values.transporter.id;\n          newOrder.purchaseRate = values.purchaseRate;\n          newOrder.purchaseType = values.purchaseType;\n          if (values.minimumPurchaseGuarantee)\n            newOrder.minimumPurchaseGuarantee = values.minimumPurchaseGuarantee;\n        }\n\n        if (values.minimumSaleGuarantee)\n          newOrder.minimumSaleGuarantee = values.minimumSaleGuarantee;\n\n        console.log(newOrder);\n        await orderApi.createOrder(newOrder, dispatch);\n\n        toast.success(\"Order created!\");\n        // router.push(\"/dashboard/orders\");\n      } catch (err) {\n        console.error(err);\n        toast.error(\"Something went wrong!\");\n        helpers.setStatus({ success: false });\n        helpers.setErrors({ submit: err.message });\n        helpers.setSubmitting(false);\n      }\n    },\n  });\n\n  React.useEffect(() => {\n    setAddresses({ waypoints: [...addresses.waypoints] });\n\n    // Setting Origin\n    setAddresses((addresses) => ({\n      ...addresses,\n      ...{\n        origin: formik.values.deliveryDetails[0].loading.description,\n      },\n    }));\n\n    // Setting Destination\n    if (\n      formik.values.deliveryDetails[formik.values.deliveryDetails.length - 1]\n        .unloading.description\n    ) {\n      setAddresses((addresses) => ({\n        ...addresses,\n        ...{\n          destination:\n            formik.values.deliveryDetails[\n              formik.values.deliveryDetails.length - 1\n            ].unloading.description,\n        },\n      }));\n    }\n\n    // Setting waypoints\n\n    let waypoints = [];\n\n    formik.values.deliveryDetails.map((delivery) => {\n      if (delivery.loading.description) {\n        waypoints.push({\n          location: delivery.loading.description,\n        });\n      }\n\n      if (delivery.unloading.description) {\n        waypoints.push({\n          location: delivery.unloading.description,\n        });\n      }\n    });\n\n    waypoints = waypoints.filter(\n      (waypoint) =>\n        waypoint.location !==\n        formik.values.deliveryDetails[0].loading.description\n    );\n    waypoints = waypoints.filter(\n      (waypoint) =>\n        waypoint.location !==\n        formik.values.deliveryDetails[formik.values.deliveryDetails.length - 1]\n          .unloading.description\n    );\n\n    waypoints = [\n      ...new Map(waypoints.map((item) => [item.location, item])).values(),\n    ];\n\n    setAddresses({\n      origin: formik.values.deliveryDetails[0].loading.description,\n      destination:\n        formik.values.deliveryDetails[formik.values.deliveryDetails.length - 1]\n          .unloading.description,\n      waypoints: waypoints,\n    });\n  }, [formik.values.deliveryDetails]);\n\n  return (\n    <form onSubmit={formik.handleSubmit} {...props}>\n      <Card>\n        <CardContent>\n          <Grid container spacing={3}>\n            <Grid item md={4} xs={12}>\n              <Typography variant=\"h6\">Basic details</Typography>\n            </Grid>\n            <Grid item md={8} xs={12}>\n              <Grid container spacing={3}>\n                <Grid item md={4} xs={12}>\n                  <TextField\n                    error={Boolean(\n                      formik.touched.orderNo && formik.errors.orderNo\n                    )}\n                    fullWidth\n                    helperText={formik.touched.orderNo && formik.errors.orderNo}\n                    label=\"Order No\"\n                    name=\"orderNo\"\n                    onBlur={formik.handleBlur}\n                    onChange={(event) => {\n                      formik.setFieldValue(`orderNo`, event.target.value);\n                    }}\n                    value={formik.values.orderNo}\n                  />\n                </Grid>\n                <Grid item md={4} xs={12}>\n                  <DatePicker\n                    id=\"saleDate\"\n                    name=\"saleDate\"\n                    label=\"Sale date\"\n                    showTodayButton={true}\n                    inputFormat=\"DD/MM/YYYY\"\n                    value={formik.values.saleDate}\n                    onClick={() => setFieldTouched(\"end\")}\n                    onChange={(date) =>\n                      formik.setFieldValue(\"saleDate\", moment(date))\n                    }\n                    renderInput={(params) => (\n                      <TextField fullWidth {...params} />\n                    )}\n                  />\n                </Grid>\n                <Grid item md={4} xs={12}>\n                  <PartyAutocomplete\n                    errors={formik.errors}\n                    touched={formik.touched}\n                    setFieldValue={formik.setFieldValue}\n                    handleBlur={formik.handleBlur}\n                    type=\"customer\"\n                    user={user}\n                    formik={formik}\n                  />\n                </Grid>\n              </Grid>\n            </Grid>\n          </Grid>\n        </CardContent>\n      </Card>\n\n      <Card sx={{ mt: 3 }}>\n        <CardContent>\n          <Grid container spacing={3}>\n            <Grid sx={{ mb: 6 }} item md={4} xs={12}>\n              <Typography sx={{ mb: 3 }} variant=\"h6\">\n                Delivery details\n              </Typography>\n              <GoogleMaps addresses={addresses} />\n            </Grid>\n            <Grid item md={8} xs={12}>\n              <DeliveryDetails formik={formik} />\n            </Grid>\n          </Grid>\n        </CardContent>\n      </Card>\n      <Card sx={{ mt: 3 }}>\n        <CardContent>\n          <Grid container spacing={3}>\n            <Grid item md={4} xs={12}>\n              <Typography variant=\"h6\">Vehicle details</Typography>\n            </Grid>\n            <Grid item md={8} xs={12}>\n              <Grid container spacing={3}>\n                <Grid item md={4} xs={12}>\n                  <VehicleAutocomplete\n                    errors={formik.errors}\n                    touched={formik.touched}\n                    setFieldValue={formik.setFieldValue}\n                    handleBlur={formik.handleBlur}\n                    setSelectedVehicle={setSelectedVehicle}\n                    setDriver={setDriver}\n                    user={user}\n                  />\n                </Grid>\n                <Grid item md={4} xs={12}>\n                  {typeof selectedVehicle === \"object\" &&\n                  selectedVehicle !== null ? (\n                    <DriverAutocomplete\n                      errors={formik.errors}\n                      touched={formik.touched}\n                      setFieldValue={formik.setFieldValue}\n                      handleBlur={formik.handleBlur}\n                      setSelectedVehicle={setSelectedVehicle}\n                      setDriver={setDriver}\n                      user={user}\n                      values={formik.values}\n                    />\n                  ) : (\n                    selectedVehicle !== null && (\n                      <PartyAutocomplete\n                        errors={formik.errors}\n                        touched={formik.touched}\n                        setFieldValue={formik.setFieldValue}\n                        handleBlur={formik.handleBlur}\n                        type=\"transporter\"\n                        user={user}\n                        formik={formik}\n                      />\n                    )\n                  )}\n                </Grid>\n              </Grid>\n            </Grid>\n          </Grid>\n        </CardContent>\n      </Card>\n      <Card sx={{ mt: 3 }}>\n        <CardContent>\n          <Grid container spacing={3}>\n            <Grid item md={4} xs={12}>\n              <Typography variant=\"h6\">Sale details</Typography>\n            </Grid>\n            <Grid item md={8} xs={12}>\n              <Grid container spacing={3}>\n                <Grid item md={4} xs={12}>\n                  <TextField\n                    error={Boolean(\n                      formik.touched.saleType && formik.errors.saleType\n                    )}\n                    onBlur={formik.handleBlur}\n                    name=\"saleType\"\n                    label=\"Sale Type\"\n                    InputLabelProps={{\n                      shrink: true,\n                    }}\n                    fullWidth\n                    id=\"saleType\"\n                    select\n                    value={saleType}\n                    onChange={(event) => {\n                      setSaleType(event.target.value);\n                      formik.setFieldValue(\"saleType\", event.target.value);\n                    }}\n                    SelectProps={{\n                      native: true,\n                    }}\n                    helperText=\"Please select sale type\"\n                    variant=\"outlined\"\n                  >\n                    {saleTypes.map((option) => (\n                      <option key={option.value} value={option.value}>\n                        {option.label}\n                      </option>\n                    ))}\n                  </TextField>\n                </Grid>\n                <Grid item md={4} xs={12}>\n                  <TextField\n                    error={Boolean(\n                      formik.touched.saleRate && formik.errors.saleRate\n                    )}\n                    variant=\"outlined\"\n                    onChange={formik.handleChange}\n                    onBlur={formik.handleBlur}\n                    helperText={\n                      formik.touched.saleRate && formik.errors.saleRate\n                    }\n                    id=\"saleRate\"\n                    name=\"saleRate\"\n                    label=\"Sale Rate\"\n                    fullWidth\n                  />\n                </Grid>\n                {saleType === \"quantity\" && (\n                  <Grid item md={4} xs={6}>\n                    <TextField\n                      error={Boolean(\n                        formik.touched.minimumSaleGuarantee &&\n                          formik.errors.minimumSaleGuarantee\n                      )}\n                      variant=\"outlined\"\n                      onChange={formik.handleChange}\n                      onBlur={formik.handleBlur}\n                      helperText={\n                        formik.touched.minimumSaleGuarantee &&\n                        formik.errors.minimumSaleGuarantee\n                      }\n                      id=\"minimumSaleGuarantee\"\n                      name=\"minimumSaleGuarantee\"\n                      label=\"Min. Load Guarantee\"\n                      fullWidth\n                    />\n                  </Grid>\n                )}\n              </Grid>\n            </Grid>\n          </Grid>\n        </CardContent>\n      </Card>\n      {!(typeof selectedVehicle === \"object\") && selectedVehicle !== null && (\n        <Card sx={{ mt: 3 }}>\n          <CardContent>\n            <Grid container spacing={3}>\n              <Grid item md={4} xs={12}>\n                <Typography variant=\"h6\">Purchase details</Typography>\n              </Grid>\n              <Grid item md={8} xs={12}>\n                <Grid container spacing={3}>\n                  <Grid item md={4} xs={12}>\n                    <TextField\n                      error={Boolean(\n                        formik.touched.purchaseType &&\n                          formik.errors.purchaseType\n                      )}\n                      onBlur={formik.handleBlur}\n                      name=\"purchaseType\"\n                      label=\"Purchase Type\"\n                      InputLabelProps={{\n                        shrink: true,\n                      }}\n                      fullWidth\n                      id=\"purchaseType\"\n                      select\n                      value={purchaseType}\n                      onChange={(event) => {\n                        setPurchaseType(event.target.value);\n                        event.target.value;\n                        formik.setFieldValue(\n                          \"purchaseType\",\n                          event.target.value\n                        );\n                      }}\n                      SelectProps={{\n                        native: true,\n                      }}\n                      helperText=\"Please select purchase type\"\n                      variant=\"outlined\"\n                    >\n                      {purchaseTypes.map((option) => (\n                        <option key={option.value} value={option.value}>\n                          {option.label}\n                        </option>\n                      ))}\n                    </TextField>\n                  </Grid>\n                  <Grid item md={4} xs={12}>\n                    <TextField\n                      error={Boolean(\n                        formik.touched.purchaseRate &&\n                          formik.errors.purchaseRate\n                      )}\n                      variant=\"outlined\"\n                      onChange={formik.handleChange}\n                      onBlur={formik.handleBlur}\n                      helperText={\n                        formik.touched.purchaseRate &&\n                        formik.errors.purchaseRate\n                      }\n                      id=\"purchaseRate\"\n                      name=\"purchaseRate\"\n                      label=\"Purchase Rate\"\n                      fullWidth\n                    />\n                  </Grid>\n                  {purchaseType === \"quantity\" && (\n                    <Grid item md={4} xs={6}>\n                      <TextField\n                        error={Boolean(\n                          formik.touched.minimumPurchaseGuarantee &&\n                            formik.errors.minimumPurchaseGuarantee\n                        )}\n                        variant=\"outlined\"\n                        onChange={formik.handleChange}\n                        onBlur={formik.handleBlur}\n                        helperText={\n                          formik.touched.minimumPurchaseGuarantee &&\n                          formik.errors.minimumPurchaseGuarantee\n                        }\n                        id=\"minimumPurchaseGuarantee\"\n                        name=\"minimumPurchaseGuarantee\"\n                        label=\"Min. Load Guarantee\"\n                        fullWidth\n                      />\n                    </Grid>\n                  )}\n                </Grid>\n              </Grid>\n            </Grid>\n          </CardContent>\n        </Card>\n      )}\n      <Box\n        sx={{\n          display: \"flex\",\n          flexWrap: \"wrap\",\n          justifyContent: \"space-between\",\n          mx: -1,\n          mb: -1,\n          mt: 3,\n        }}\n      >\n        <Button\n          color=\"error\"\n          sx={{\n            m: 1,\n            mr: \"auto\",\n          }}\n        >\n          Delete\n        </Button>\n        <Button sx={{ m: 1 }} variant=\"outlined\">\n          Cancel\n        </Button>\n        <Button sx={{ m: 1 }} type=\"submit\" variant=\"contained\">\n          Create\n        </Button>\n      </Box>\n    </form>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}