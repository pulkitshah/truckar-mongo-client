{"ast":null,"code":"import { createResourceId } from \"../utils/create-resource-id\";\nimport { sign, decode, JWT_SECRET, JWT_EXPIRES_IN } from \"../utils/jwt\";\nimport { wait } from \"../utils/wait\";\nimport { fetchApiResult } from \"../helper\";\nconst users = [{\n  id: \"5e86809283e28b96d2d38537\",\n  avatar: \"/static/mock-images/avatars/avatar-anika_visser.png\",\n  email: \"demo@devias.io\",\n  name: \"Anika Visser\",\n  password: \"Password123!\",\n  plan: \"Premium\"\n}];\n\nclass AuthApi {\n  async login({\n    email,\n    password\n  }) {\n    const response = await fetchApiResult(`/api/auth`, \"post\", {\n      email,\n      password\n    });\n    return response;\n  }\n\n  async register({\n    email,\n    name,\n    password\n  }) {\n    await wait(1000);\n    return new Promise((resolve, reject) => {\n      try {\n        // Check if a user already exists\n        let user = users.find(_user => _user.email === email);\n\n        if (user) {\n          reject(new Error(\"User already exists\"));\n          return;\n        }\n\n        user = {\n          id: createResourceId(),\n          avatar: null,\n          email,\n          name,\n          password,\n          plan: \"Standard\"\n        };\n        users.push(user);\n        const accessToken = sign({\n          userId: user.id\n        }, JWT_SECRET, {\n          expiresIn: JWT_EXPIRES_IN\n        });\n        resolve(accessToken);\n      } catch (err) {\n        console.error(\"[Auth Api]: \", err);\n        reject(new Error(\"Internal server error\"));\n      }\n    });\n  }\n\n  async me() {\n    return await fetchApiResult(`/api/auth`, \"get\");\n  }\n\n}\n\nexport const authApi = new AuthApi();","map":{"version":3,"sources":["/Users/pulkitshah/Desktop/truckarv2/renderer/api/auth-api.js"],"names":["createResourceId","sign","decode","JWT_SECRET","JWT_EXPIRES_IN","wait","fetchApiResult","users","id","avatar","email","name","password","plan","AuthApi","login","response","register","Promise","resolve","reject","user","find","_user","Error","push","accessToken","userId","expiresIn","err","console","error","me","authApi"],"mappings":"AAAA,SAASA,gBAAT,QAAiC,6BAAjC;AACA,SAASC,IAAT,EAAeC,MAAf,EAAuBC,UAAvB,EAAmCC,cAAnC,QAAyD,cAAzD;AACA,SAASC,IAAT,QAAqB,eAArB;AACA,SAASC,cAAT,QAA+B,WAA/B;AAEA,MAAMC,KAAK,GAAG,CACZ;AACEC,EAAAA,EAAE,EAAE,0BADN;AAEEC,EAAAA,MAAM,EAAE,qDAFV;AAGEC,EAAAA,KAAK,EAAE,gBAHT;AAIEC,EAAAA,IAAI,EAAE,cAJR;AAKEC,EAAAA,QAAQ,EAAE,cALZ;AAMEC,EAAAA,IAAI,EAAE;AANR,CADY,CAAd;;AAWA,MAAMC,OAAN,CAAc;AACZ,QAAMC,KAAN,CAAY;AAAEL,IAAAA,KAAF;AAASE,IAAAA;AAAT,GAAZ,EAAiC;AAC/B,UAAMI,QAAQ,GAAG,MAAMV,cAAc,CAAE,WAAF,EAAc,MAAd,EAAsB;AACzDI,MAAAA,KADyD;AAEzDE,MAAAA;AAFyD,KAAtB,CAArC;AAIA,WAAOI,QAAP;AACD;;AAED,QAAMC,QAAN,CAAe;AAAEP,IAAAA,KAAF;AAASC,IAAAA,IAAT;AAAeC,IAAAA;AAAf,GAAf,EAA0C;AACxC,UAAMP,IAAI,CAAC,IAAD,CAAV;AAEA,WAAO,IAAIa,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtC,UAAI;AACF;AACA,YAAIC,IAAI,GAAGd,KAAK,CAACe,IAAN,CAAYC,KAAD,IAAWA,KAAK,CAACb,KAAN,KAAgBA,KAAtC,CAAX;;AAEA,YAAIW,IAAJ,EAAU;AACRD,UAAAA,MAAM,CAAC,IAAII,KAAJ,CAAU,qBAAV,CAAD,CAAN;AACA;AACD;;AAEDH,QAAAA,IAAI,GAAG;AACLb,UAAAA,EAAE,EAAER,gBAAgB,EADf;AAELS,UAAAA,MAAM,EAAE,IAFH;AAGLC,UAAAA,KAHK;AAILC,UAAAA,IAJK;AAKLC,UAAAA,QALK;AAMLC,UAAAA,IAAI,EAAE;AAND,SAAP;AASAN,QAAAA,KAAK,CAACkB,IAAN,CAAWJ,IAAX;AAEA,cAAMK,WAAW,GAAGzB,IAAI,CAAC;AAAE0B,UAAAA,MAAM,EAAEN,IAAI,CAACb;AAAf,SAAD,EAAsBL,UAAtB,EAAkC;AACxDyB,UAAAA,SAAS,EAAExB;AAD6C,SAAlC,CAAxB;AAIAe,QAAAA,OAAO,CAACO,WAAD,CAAP;AACD,OAzBD,CAyBE,OAAOG,GAAP,EAAY;AACZC,QAAAA,OAAO,CAACC,KAAR,CAAc,cAAd,EAA8BF,GAA9B;AACAT,QAAAA,MAAM,CAAC,IAAII,KAAJ,CAAU,uBAAV,CAAD,CAAN;AACD;AACF,KA9BM,CAAP;AA+BD;;AAED,QAAMQ,EAAN,GAAW;AACT,WAAO,MAAM1B,cAAc,CAAE,WAAF,EAAc,KAAd,CAA3B;AACD;;AA/CW;;AAkDd,OAAO,MAAM2B,OAAO,GAAG,IAAInB,OAAJ,EAAhB","sourcesContent":["import { createResourceId } from \"../utils/create-resource-id\";\nimport { sign, decode, JWT_SECRET, JWT_EXPIRES_IN } from \"../utils/jwt\";\nimport { wait } from \"../utils/wait\";\nimport { fetchApiResult } from \"../helper\";\n\nconst users = [\n  {\n    id: \"5e86809283e28b96d2d38537\",\n    avatar: \"/static/mock-images/avatars/avatar-anika_visser.png\",\n    email: \"demo@devias.io\",\n    name: \"Anika Visser\",\n    password: \"Password123!\",\n    plan: \"Premium\",\n  },\n];\n\nclass AuthApi {\n  async login({ email, password }) {\n    const response = await fetchApiResult(`/api/auth`, \"post\", {\n      email,\n      password,\n    });\n    return response;\n  }\n\n  async register({ email, name, password }) {\n    await wait(1000);\n\n    return new Promise((resolve, reject) => {\n      try {\n        // Check if a user already exists\n        let user = users.find((_user) => _user.email === email);\n\n        if (user) {\n          reject(new Error(\"User already exists\"));\n          return;\n        }\n\n        user = {\n          id: createResourceId(),\n          avatar: null,\n          email,\n          name,\n          password,\n          plan: \"Standard\",\n        };\n\n        users.push(user);\n\n        const accessToken = sign({ userId: user.id }, JWT_SECRET, {\n          expiresIn: JWT_EXPIRES_IN,\n        });\n\n        resolve(accessToken);\n      } catch (err) {\n        console.error(\"[Auth Api]: \", err);\n        reject(new Error(\"Internal server error\"));\n      }\n    });\n  }\n\n  async me() {\n    return await fetchApiResult(`/api/auth`, \"get\");\n  }\n}\n\nexport const authApi = new AuthApi();\n"]},"metadata":{},"sourceType":"module"}