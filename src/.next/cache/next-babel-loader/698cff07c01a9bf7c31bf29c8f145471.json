{"ast":null,"code":"import _defineProperty from \"/Users/pulkitshah/Desktop/truckarv2/node_modules/next/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _toConsumableArray from \"/Users/pulkitshah/Desktop/truckarv2/node_modules/next/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _regeneratorRuntime from \"/Users/pulkitshah/Desktop/truckarv2/node_modules/next/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/pulkitshah/Desktop/truckarv2/node_modules/next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/pulkitshah/Desktop/truckarv2/renderer/components/dashboard/welcome/branch-create-form.js\",\n    _this = this,\n    _s = $RefreshSig$();\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { useState } from \"react\";\nimport { useRouter } from \"next/router\";\nimport toast from \"react-hot-toast\";\nimport * as Yup from \"yup\";\nimport { useFormik } from \"formik\";\nimport { Box, Button, Card, CardContent, Divider, FormControlLabel, FormHelperText, Grid, MenuItem, Switch, TextField, Typography } from \"@mui/material\";\nimport { FileDropzone } from \"../../file-dropzone\";\nimport { QuillEditor } from \"../../quill-editor\";\nimport GoogleMaps from \"./google-places-autocomplete\";\nvar categoryOptions = [{\n  label: \"Healthcare\",\n  value: \"healthcare\"\n}, {\n  label: \"Makeup\",\n  value: \"makeup\"\n}, {\n  label: \"Dress\",\n  value: \"dress\"\n}, {\n  label: \"Skincare\",\n  value: \"skincare\"\n}, {\n  label: \"Jewelry\",\n  value: \"jewelry\"\n}, {\n  label: \"Blouse\",\n  value: \"blouse\"\n}];\nexport var BranchCreateForm = function BranchCreateForm(props) {\n  _s();\n\n  var router = useRouter();\n\n  var _useState = useState([]),\n      files = _useState[0],\n      setFiles = _useState[1];\n\n  var formik = useFormik({\n    ref: formRef,\n    initialValues: {\n      name: \"\",\n      addressLine1: \"\",\n      addressLine2: \"\",\n      city: \"\",\n      submit: null\n    },\n    validationSchema: Yup.object({\n      name: Yup.string().max(255).required(\"Name is required\"),\n      addressLine1: Yup.string().max(255).required(\"Address Line 1 is required\"),\n      city: Yup.object().required(\"City is required\")\n    }),\n    onSubmit: function () {\n      var _onSubmit = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(values, helpers) {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                try {\n                  // NOTE: Make API request\n                  toast.success(\"Branch created!\"); // router.push(\"/dashboard/branches\");\n                } catch (err) {\n                  console.error(err);\n                  toast.error(\"Something went wrong!\");\n                  helpers.setStatus({\n                    success: false\n                  });\n                  helpers.setErrors({\n                    submit: err.message\n                  });\n                  helpers.setSubmitting(false);\n                }\n\n              case 1:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      function onSubmit(_x, _x2) {\n        return _onSubmit.apply(this, arguments);\n      }\n\n      return onSubmit;\n    }()\n  });\n\n  var handleDrop = function handleDrop(newFiles) {\n    setFiles(function (prevFiles) {\n      return [].concat(_toConsumableArray(prevFiles), _toConsumableArray(newFiles));\n    });\n  };\n\n  var handleRemove = function handleRemove(file) {\n    setFiles(function (prevFiles) {\n      return prevFiles.filter(function (_file) {\n        return _file.path !== file.path;\n      });\n    });\n  };\n\n  var handleRemoveAll = function handleRemoveAll() {\n    setFiles([]);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"form\", _objectSpread(_objectSpread({\n    onSubmit: formik.handleSubmit\n  }, props), {}, {\n    children: /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      spacing: 5,\n      alignItems: \"center\",\n      sx: {\n        mb: 4,\n        mt: 2\n      },\n      children: [/*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        md: 4,\n        xs: 12,\n        children: /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h6\",\n          children: \"Tell us your city\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 11\n        }, _this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 9\n      }, _this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        md: 8,\n        xs: 12,\n        children: /*#__PURE__*/_jsxDEV(GoogleMaps, {\n          formik: formik,\n          error: Boolean(formik.touched.city && formik.errors.city),\n          label: \"Your city in India\",\n          field: \"city\",\n          setFieldValue: formik.setFieldValue,\n          handleBlur: formik.handleBlur,\n          values: formik.values\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 11\n        }, _this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 9\n      }, _this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12,\n        children: /*#__PURE__*/_jsxDEV(Divider, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 11\n        }, _this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 9\n      }, _this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        md: 4,\n        xs: 12,\n        children: /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h6\",\n          children: \"Please pick a name\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 11\n        }, _this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 9\n      }, _this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        md: 8,\n        xs: 12,\n        children: /*#__PURE__*/_jsxDEV(TextField, {\n          error: Boolean(formik.touched.branchname && formik.errors.branchname),\n          fullWidth: true,\n          helperText: formik.touched.branchname && formik.errors.branchname,\n          label: \"Your branch name\",\n          name: \"branchname\",\n          onBlur: formik.handleBlur,\n          onChange: formik.handleChange,\n          value: formik.values.branchname\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 11\n        }, _this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 9\n      }, _this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }, _this)\n  }), void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 99,\n    columnNumber: 5\n  }, _this);\n};\n\n_s(BranchCreateForm, \"GNu3yrEtc6xue3/XcNWye6ldsy0=\", false, function () {\n  return [useRouter, useFormik];\n});\n\n_c = BranchCreateForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"BranchCreateForm\");","map":{"version":3,"sources":["/Users/pulkitshah/Desktop/truckarv2/renderer/components/dashboard/welcome/branch-create-form.js"],"names":["useState","useRouter","toast","Yup","useFormik","Box","Button","Card","CardContent","Divider","FormControlLabel","FormHelperText","Grid","MenuItem","Switch","TextField","Typography","FileDropzone","QuillEditor","GoogleMaps","categoryOptions","label","value","BranchCreateForm","props","router","files","setFiles","formik","ref","formRef","initialValues","name","addressLine1","addressLine2","city","submit","validationSchema","object","string","max","required","onSubmit","values","helpers","success","err","console","error","setStatus","setErrors","message","setSubmitting","handleDrop","newFiles","prevFiles","handleRemove","file","filter","_file","path","handleRemoveAll","handleSubmit","mb","mt","Boolean","touched","errors","setFieldValue","handleBlur","branchname","handleChange"],"mappings":"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","sourcesContent":["import { useState } from \"react\";\nimport { useRouter } from \"next/router\";\nimport toast from \"react-hot-toast\";\nimport * as Yup from \"yup\";\nimport { useFormik } from \"formik\";\nimport {\n  Box,\n  Button,\n  Card,\n  CardContent,\n  Divider,\n  FormControlLabel,\n  FormHelperText,\n  Grid,\n  MenuItem,\n  Switch,\n  TextField,\n  Typography,\n} from \"@mui/material\";\nimport { FileDropzone } from \"../../file-dropzone\";\nimport { QuillEditor } from \"../../quill-editor\";\nimport GoogleMaps from \"./google-places-autocomplete\";\nconst categoryOptions = [\n  {\n    label: \"Healthcare\",\n    value: \"healthcare\",\n  },\n  {\n    label: \"Makeup\",\n    value: \"makeup\",\n  },\n  {\n    label: \"Dress\",\n    value: \"dress\",\n  },\n  {\n    label: \"Skincare\",\n    value: \"skincare\",\n  },\n  {\n    label: \"Jewelry\",\n    value: \"jewelry\",\n  },\n  {\n    label: \"Blouse\",\n    value: \"blouse\",\n  },\n];\n\nexport const BranchCreateForm = (props) => {\n  const router = useRouter();\n  const [files, setFiles] = useState([]);\n  const formik = useFormik({\n    ref: formRef,\n    initialValues: {\n      name: \"\",\n      addressLine1: \"\",\n      addressLine2: \"\",\n      city: \"\",\n      submit: null,\n    },\n    validationSchema: Yup.object({\n      name: Yup.string().max(255).required(\"Name is required\"),\n      addressLine1: Yup.string()\n        .max(255)\n        .required(\"Address Line 1 is required\"),\n      city: Yup.object().required(\"City is required\"),\n    }),\n    onSubmit: async (values, helpers) => {\n      try {\n        // NOTE: Make API request\n        toast.success(\"Branch created!\");\n        // router.push(\"/dashboard/branches\");\n      } catch (err) {\n        console.error(err);\n        toast.error(\"Something went wrong!\");\n        helpers.setStatus({ success: false });\n        helpers.setErrors({ submit: err.message });\n        helpers.setSubmitting(false);\n      }\n    },\n  });\n\n  const handleDrop = (newFiles) => {\n    setFiles((prevFiles) => [...prevFiles, ...newFiles]);\n  };\n\n  const handleRemove = (file) => {\n    setFiles((prevFiles) =>\n      prevFiles.filter((_file) => _file.path !== file.path)\n    );\n  };\n\n  const handleRemoveAll = () => {\n    setFiles([]);\n  };\n\n  return (\n    <form onSubmit={formik.handleSubmit} {...props}>\n      <Grid container spacing={5} alignItems=\"center\" sx={{ mb: 4, mt: 2 }}>\n        <Grid item md={4} xs={12}>\n          <Typography variant=\"h6\">Tell us your city</Typography>\n        </Grid>\n        <Grid item md={8} xs={12}>\n          <GoogleMaps\n            formik={formik}\n            error={Boolean(formik.touched.city && formik.errors.city)}\n            label={\"Your city in India\"}\n            field={\"city\"}\n            setFieldValue={formik.setFieldValue}\n            handleBlur={formik.handleBlur}\n            values={formik.values}\n          />\n        </Grid>\n        <Grid item xs={12}>\n          <Divider />\n        </Grid>\n        <Grid item md={4} xs={12}>\n          <Typography variant=\"h6\">Please pick a name</Typography>\n        </Grid>\n        <Grid item md={8} xs={12}>\n          <TextField\n            error={Boolean(\n              formik.touched.branchname && formik.errors.branchname\n            )}\n            fullWidth\n            helperText={formik.touched.branchname && formik.errors.branchname}\n            label=\"Your branch name\"\n            name=\"branchname\"\n            onBlur={formik.handleBlur}\n            onChange={formik.handleChange}\n            value={formik.values.branchname}\n          />\n        </Grid>\n      </Grid>\n    </form>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}