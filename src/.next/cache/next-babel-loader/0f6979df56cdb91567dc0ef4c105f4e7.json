{"ast":null,"code":"import _defineProperty from \"/Users/pulkitshah/Desktop/truckarv2/node_modules/next/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _regeneratorRuntime from \"/Users/pulkitshah/Desktop/truckarv2/node_modules/next/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/pulkitshah/Desktop/truckarv2/node_modules/next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _objectWithoutProperties from \"/Users/pulkitshah/Desktop/truckarv2/node_modules/next/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/pulkitshah/Desktop/truckarv2/renderer/components/dashboard/welcome/branch-create-form.js\",\n    _this = this,\n    _s = $RefreshSig$();\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { forwardRef, useImperativeHandle } from \"react\";\nimport toast from \"react-hot-toast\";\nimport * as Yup from \"yup\";\nimport { useFormik } from \"formik\";\nimport { Divider, Grid, TextField, Typography } from \"@mui/material\";\nimport GoogleMaps from \"./google-places-autocomplete\";\nimport { useAuth } from \"../../../hooks/use-auth\";\nexport var BranchCreateForm = /*#__PURE__*/forwardRef(_c = _s(function (_ref, ref) {\n  _s();\n\n  var handleNext = _ref.handleNext,\n      setActiveStep = _ref.setActiveStep,\n      props = _objectWithoutProperties(_ref, [\"handleNext\", \"setActiveStep\"]);\n\n  var _useAuth = useAuth(),\n      user = _useAuth.user;\n\n  useImperativeHandle(ref, function () {\n    return {\n      handleFormSubmit: function handleFormSubmit() {\n        console.log(\"ad\");\n        formik.handleSubmit();\n      }\n    };\n  });\n  var formik = useFormik({\n    initialValues: {\n      branchName: \"\",\n      city: \"\",\n      submit: null\n    },\n    validationSchema: Yup.object({\n      branchName: Yup.string().max(255).required(\"Please enter a branch name.\"),\n      // addressLine1: Yup.string()\n      //   .max(255)\n      //   .required(\"Address Line 1 is required\"),\n      city: Yup.object().required(\"Please select a city.\")\n    }),\n    onSubmit: function () {\n      var _onSubmit = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(values, helpers) {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                try {\n                  console.log(values); // NOTE: Make API request\n\n                  toast.success(\"Branch created!\");\n                  setActiveStep(1); // props.handlenext();\n                  // router.push(\"/dashboard/branches\");\n                } catch (err) {\n                  console.error(err);\n                  toast.error(\"Something went wrong!\");\n                  helpers.setStatus({\n                    success: false\n                  });\n                  helpers.setErrors({\n                    submit: err.message\n                  });\n                  helpers.setSubmitting(false);\n                }\n\n              case 1:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      function onSubmit(_x, _x2) {\n        return _onSubmit.apply(this, arguments);\n      }\n\n      return onSubmit;\n    }()\n  });\n  return /*#__PURE__*/_jsxDEV(\"form\", _objectSpread(_objectSpread({\n    onSubmit: formik.handleSubmit\n  }, props), {}, {\n    children: /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      spacing: 5,\n      alignItems: \"center\",\n      sx: {\n        mb: 4,\n        mt: 2\n      },\n      children: [/*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        md: 4,\n        xs: 12,\n        children: /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h6\",\n          children: \"Tell us your city\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 13\n        }, _this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 11\n      }, _this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        md: 8,\n        xs: 12,\n        children: /*#__PURE__*/_jsxDEV(GoogleMaps, {\n          formik: formik,\n          error: Boolean(formik.touched.city && formik.errors.city),\n          label: \"Your city in India\",\n          field: \"city\",\n          setFieldValue: formik.setFieldValue,\n          handleBlur: formik.handleBlur,\n          values: formik.values\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 13\n        }, _this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 11\n      }, _this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12,\n        children: /*#__PURE__*/_jsxDEV(Divider, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 13\n        }, _this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 11\n      }, _this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        md: 4,\n        xs: 12,\n        children: /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h6\",\n          children: \"Please pick a name\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 13\n        }, _this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 11\n      }, _this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        md: 8,\n        xs: 12,\n        children: /*#__PURE__*/_jsxDEV(TextField, {\n          error: Boolean(formik.touched.branchName && formik.errors.branchName),\n          fullWidth: true,\n          helperText: formik.touched.branchName && formik.errors.branchName,\n          label: \"Your branch name\",\n          name: \"branchName\",\n          onBlur: formik.handleBlur,\n          onChange: formik.handleChange,\n          value: formik.values.branchName\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 13\n        }, _this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 11\n      }, _this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 9\n    }, _this)\n  }), void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 7\n  }, _this);\n}, \"v4NJXAgK3pIALCIGgiDXUqTW4pQ=\", false, function () {\n  return [useAuth, useImperativeHandle, useFormik];\n}));\n_c2 = BranchCreateForm;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"BranchCreateForm$forwardRef\");\n$RefreshReg$(_c2, \"BranchCreateForm\");","map":{"version":3,"sources":["/Users/pulkitshah/Desktop/truckarv2/renderer/components/dashboard/welcome/branch-create-form.js"],"names":["forwardRef","useImperativeHandle","toast","Yup","useFormik","Divider","Grid","TextField","Typography","GoogleMaps","useAuth","BranchCreateForm","ref","handleNext","setActiveStep","props","user","handleFormSubmit","console","log","formik","handleSubmit","initialValues","branchName","city","submit","validationSchema","object","string","max","required","onSubmit","values","helpers","success","err","error","setStatus","setErrors","message","setSubmitting","mb","mt","Boolean","touched","errors","setFieldValue","handleBlur","handleChange"],"mappings":"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","sourcesContent":["import { forwardRef, useImperativeHandle } from \"react\";\nimport toast from \"react-hot-toast\";\nimport * as Yup from \"yup\";\nimport { useFormik } from \"formik\";\nimport { Divider, Grid, TextField, Typography } from \"@mui/material\";\nimport GoogleMaps from \"./google-places-autocomplete\";\nimport { useAuth } from \"../../../hooks/use-auth\";\n\nexport const BranchCreateForm = forwardRef(\n  ({ handleNext, setActiveStep, ...props }, ref) => {\n    const { user } = useAuth();\n\n    useImperativeHandle(ref, () => ({\n      handleFormSubmit() {\n        console.log(\"ad\");\n        formik.handleSubmit();\n      },\n    }));\n\n    const formik = useFormik({\n      initialValues: {\n        branchName: \"\",\n        city: \"\",\n        submit: null,\n      },\n      validationSchema: Yup.object({\n        branchName: Yup.string()\n          .max(255)\n          .required(\"Please enter a branch name.\"),\n        // addressLine1: Yup.string()\n        //   .max(255)\n        //   .required(\"Address Line 1 is required\"),\n        city: Yup.object().required(\"Please select a city.\"),\n      }),\n      onSubmit: async (values, helpers) => {\n        try {\n          console.log(values);\n          // NOTE: Make API request\n          toast.success(\"Branch created!\");\n          setActiveStep(1);\n          // props.handlenext();\n          // router.push(\"/dashboard/branches\");\n        } catch (err) {\n          console.error(err);\n          toast.error(\"Something went wrong!\");\n          helpers.setStatus({ success: false });\n          helpers.setErrors({ submit: err.message });\n          helpers.setSubmitting(false);\n        }\n      },\n    });\n\n    return (\n      <form onSubmit={formik.handleSubmit} {...props}>\n        <Grid container spacing={5} alignItems=\"center\" sx={{ mb: 4, mt: 2 }}>\n          <Grid item md={4} xs={12}>\n            <Typography variant=\"h6\">Tell us your city</Typography>\n          </Grid>\n          <Grid item md={8} xs={12}>\n            <GoogleMaps\n              formik={formik}\n              error={Boolean(formik.touched.city && formik.errors.city)}\n              label={\"Your city in India\"}\n              field={\"city\"}\n              setFieldValue={formik.setFieldValue}\n              handleBlur={formik.handleBlur}\n              values={formik.values}\n            />\n          </Grid>\n          <Grid item xs={12}>\n            <Divider />\n          </Grid>\n          <Grid item md={4} xs={12}>\n            <Typography variant=\"h6\">Please pick a name</Typography>\n          </Grid>\n          <Grid item md={8} xs={12}>\n            <TextField\n              error={Boolean(\n                formik.touched.branchName && formik.errors.branchName\n              )}\n              fullWidth\n              helperText={formik.touched.branchName && formik.errors.branchName}\n              label=\"Your branch name\"\n              name=\"branchName\"\n              onBlur={formik.handleBlur}\n              onChange={formik.handleChange}\n              value={formik.values.branchName}\n            />\n          </Grid>\n        </Grid>\n      </form>\n    );\n  }\n);\n"]},"metadata":{},"sourceType":"module"}