{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/pulkitshah/Desktop/truckarv2/renderer/components/dashboard/order/delivery-details-grid.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from \"react\";\nimport { DataGrid } from \"@mui/x-data-grid\";\nimport { deliveryDetailsTable, orderTable } from \"../../grids/grid-columns\";\n\nconst Table = ({\n  order,\n  deliveries\n}) => {\n  const getOrderUnit = order => {\n    switch (JSON.parse(order.saleType).value) {\n      case \"quantity\":\n        return `${JSON.parse(order.saleType).unit}`;\n        break;\n\n      case \"fixed\":\n        return `(Fixed)`;\n        break;\n\n      case \"time\":\n        return `${JSON.parse(order.saleType).unit}`;\n        break;\n\n      default:\n        break;\n    }\n  };\n\n  const processRowUpdate = React.useCallback(async newRow => {\n    // Make the HTTP request to save in the backend\n    let order = newRow.order;\n    delete newRow.order;\n    let newDeliveries = JSON.parse(order.deliveries).map(del => {\n      if (del.id !== newRow.id) {\n        return del;\n      } else {\n        return newRow;\n      }\n    });\n\n    let newOrder = _objectSpread(_objectSpread({}, order), {}, {\n      deliveries: JSON.stringify(newDeliveries)\n    });\n\n    console.log(newOrder); // const response = await mutateRow(newRow);\n    // return response;\n  }, []);\n  deliveries.map(del => {\n    del.order = order;\n    del.unit = getOrderUnit(order);\n    return del;\n  });\n  return /*#__PURE__*/_jsxDEV(DataGrid, {\n    rows: deliveries,\n    autoHeight: true,\n    columns: deliveryDetailsTable,\n    disableSelectionOnClick: true,\n    experimentalFeatures: {\n      newEditingApi: true\n    },\n    processRowUpdate: processRowUpdate\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 5\n  }, this);\n};\n\nexport default Table;","map":{"version":3,"sources":["/Users/pulkitshah/Desktop/truckarv2/renderer/components/dashboard/order/delivery-details-grid.js"],"names":["React","DataGrid","deliveryDetailsTable","orderTable","Table","order","deliveries","getOrderUnit","JSON","parse","saleType","value","unit","processRowUpdate","useCallback","newRow","newDeliveries","map","del","id","newOrder","stringify","console","log","newEditingApi"],"mappings":";;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,QAAyB,kBAAzB;AACA,SAASC,oBAAT,EAA+BC,UAA/B,QAAiD,0BAAjD;;AAEA,MAAMC,KAAK,GAAG,CAAC;AAAEC,EAAAA,KAAF;AAASC,EAAAA;AAAT,CAAD,KAA2B;AACvC,QAAMC,YAAY,GAAIF,KAAD,IAAW;AAC9B,YAAQG,IAAI,CAACC,KAAL,CAAWJ,KAAK,CAACK,QAAjB,EAA2BC,KAAnC;AACE,WAAK,UAAL;AACE,eAAQ,GAAEH,IAAI,CAACC,KAAL,CAAWJ,KAAK,CAACK,QAAjB,EAA2BE,IAAK,EAA1C;AACA;;AACF,WAAK,OAAL;AACE,eAAQ,SAAR;AACA;;AACF,WAAK,MAAL;AACE,eAAQ,GAAEJ,IAAI,CAACC,KAAL,CAAWJ,KAAK,CAACK,QAAjB,EAA2BE,IAAK,EAA1C;AACA;;AACF;AACE;AAXJ;AAaD,GAdD;;AAgBA,QAAMC,gBAAgB,GAAGb,KAAK,CAACc,WAAN,CAAkB,MAAOC,MAAP,IAAkB;AAC3D;AACA,QAAIV,KAAK,GAAGU,MAAM,CAACV,KAAnB;AACA,WAAOU,MAAM,CAACV,KAAd;AAEA,QAAIW,aAAa,GAAGR,IAAI,CAACC,KAAL,CAAWJ,KAAK,CAACC,UAAjB,EAA6BW,GAA7B,CAAkCC,GAAD,IAAS;AAC5D,UAAIA,GAAG,CAACC,EAAJ,KAAWJ,MAAM,CAACI,EAAtB,EAA0B;AACxB,eAAOD,GAAP;AACD,OAFD,MAEO;AACL,eAAOH,MAAP;AACD;AACF,KANmB,CAApB;;AAQA,QAAIK,QAAQ,mCAAQf,KAAR;AAAeC,MAAAA,UAAU,EAAEE,IAAI,CAACa,SAAL,CAAeL,aAAf;AAA3B,MAAZ;;AAEAM,IAAAA,OAAO,CAACC,GAAR,CAAYH,QAAZ,EAf2D,CAiB3D;AACA;AACD,GAnBwB,EAmBtB,EAnBsB,CAAzB;AAqBAd,EAAAA,UAAU,CAACW,GAAX,CAAgBC,GAAD,IAAS;AACtBA,IAAAA,GAAG,CAACb,KAAJ,GAAYA,KAAZ;AACAa,IAAAA,GAAG,CAACN,IAAJ,GAAWL,YAAY,CAACF,KAAD,CAAvB;AACA,WAAOa,GAAP;AACD,GAJD;AAKA,sBACE,QAAC,QAAD;AACE,IAAA,IAAI,EAAEZ,UADR;AAEE,IAAA,UAAU,EAAE,IAFd;AAGE,IAAA,OAAO,EAAEJ,oBAHX;AAIE,IAAA,uBAAuB,MAJzB;AAKE,IAAA,oBAAoB,EAAE;AAAEsB,MAAAA,aAAa,EAAE;AAAjB,KALxB;AAME,IAAA,gBAAgB,EAAEX;AANpB;AAAA;AAAA;AAAA;AAAA,UADF;AAUD,CArDD;;AAuDA,eAAeT,KAAf","sourcesContent":["import React from \"react\";\nimport { DataGrid } from \"@mui/x-data-grid\";\nimport { deliveryDetailsTable, orderTable } from \"../../grids/grid-columns\";\n\nconst Table = ({ order, deliveries }) => {\n  const getOrderUnit = (order) => {\n    switch (JSON.parse(order.saleType).value) {\n      case \"quantity\":\n        return `${JSON.parse(order.saleType).unit}`;\n        break;\n      case \"fixed\":\n        return `(Fixed)`;\n        break;\n      case \"time\":\n        return `${JSON.parse(order.saleType).unit}`;\n        break;\n      default:\n        break;\n    }\n  };\n\n  const processRowUpdate = React.useCallback(async (newRow) => {\n    // Make the HTTP request to save in the backend\n    let order = newRow.order;\n    delete newRow.order;\n\n    let newDeliveries = JSON.parse(order.deliveries).map((del) => {\n      if (del.id !== newRow.id) {\n        return del;\n      } else {\n        return newRow;\n      }\n    });\n\n    let newOrder = { ...order, deliveries: JSON.stringify(newDeliveries) };\n\n    console.log(newOrder);\n\n    // const response = await mutateRow(newRow);\n    // return response;\n  }, []);\n\n  deliveries.map((del) => {\n    del.order = order;\n    del.unit = getOrderUnit(order);\n    return del;\n  });\n  return (\n    <DataGrid\n      rows={deliveries}\n      autoHeight={true}\n      columns={deliveryDetailsTable}\n      disableSelectionOnClick\n      experimentalFeatures={{ newEditingApi: true }}\n      processRowUpdate={processRowUpdate}\n    />\n  );\n};\n\nexport default Table;\n"]},"metadata":{},"sourceType":"module"}