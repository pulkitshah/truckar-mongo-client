{"ast":null,"code":"import { API } from \"aws-amplify\";\nimport { ordersByUser } from \"../graphql/queries\";\nimport { createOrder, updateOrder } from \"../graphql/mutations\";\nimport { Order } from \"../models\";\nimport { DataStore, Predicates } from \"@aws-amplify/datastore\";\nimport moment from \"moment\";\nimport { slice } from \"../slices/orders\";\nimport { getFiscalYearTimestamps } from \"../utils/get-fiscal-year\";\n\nclass OrderApi {\n  async getOrdersByUser(user) {\n    const ordersDB = await API.graphql({\n      query: ordersByUser,\n      variables: {\n        user: user.id.toString()\n      }\n    });\n    return ordersDB;\n  }\n\n  async createOrder(newOrder, dispatch) {\n    const createdAt = moment().toISOString();\n    let newOrg = newOrder;\n    newOrg.createdAt = createdAt; //////////////////////// GraphQL API ////////////////////////\n\n    const response = await API.graphql({\n      query: createOrder,\n      variables: {\n        input: newOrg\n      },\n      authMode: \"AMAZON_COGNITO_USER_POOLS\"\n    });\n    const order = response.data.createOrder; //////////////////////// GraphQL API ////////////////////////\n    //////////////////////// DataStore API ////////////////////////\n    // const order = await DataStore.save(new Order(newOrg));\n    //////////////////////// DataStore API ////////////////////////\n\n    console.log(order); // Dispatch - Reducer\n\n    dispatch(slice.actions.createOrder({\n      order\n    }));\n    return order;\n  }\n\n  async validateDuplicateOrderNo(orderNo, saleDate, user) {\n    try {\n      const response = await API.graphql({\n        query: ordersByUser,\n        variables: {\n          user: user.id.toString()\n        }\n      });\n      console.log(response);\n      const orders = response.data.ordersByUser.items;\n      orders.filter(order => {\n        console.log(getFiscalYearTimestamps(order.saleDate));\n      });\n      const order = orders.filter(order => {\n        return order.orderNo === orderNo && getFiscalYearTimestamps(moment(order.saleDate)).current.start === getFiscalYearTimestamps(saleDate).current.start;\n      });\n      console.log(getFiscalYearTimestamps(saleDate).current.start);\n      return Boolean(!order);\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n}\n\nexport const orderApi = new OrderApi();","map":{"version":3,"sources":["/Users/pulkitshah/Desktop/truckarv2/renderer/api/order-api.js"],"names":["API","ordersByUser","createOrder","updateOrder","Order","DataStore","Predicates","moment","slice","getFiscalYearTimestamps","OrderApi","getOrdersByUser","user","ordersDB","graphql","query","variables","id","toString","newOrder","dispatch","createdAt","toISOString","newOrg","response","input","authMode","order","data","console","log","actions","validateDuplicateOrderNo","orderNo","saleDate","orders","items","filter","current","start","Boolean","error","orderApi"],"mappings":"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","sourcesContent":["import { API } from \"aws-amplify\";\nimport { ordersByUser } from \"../graphql/queries\";\nimport { createOrder, updateOrder } from \"../graphql/mutations\";\nimport { Order } from \"../models\";\nimport { DataStore, Predicates } from \"@aws-amplify/datastore\";\nimport moment from \"moment\";\nimport { slice } from \"../slices/orders\";\nimport { getFiscalYearTimestamps } from \"../utils/get-fiscal-year\";\n\nclass OrderApi {\n  async getOrdersByUser(user) {\n    const ordersDB = await API.graphql({\n      query: ordersByUser,\n      variables: { user: user.id.toString() },\n    });\n    return ordersDB;\n  }\n\n  async createOrder(newOrder, dispatch) {\n    const createdAt = moment().toISOString();\n    let newOrg = newOrder;\n    newOrg.createdAt = createdAt;\n\n    //////////////////////// GraphQL API ////////////////////////\n\n    const response = await API.graphql({\n      query: createOrder,\n      variables: { input: newOrg },\n      authMode: \"AMAZON_COGNITO_USER_POOLS\",\n    });\n\n    const order = response.data.createOrder;\n\n    //////////////////////// GraphQL API ////////////////////////\n\n    //////////////////////// DataStore API ////////////////////////\n\n    // const order = await DataStore.save(new Order(newOrg));\n\n    //////////////////////// DataStore API ////////////////////////\n\n    console.log(order);\n\n    // Dispatch - Reducer\n\n    dispatch(slice.actions.createOrder({ order }));\n\n    return order;\n  }\n\n  async validateDuplicateOrderNo(orderNo, saleDate, user) {\n    try {\n      const response = await API.graphql({\n        query: ordersByUser,\n        variables: { user: user.id.toString() },\n      });\n      console.log(response);\n\n      const orders = response.data.ordersByUser.items;\n\n      orders.filter((order) => {\n        console.log(getFiscalYearTimestamps(order.saleDate));\n      });\n      const order = orders.filter((order) => {\n        return (\n          order.orderNo === orderNo &&\n          getFiscalYearTimestamps(moment(order.saleDate)).current.start ===\n            getFiscalYearTimestamps(saleDate).current.start\n        );\n      });\n\n      console.log(getFiscalYearTimestamps(saleDate).current.start);\n\n      return Boolean(!order);\n    } catch (error) {\n      console.log(error);\n    }\n  }\n}\n\nexport const orderApi = new OrderApi();\n"]},"metadata":{},"sourceType":"module"}