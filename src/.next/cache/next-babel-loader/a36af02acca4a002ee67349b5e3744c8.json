{"ast":null,"code":"import _defineProperty from \"/Users/pulkitshah/Desktop/truckarv2/node_modules/next/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _regeneratorRuntime from \"/Users/pulkitshah/Desktop/truckarv2/node_modules/next/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/pulkitshah/Desktop/truckarv2/node_modules/next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"/Users/pulkitshah/Desktop/truckarv2/node_modules/next/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectWithoutProperties from \"/Users/pulkitshah/Desktop/truckarv2/node_modules/next/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/pulkitshah/Desktop/truckarv2/renderer/components/dashboard/autocompletes/party-autocomplete.js\",\n    _this = this,\n    _s = $RefreshSig$();\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n/* eslint-disable no-use-before-define */\nimport React, { useState, useEffect } from \"react\";\nimport { Divider, TextField } from \"@mui/material\";\nimport { useDispatch } from \"../../../store\";\nimport { createFilterOptions } from \"@mui/material/Autocomplete\";\nimport { Autocomplete } from \"@react-google-maps/api\";\nimport { partyApi } from \"../../../api/party-api\";\nimport AddNewPartyFromAutocomplete from \"./party-addnew-autocomplete\";\n\nvar FreeSoloCreateOptionDialog = function FreeSoloCreateOptionDialog(_ref) {\n  _s();\n\n  var className = _ref.className,\n      touched = _ref.touched,\n      errors = _ref.errors,\n      formik = _ref.formik,\n      handleBlur = _ref.handleBlur,\n      setFieldValue = _ref.setFieldValue,\n      type = _ref.type,\n      values = _ref.values,\n      user = _ref.user,\n      rest = _objectWithoutProperties(_ref, [\"className\", \"touched\", \"errors\", \"formik\", \"handleBlur\", \"setFieldValue\", \"type\", \"values\", \"user\"]);\n\n  var dispatch = useDispatch();\n  var filter = createFilterOptions();\n\n  var _React$useState = React.useState(values && values[type]),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      value = _React$useState2[0],\n      setValue = _React$useState2[1];\n\n  var _React$useState3 = React.useState(false),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      open = _React$useState4[0],\n      toggleOpen = _React$useState4[1];\n\n  var _useState = useState([]),\n      parties = _useState[0],\n      setParties = _useState[1];\n\n  var _React$useState5 = React.useState({\n    name: \"\",\n    transporter: type !== \"customer\" ? true : false\n  }),\n      _React$useState6 = _slicedToArray(_React$useState5, 2),\n      dialogValue = _React$useState6[0],\n      setDialogValue = _React$useState6[1];\n\n  useEffect( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    var partiesDB;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            _context.next = 3;\n            return partyApi.getPartiesByUser(user, dispatch);\n\n          case 3:\n            partiesDB = _context.sent;\n            setParties(partiesDB);\n            _context.next = 10;\n            break;\n\n          case 7:\n            _context.prev = 7;\n            _context.t0 = _context[\"catch\"](0);\n            console.log(_context.t0);\n\n          case 10:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[0, 7]]);\n  })), []);\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Autocomplete, {\n      children: /*#__PURE__*/_jsxDEV(TextField, _objectSpread(_objectSpread({\n        onKeyPress: function onKeyPress(e) {\n          e.which === 13 && e.preventDefault();\n        }\n      }, params), {}, {\n        label: type.charAt(0).toUpperCase() + type.slice(1),\n        error: Boolean(type === \"customer\" ? touched.customer && errors.customer : touched.transporter && errors.transporter),\n        onBlur: handleBlur,\n        helperText: type === \"customer\" ? touched.customer && errors.customer : touched.transporter && errors.transporter,\n        variant: \"outlined\"\n      }), void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 9\n      }, _this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, _this), /*#__PURE__*/_jsxDEV(AddNewPartyFromAutocomplete, {\n      open: open,\n      toggleOpen: toggleOpen,\n      dialogValue: dialogValue,\n      setDialogValue: setDialogValue,\n      setFieldValue: formik.setFieldValue,\n      type: type\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, _this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 5\n  }, _this);\n};\n\n_s(FreeSoloCreateOptionDialog, \"nU91a7v3TbaNleN3B2m+7y18CrU=\", false, function () {\n  return [useDispatch];\n});\n\n_c = FreeSoloCreateOptionDialog;\nexport default FreeSoloCreateOptionDialog;\n\nvar _c;\n\n$RefreshReg$(_c, \"FreeSoloCreateOptionDialog\");","map":{"version":3,"sources":["/Users/pulkitshah/Desktop/truckarv2/renderer/components/dashboard/autocompletes/party-autocomplete.js"],"names":["React","useState","useEffect","Divider","TextField","useDispatch","createFilterOptions","Autocomplete","partyApi","AddNewPartyFromAutocomplete","FreeSoloCreateOptionDialog","className","touched","errors","formik","handleBlur","setFieldValue","type","values","user","rest","dispatch","filter","value","setValue","open","toggleOpen","parties","setParties","name","transporter","dialogValue","setDialogValue","getPartiesByUser","partiesDB","console","log","e","which","preventDefault","params","charAt","toUpperCase","slice","Boolean","customer"],"mappings":"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","sourcesContent":["/* eslint-disable no-use-before-define */\nimport React, { useState, useEffect } from \"react\";\nimport { Divider, TextField } from \"@mui/material\";\nimport { useDispatch } from \"../../../store\";\nimport { createFilterOptions } from \"@mui/material/Autocomplete\";\nimport { Autocomplete } from \"@react-google-maps/api\";\nimport { partyApi } from \"../../../api/party-api\";\nimport AddNewPartyFromAutocomplete from \"./party-addnew-autocomplete\";\n\nconst FreeSoloCreateOptionDialog = ({\n  className,\n  touched,\n  errors,\n  formik,\n  handleBlur,\n  setFieldValue,\n  type,\n  values,\n  user,\n  ...rest\n}) => {\n  const dispatch = useDispatch();\n  const filter = createFilterOptions();\n  const [value, setValue] = React.useState(values && values[type]);\n  const [open, toggleOpen] = React.useState(false);\n  const [parties, setParties] = useState([]);\n  const [dialogValue, setDialogValue] = React.useState({\n    name: \"\",\n    transporter: type !== \"customer\" ? true : false,\n  });\n\n  useEffect(async () => {\n    try {\n      const partiesDB = await partyApi.getPartiesByUser(user, dispatch);\n      setParties(partiesDB);\n    } catch (error) {\n      console.log(error);\n    }\n  }, []);\n\n  return (\n    <React.Fragment>\n      <Autocomplete>\n        <TextField\n          onKeyPress={(e) => {\n            e.which === 13 && e.preventDefault();\n          }}\n          {...params}\n          label={type.charAt(0).toUpperCase() + type.slice(1)}\n          error={Boolean(\n            type === \"customer\"\n              ? touched.customer && errors.customer\n              : touched.transporter && errors.transporter\n          )}\n          onBlur={handleBlur}\n          helperText={\n            type === \"customer\"\n              ? touched.customer && errors.customer\n              : touched.transporter && errors.transporter\n          }\n          variant=\"outlined\"\n        />\n      </Autocomplete>\n      <AddNewPartyFromAutocomplete\n        open={open}\n        toggleOpen={toggleOpen}\n        dialogValue={dialogValue}\n        setDialogValue={setDialogValue}\n        setFieldValue={formik.setFieldValue}\n        type={type}\n      />\n    </React.Fragment>\n  );\n};\nexport default FreeSoloCreateOptionDialog;\n"]},"metadata":{},"sourceType":"module"}