{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/pulkitshah/Desktop/truckarv2/renderer/components/dashboard/autocompletes/driver-autocomplete/driver-autocomplete.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useState, useEffect, useCallback } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Autocomplete, Grid, TextField } from \"@mui/material\";\nimport { driverApi } from \"../../../../api/driver-api\";\n\nconst DriverAutocomplete = ({\n  touched,\n  setFieldValue,\n  errors,\n  handleBlur,\n  values,\n  driver,\n  user\n}) => {\n  const {\n    0: open,\n    1: setOpen\n  } = useState(false);\n  const {\n    0: drivers,\n    1: setDrivers\n  } = useState([]);\n  const [inputValue, setInputValue] = React.useState(\"\");\n  useEffect(async () => {\n    try {\n      const driversDB = await driverApi.getDriversByUser(user, dispatch);\n      setDrivers(driversDB);\n    } catch (error) {\n      console.log(error);\n    }\n  }, []);\n  useEffect(() => {\n    console.log(\"driver has changed\");\n    setFieldValue(\"driver\", driver);\n  }, [setFieldValue, driver]);\n\n  const handleOnChange = (event, newValue) => {\n    setFieldValue(\"driver\", newValue); // setFieldValue('driver', newValue);\n  };\n\n  const handleInputChange = (event, newInputValue) => {\n    setInputValue(newInputValue); // setFieldValue('driver', newInputValue);\n  };\n\n  return /*#__PURE__*/_jsxDEV(Grid, {\n    item: true,\n    children: /*#__PURE__*/_jsxDEV(Autocomplete, {\n      autoSelect: true,\n      blurOnSelect: true,\n      id: \"driver\",\n      open: open,\n      onOpen: () => {\n        setOpen(true);\n      },\n      onClose: () => {\n        setOpen(false);\n      },\n      getOptionSelected: (option, value) => {\n        if (value) return option.name === value.name.replace(/\\w\\S*/g, function (txt) {\n          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();\n        });\n      },\n      getOptionLabel: option => {\n        return option && option.name.replace(/\\w\\S*/g, function (txt) {\n          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();\n        });\n      },\n      options: drivers,\n      value: values.driver,\n      onChange: handleOnChange,\n      inputValue: inputValue,\n      onInputChange: handleInputChange,\n      renderInput: params => /*#__PURE__*/_jsxDEV(TextField, _objectSpread(_objectSpread({}, params), {}, {\n        name: \"driver\",\n        label: \"Driver\",\n        variant: \"outlined\",\n        error: Boolean(touched.driver && errors.driver),\n        fullWidth: true,\n        helperText: touched.driver && errors.driver,\n        onBlur: handleBlur\n      }), void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 5\n  }, this);\n};\n\nDriverAutocomplete.propTypes = {\n  className: PropTypes.string\n};\nexport default DriverAutocomplete;","map":{"version":3,"sources":["/Users/pulkitshah/Desktop/truckarv2/renderer/components/dashboard/autocompletes/driver-autocomplete/driver-autocomplete.js"],"names":["React","useState","useEffect","useCallback","PropTypes","Autocomplete","Grid","TextField","driverApi","DriverAutocomplete","touched","setFieldValue","errors","handleBlur","values","driver","user","open","setOpen","drivers","setDrivers","inputValue","setInputValue","driversDB","getDriversByUser","dispatch","error","console","log","handleOnChange","event","newValue","handleInputChange","newInputValue","option","value","name","replace","txt","charAt","toUpperCase","substr","toLowerCase","params","Boolean","propTypes","className","string"],"mappings":";;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,WAArC,QAAwD,OAAxD;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,YAAT,EAAuBC,IAAvB,EAA6BC,SAA7B,QAA8C,eAA9C;AACA,SAASC,SAAT,QAA0B,4BAA1B;;AAEA,MAAMC,kBAAkB,GAAG,CAAC;AAC1BC,EAAAA,OAD0B;AAE1BC,EAAAA,aAF0B;AAG1BC,EAAAA,MAH0B;AAI1BC,EAAAA,UAJ0B;AAK1BC,EAAAA,MAL0B;AAM1BC,EAAAA,MAN0B;AAO1BC,EAAAA;AAP0B,CAAD,KAQrB;AACJ,QAAM;AAAA,OAACC,IAAD;AAAA,OAAOC;AAAP,MAAkBjB,QAAQ,CAAC,KAAD,CAAhC;AACA,QAAM;AAAA,OAACkB,OAAD;AAAA,OAAUC;AAAV,MAAwBnB,QAAQ,CAAC,EAAD,CAAtC;AACA,QAAM,CAACoB,UAAD,EAAaC,aAAb,IAA8BtB,KAAK,CAACC,QAAN,CAAe,EAAf,CAApC;AAEAC,EAAAA,SAAS,CAAC,YAAY;AACpB,QAAI;AACF,YAAMqB,SAAS,GAAG,MAAMf,SAAS,CAACgB,gBAAV,CAA2BR,IAA3B,EAAiCS,QAAjC,CAAxB;AACAL,MAAAA,UAAU,CAACG,SAAD,CAAV;AACD,KAHD,CAGE,OAAOG,KAAP,EAAc;AACdC,MAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACD;AACF,GAPQ,EAON,EAPM,CAAT;AASAxB,EAAAA,SAAS,CAAC,MAAM;AACdyB,IAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ;AACAjB,IAAAA,aAAa,CAAC,QAAD,EAAWI,MAAX,CAAb;AACD,GAHQ,EAGN,CAACJ,aAAD,EAAgBI,MAAhB,CAHM,CAAT;;AAKA,QAAMc,cAAc,GAAG,CAACC,KAAD,EAAQC,QAAR,KAAqB;AAC1CpB,IAAAA,aAAa,CAAC,QAAD,EAAWoB,QAAX,CAAb,CAD0C,CAG1C;AACD,GAJD;;AAMA,QAAMC,iBAAiB,GAAG,CAACF,KAAD,EAAQG,aAAR,KAA0B;AAClDX,IAAAA,aAAa,CAACW,aAAD,CAAb,CADkD,CAElD;AACD,GAHD;;AAKA,sBACE,QAAC,IAAD;AAAM,IAAA,IAAI,MAAV;AAAA,2BACE,QAAC,YAAD;AACE,MAAA,UAAU,EAAE,IADd;AAEE,MAAA,YAAY,EAAE,IAFhB;AAGE,MAAA,EAAE,EAAC,QAHL;AAIE,MAAA,IAAI,EAAEhB,IAJR;AAKE,MAAA,MAAM,EAAE,MAAM;AACZC,QAAAA,OAAO,CAAC,IAAD,CAAP;AACD,OAPH;AAQE,MAAA,OAAO,EAAE,MAAM;AACbA,QAAAA,OAAO,CAAC,KAAD,CAAP;AACD,OAVH;AAWE,MAAA,iBAAiB,EAAE,CAACgB,MAAD,EAASC,KAAT,KAAmB;AACpC,YAAIA,KAAJ,EACE,OACED,MAAM,CAACE,IAAP,KACAD,KAAK,CAACC,IAAN,CAAWC,OAAX,CAAmB,QAAnB,EAA6B,UAAUC,GAAV,EAAe;AAC1C,iBACEA,GAAG,CAACC,MAAJ,CAAW,CAAX,EAAcC,WAAd,KAA8BF,GAAG,CAACG,MAAJ,CAAW,CAAX,EAAcC,WAAd,EADhC;AAGD,SAJD,CAFF;AAQH,OArBH;AAsBE,MAAA,cAAc,EAAGR,MAAD,IAAY;AAC1B,eACEA,MAAM,IACNA,MAAM,CAACE,IAAP,CAAYC,OAAZ,CAAoB,QAApB,EAA8B,UAAUC,GAAV,EAAe;AAC3C,iBAAOA,GAAG,CAACC,MAAJ,CAAW,CAAX,EAAcC,WAAd,KAA8BF,GAAG,CAACG,MAAJ,CAAW,CAAX,EAAcC,WAAd,EAArC;AACD,SAFD,CAFF;AAMD,OA7BH;AA8BE,MAAA,OAAO,EAAEvB,OA9BX;AA+BE,MAAA,KAAK,EAAEL,MAAM,CAACC,MA/BhB;AAgCE,MAAA,QAAQ,EAAEc,cAhCZ;AAiCE,MAAA,UAAU,EAAER,UAjCd;AAkCE,MAAA,aAAa,EAAEW,iBAlCjB;AAmCE,MAAA,WAAW,EAAGW,MAAD,iBACX,QAAC,SAAD,kCACMA,MADN;AAEE,QAAA,IAAI,EAAC,QAFP;AAGE,QAAA,KAAK,EAAC,QAHR;AAIE,QAAA,OAAO,EAAC,UAJV;AAKE,QAAA,KAAK,EAAEC,OAAO,CAAClC,OAAO,CAACK,MAAR,IAAkBH,MAAM,CAACG,MAA1B,CALhB;AAME,QAAA,SAAS,MANX;AAOE,QAAA,UAAU,EAAEL,OAAO,CAACK,MAAR,IAAkBH,MAAM,CAACG,MAPvC;AAQE,QAAA,MAAM,EAAEF;AARV;AAAA;AAAA;AAAA;AAAA;AApCJ;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAoDD,CA1FD;;AA4FAJ,kBAAkB,CAACoC,SAAnB,GAA+B;AAC7BC,EAAAA,SAAS,EAAE1C,SAAS,CAAC2C;AADQ,CAA/B;AAIA,eAAetC,kBAAf","sourcesContent":["import React, { useState, useEffect, useCallback } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Autocomplete, Grid, TextField } from \"@mui/material\";\nimport { driverApi } from \"../../../../api/driver-api\";\n\nconst DriverAutocomplete = ({\n  touched,\n  setFieldValue,\n  errors,\n  handleBlur,\n  values,\n  driver,\n  user,\n}) => {\n  const [open, setOpen] = useState(false);\n  const [drivers, setDrivers] = useState([]);\n  const [inputValue, setInputValue] = React.useState(\"\");\n\n  useEffect(async () => {\n    try {\n      const driversDB = await driverApi.getDriversByUser(user, dispatch);\n      setDrivers(driversDB);\n    } catch (error) {\n      console.log(error);\n    }\n  }, []);\n\n  useEffect(() => {\n    console.log(\"driver has changed\");\n    setFieldValue(\"driver\", driver);\n  }, [setFieldValue, driver]);\n\n  const handleOnChange = (event, newValue) => {\n    setFieldValue(\"driver\", newValue);\n\n    // setFieldValue('driver', newValue);\n  };\n\n  const handleInputChange = (event, newInputValue) => {\n    setInputValue(newInputValue);\n    // setFieldValue('driver', newInputValue);\n  };\n\n  return (\n    <Grid item>\n      <Autocomplete\n        autoSelect={true}\n        blurOnSelect={true}\n        id=\"driver\"\n        open={open}\n        onOpen={() => {\n          setOpen(true);\n        }}\n        onClose={() => {\n          setOpen(false);\n        }}\n        getOptionSelected={(option, value) => {\n          if (value)\n            return (\n              option.name ===\n              value.name.replace(/\\w\\S*/g, function (txt) {\n                return (\n                  txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase()\n                );\n              })\n            );\n        }}\n        getOptionLabel={(option) => {\n          return (\n            option &&\n            option.name.replace(/\\w\\S*/g, function (txt) {\n              return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();\n            })\n          );\n        }}\n        options={drivers}\n        value={values.driver}\n        onChange={handleOnChange}\n        inputValue={inputValue}\n        onInputChange={handleInputChange}\n        renderInput={(params) => (\n          <TextField\n            {...params}\n            name=\"driver\"\n            label=\"Driver\"\n            variant=\"outlined\"\n            error={Boolean(touched.driver && errors.driver)}\n            fullWidth\n            helperText={touched.driver && errors.driver}\n            onBlur={handleBlur}\n          />\n        )}\n      />\n    </Grid>\n  );\n};\n\nDriverAutocomplete.propTypes = {\n  className: PropTypes.string,\n};\n\nexport default DriverAutocomplete;\n"]},"metadata":{},"sourceType":"module"}