{"ast":null,"code":"import _taggedTemplateLiteral from \"/Users/pulkitshah/Desktop/truckarv2/node_modules/next/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\n\nvar _s = $RefreshSig$();\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  query AllTrips($user: ObjectId!, $limit: Int) {\\n    trips(query: { user: $user }, limit: $limit) {\\n      _id\\n      orderNo\\n      vehicleNumber\\n    }\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React from \"react\";\nimport { useQuery } from \"@apollo/client\";\nimport gql from \"graphql-tag\";\n\nvar getTrips = function getTrips(user) {\n  var _getTripsOfUser = getTripsOfUser(user),\n      tripsPoll = _getTripsOfUser.tripsPoll,\n      fetchMore = _getTripsOfUser.fetchMore,\n      loading = _getTripsOfUser.loading;\n\n  return {\n    loading: loading,\n    tripsPoll: tripsPoll,\n    fetchMore: fetchMore\n  };\n}; // TODO: Add the GraphQL query for fetching all deliveries.\n\n\nvar GetTripsOfUserQuery = gql(_templateObject());\n\nfunction getTripsOfUser(user) {\n  _s();\n\n  var _data$trips;\n\n  var queryResult = useQuery(GetTripsOfUserQuery, {\n    variables: {\n      user: user._id,\n      offset: 0,\n      limit: 10000\n    }\n  }, {});\n  var data = queryResult.data,\n      loading = queryResult.loading,\n      fetchMore = queryResult.fetchMore,\n      error = queryResult.error,\n      startPolling = queryResult.startPolling,\n      stopPolling = queryResult.stopPolling;\n  React.useEffect(function () {\n    // check server for updates every 1000ms\n    startPolling(1000); // stop polling server for data when component unmounts\n\n    return function () {\n      return stopPolling();\n    };\n  }, [startPolling, stopPolling]);\n\n  if (error) {\n    throw new Error(JSON.stringify(error, null, 2));\n  } // If the query has finished, return the deliveries from the result data\n  // Otherwise, return an empty list\n\n\n  var tripsPoll = (_data$trips = data === null || data === void 0 ? void 0 : data.trips) !== null && _data$trips !== void 0 ? _data$trips : [];\n  return {\n    tripsPoll: tripsPoll,\n    fetchMoreTrips: fetchMore,\n    tripsloading: loading\n  };\n}\n\n_s(getTripsOfUser, \"Ob+mMjC5CDfgdbm980HlPvB7r40=\", false, function () {\n  return [useQuery];\n});\n\nexport default getTrips;","map":{"version":3,"sources":["/Users/pulkitshah/Desktop/truckarv2/renderer/graphql/trips.js"],"names":["React","useQuery","gql","getTrips","user","getTripsOfUser","tripsPoll","fetchMore","loading","GetTripsOfUserQuery","queryResult","variables","_id","offset","limit","data","error","startPolling","stopPolling","useEffect","Error","JSON","stringify","trips","fetchMoreTrips","tripsloading"],"mappings":";;;;;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,QAAyB,gBAAzB;AACA,OAAOC,GAAP,MAAgB,aAAhB;;AAEA,IAAMC,QAAQ,GAAG,SAAXA,QAAW,CAACC,IAAD,EAAU;AAAA,wBAEvBC,cAAc,CAACD,IAAD,CAFS;AAAA,MACjBE,SADiB,mBACjBA,SADiB;AAAA,MACNC,SADM,mBACNA,SADM;AAAA,MACKC,OADL,mBACKA,OADL;;AAGzB,SAAO;AACLA,IAAAA,OAAO,EAAPA,OADK;AAELF,IAAAA,SAAS,EAATA,SAFK;AAGLC,IAAAA,SAAS,EAATA;AAHK,GAAP;AAKD,CARD,C,CAUA;;;AAEA,IAAME,mBAAmB,GAAGP,GAAH,mBAAzB;;AAUA,SAASG,cAAT,CAAwBD,IAAxB,EAA8B;AAAA;;AAAA;;AAC5B,MAAMM,WAAW,GAAGT,QAAQ,CAC1BQ,mBAD0B,EAE1B;AACEE,IAAAA,SAAS,EAAE;AACTP,MAAAA,IAAI,EAAEA,IAAI,CAACQ,GADF;AAETC,MAAAA,MAAM,EAAE,CAFC;AAGTC,MAAAA,KAAK,EAAE;AAHE;AADb,GAF0B,EAS1B,EAT0B,CAA5B;AAD4B,MAYpBC,IAZoB,GAa1BL,WAb0B,CAYpBK,IAZoB;AAAA,MAYdP,OAZc,GAa1BE,WAb0B,CAYdF,OAZc;AAAA,MAYLD,SAZK,GAa1BG,WAb0B,CAYLH,SAZK;AAAA,MAYMS,KAZN,GAa1BN,WAb0B,CAYMM,KAZN;AAAA,MAYaC,YAZb,GAa1BP,WAb0B,CAYaO,YAZb;AAAA,MAY2BC,WAZ3B,GAa1BR,WAb0B,CAY2BQ,WAZ3B;AAe5BlB,EAAAA,KAAK,CAACmB,SAAN,CAAgB,YAAM;AACpB;AACAF,IAAAA,YAAY,CAAC,IAAD,CAAZ,CAFoB,CAGpB;;AACA,WAAO;AAAA,aAAMC,WAAW,EAAjB;AAAA,KAAP;AACD,GALD,EAKG,CAACD,YAAD,EAAeC,WAAf,CALH;;AAOA,MAAIF,KAAJ,EAAW;AACT,UAAM,IAAII,KAAJ,CAAUC,IAAI,CAACC,SAAL,CAAeN,KAAf,EAAsB,IAAtB,EAA4B,CAA5B,CAAV,CAAN;AACD,GAxB2B,CAyB5B;AACA;;;AACA,MAAMV,SAAS,kBAAGS,IAAH,aAAGA,IAAH,uBAAGA,IAAI,CAAEQ,KAAT,qDAAkB,EAAjC;AAEA,SAAO;AACLjB,IAAAA,SAAS,EAATA,SADK;AAELkB,IAAAA,cAAc,EAAEjB,SAFX;AAGLkB,IAAAA,YAAY,EAAEjB;AAHT,GAAP;AAKD;;GAlCQH,c;UACaJ,Q;;;AA0CtB,eAAeE,QAAf","sourcesContent":["import React from \"react\";\nimport { useQuery } from \"@apollo/client\";\nimport gql from \"graphql-tag\";\n\nconst getTrips = (user) => {\n  const { tripsPoll, fetchMore, loading } =\n    getTripsOfUser(user);\n  return {\n    loading,\n    tripsPoll,\n    fetchMore,\n  };\n};\n\n// TODO: Add the GraphQL query for fetching all deliveries.\n\nconst GetTripsOfUserQuery = gql`\n  query AllTrips($user: ObjectId!, $limit: Int) {\n    trips(query: { user: $user }, limit: $limit) {\n      _id\n      orderNo\n      vehicleNumber\n    }\n  }\n`;\n\nfunction getTripsOfUser(user) {\n  const queryResult = useQuery(\n    GetTripsOfUserQuery,\n    {\n      variables: {\n        user: user._id,\n        offset: 0,\n        limit: 10000,\n      },\n    },\n    {}\n  );\n  const { data, loading, fetchMore, error, startPolling, stopPolling } =\n    queryResult;\n\n  React.useEffect(() => {\n    // check server for updates every 1000ms\n    startPolling(1000);\n    // stop polling server for data when component unmounts\n    return () => stopPolling();\n  }, [startPolling, stopPolling]);\n  \n  if (error) {\n    throw new Error(JSON.stringify(error, null, 2));\n  }\n  // If the query has finished, return the deliveries from the result data\n  // Otherwise, return an empty list\n  const tripsPoll = data?.trips ?? [];\n\n  return {\n    tripsPoll,\n    fetchMoreTrips: fetchMore,\n    tripsloading: loading,\n  };\n}\n\n\n\n\n\n\n\n\nexport default getTrips;\n"]},"metadata":{},"sourceType":"module"}