{"ast":null,"code":"import _defineProperty from \"/Users/pulkitshah/Desktop/truckarv2/node_modules/next/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _regeneratorRuntime from \"/Users/pulkitshah/Desktop/truckarv2/node_modules/next/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/pulkitshah/Desktop/truckarv2/node_modules/next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"/Users/pulkitshah/Desktop/truckarv2/node_modules/next/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectWithoutProperties from \"/Users/pulkitshah/Desktop/truckarv2/node_modules/next/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/pulkitshah/Desktop/truckarv2/renderer/components/dashboard/autocompletes/party-autocomplete/vehicle-autocomplete.js\",\n    _this = this,\n    _s = $RefreshSig$();\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useState, useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\nimport Autocomplete, { createFilterOptions } from \"@mui/material/Autocomplete\";\nimport axios from \"src/utils/axios\";\nimport { useDispatch } from \"../../../../store\";\nimport { vehicleNumberFormatter } from \"src/utils/customFormatters\";\nimport { CircularProgress, Grid, TextField } from \"@mui/material\";\nimport { vehicleApi } from \"../../../../api/vehicle-api\";\n\nvar VehicleAutocomplete = function VehicleAutocomplete(_ref) {\n  _s();\n\n  var className = _ref.className,\n      touched = _ref.touched,\n      setFieldValue = _ref.setFieldValue,\n      errors = _ref.errors,\n      handleBlur = _ref.handleBlur,\n      setSelectedVehicle = _ref.setSelectedVehicle,\n      setDriver = _ref.setDriver,\n      currentValue = _ref.currentValue,\n      rest = _objectWithoutProperties(_ref, [\"className\", \"touched\", \"setFieldValue\", \"errors\", \"handleBlur\", \"setSelectedVehicle\", \"setDriver\", \"currentValue\"]);\n\n  var dispatch = useDispatch();\n\n  var _useState = useState(false),\n      open = _useState[0],\n      setOpen = _useState[1];\n\n  var _useState2 = useState([]),\n      vehicles = _useState2[0],\n      setVehicles = _useState2[1];\n\n  var _React$useState = React.useState(currentValue),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      value = _React$useState2[0],\n      setValue = _React$useState2[1];\n\n  var _React$useState3 = React.useState(typeof currentValue === \"object\" ? \"\".concat(currentValue.vehicleNumber) : currentValue),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      inputValue = _React$useState4[0],\n      setInputValue = _React$useState4[1];\n\n  var loading = false;\n  useEffect( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    var vehiclesDB;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            _context.next = 3;\n            return vehicleApi.getVehiclesByUser(user, dispatch);\n\n          case 3:\n            vehiclesDB = _context.sent;\n            setVehicles(vehiclesDB);\n            _context.next = 10;\n            break;\n\n          case 7:\n            _context.prev = 7;\n            _context.t0 = _context[\"catch\"](0);\n            console.log(_context.t0);\n\n          case 10:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[0, 7]]);\n  })), []);\n\n  var handleOnChange = /*#__PURE__*/function () {\n    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(event, newValue) {\n      var response;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              setValue(newValue);\n              setSelectedVehicle(newValue);\n              setFieldValue(\"vehicle\", newValue);\n\n              try {\n                if (newValue !== null && typeof newValue === \"object\" && newValue !== null) {\n                  response = \"await axios.get(`/api/drivers/vehicle/${newValue._id}`);\";\n                  setDriver(response.data);\n                } else {\n                  setSelectedVehicle(\"\");\n                  setFieldValue(\"driver\", \"\");\n                }\n              } catch (error) {\n                setFieldValue(\"driver\", \"\");\n                console.log(error);\n              }\n\n            case 4:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    return function handleOnChange(_x, _x2) {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n\n  var handleInputChange = function handleInputChange(event, newInputValue) {\n    setInputValue(newInputValue);\n    setSelectedVehicle(newInputValue);\n    setFieldValue(\"vehicle\", newInputValue);\n\n    try {\n      if (newInputValue !== null && typeof newInputValue === \"object\" && newInputValue !== null) {// axios\n        //   .get(`/api/drivers/vehicle/${newInputValue._id}`)\n        //   .then(({ data }) => {\n        //     setDriver(data);\n        //   });\n      } else {\n        setSelectedVehicle(\"\");\n      }\n    } catch (error) {\n      setFieldValue(\"driver\", \"\");\n      console.log(error);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(Grid, {\n    item: true,\n    children: /*#__PURE__*/_jsxDEV(Autocomplete, {\n      freeSolo: true,\n      autoSelect: true,\n      blurOnSelect: true,\n      id: \"vehicle\",\n      open: open,\n      onOpen: function onOpen() {\n        setOpen(true);\n      },\n      onClose: function onClose() {\n        setOpen(false);\n      },\n      getOptionSelected: function getOptionSelected(option, value) {\n        return option.name === value;\n      },\n      getOptionLabel: function getOptionLabel(option) {\n        if (option.vehicleNumber) {\n          return option.vehicleNumber;\n        } else {\n          return option.toUpperCase();\n        }\n      },\n      options: vehicles,\n      loading: loading,\n      value: value,\n      onChange: handleOnChange,\n      inputValue: inputValue,\n      onInputChange: handleInputChange,\n      renderInput: function renderInput(params) {\n        return /*#__PURE__*/_jsxDEV(TextField, _objectSpread(_objectSpread({}, params), {}, {\n          name: \"vehicle\",\n          label: \"Vehicle\",\n          variant: \"outlined\",\n          error: Boolean(touched.vehicle && errors.vehicle),\n          fullWidth: true,\n          helperText: touched.vehicle && errors.vehicle,\n          onBlur: handleBlur,\n          InputProps: _objectSpread(_objectSpread({}, params.InputProps), {}, {\n            inputComponent: vehicleNumberFormatter,\n            endAdornment: /*#__PURE__*/_jsxDEV(React.Fragment, {\n              children: [loading ? /*#__PURE__*/_jsxDEV(CircularProgress, {\n                color: \"inherit\",\n                size: 20\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 136,\n                columnNumber: 21\n              }, _this) : null, params.InputProps.endAdornment]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 134,\n              columnNumber: 17\n            }, _this)\n          })\n        }), void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 11\n        }, _this);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }, _this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 91,\n    columnNumber: 5\n  }, _this);\n};\n\n_s(VehicleAutocomplete, \"ryTXMV1/pIYv3moyC+lUhFeOoqM=\", false, function () {\n  return [useDispatch];\n});\n\n_c = VehicleAutocomplete;\nVehicleAutocomplete.propTypes = {\n  className: PropTypes.string\n};\nexport default VehicleAutocomplete;\n\nvar _c;\n\n$RefreshReg$(_c, \"VehicleAutocomplete\");","map":{"version":3,"sources":["/Users/pulkitshah/Desktop/truckarv2/renderer/components/dashboard/autocompletes/party-autocomplete/vehicle-autocomplete.js"],"names":["React","useState","useEffect","PropTypes","Autocomplete","createFilterOptions","axios","useDispatch","vehicleNumberFormatter","CircularProgress","Grid","TextField","vehicleApi","VehicleAutocomplete","className","touched","setFieldValue","errors","handleBlur","setSelectedVehicle","setDriver","currentValue","rest","dispatch","open","setOpen","vehicles","setVehicles","value","setValue","vehicleNumber","inputValue","setInputValue","loading","getVehiclesByUser","user","vehiclesDB","console","log","handleOnChange","event","newValue","response","data","error","handleInputChange","newInputValue","option","name","toUpperCase","params","Boolean","vehicle","InputProps","inputComponent","endAdornment","propTypes","string"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\nimport Autocomplete, { createFilterOptions } from \"@mui/material/Autocomplete\";\nimport axios from \"src/utils/axios\";\nimport { useDispatch } from \"../../../../store\";\nimport { vehicleNumberFormatter } from \"src/utils/customFormatters\";\nimport { CircularProgress, Grid, TextField } from \"@mui/material\";\nimport { vehicleApi } from \"../../../../api/vehicle-api\";\n\nconst VehicleAutocomplete = ({\n  className,\n  touched,\n  setFieldValue,\n  errors,\n  handleBlur,\n  setSelectedVehicle,\n  setDriver,\n  currentValue,\n  ...rest\n}) => {\n  const dispatch = useDispatch();\n  const [open, setOpen] = useState(false);\n  const [vehicles, setVehicles] = useState([]);\n  const [value, setValue] = React.useState(currentValue);\n  const [inputValue, setInputValue] = React.useState(\n    typeof currentValue === \"object\"\n      ? `${currentValue.vehicleNumber}`\n      : currentValue\n  );\n\n  const loading = false;\n\n  useEffect(async () => {\n    try {\n      const vehiclesDB = await vehicleApi.getVehiclesByUser(user, dispatch);\n      setVehicles(vehiclesDB);\n    } catch (error) {\n      console.log(error);\n    }\n  }, []);\n\n  const handleOnChange = async (event, newValue) => {\n    setValue(newValue);\n    setSelectedVehicle(newValue);\n    setFieldValue(\"vehicle\", newValue);\n    try {\n      if (\n        newValue !== null &&\n        typeof newValue === \"object\" &&\n        newValue !== null\n      ) {\n        let response =\n          \"await axios.get(`/api/drivers/vehicle/${newValue._id}`);\";\n        setDriver(response.data);\n      } else {\n        setSelectedVehicle(\"\");\n        setFieldValue(\"driver\", \"\");\n      }\n    } catch (error) {\n      setFieldValue(\"driver\", \"\");\n      console.log(error);\n    }\n  };\n\n  const handleInputChange = (event, newInputValue) => {\n    setInputValue(newInputValue);\n    setSelectedVehicle(newInputValue);\n    setFieldValue(\"vehicle\", newInputValue);\n    try {\n      if (\n        newInputValue !== null &&\n        typeof newInputValue === \"object\" &&\n        newInputValue !== null\n      ) {\n        // axios\n        //   .get(`/api/drivers/vehicle/${newInputValue._id}`)\n        //   .then(({ data }) => {\n        //     setDriver(data);\n        //   });\n      } else {\n        setSelectedVehicle(\"\");\n      }\n    } catch (error) {\n      setFieldValue(\"driver\", \"\");\n\n      console.log(error);\n    }\n  };\n\n  return (\n    <Grid item>\n      <Autocomplete\n        freeSolo\n        autoSelect={true}\n        blurOnSelect={true}\n        id=\"vehicle\"\n        open={open}\n        onOpen={() => {\n          setOpen(true);\n        }}\n        onClose={() => {\n          setOpen(false);\n        }}\n        getOptionSelected={(option, value) => {\n          return option.name === value;\n        }}\n        getOptionLabel={(option) => {\n          if (option.vehicleNumber) {\n            return option.vehicleNumber;\n          } else {\n            return option.toUpperCase();\n          }\n        }}\n        options={vehicles}\n        loading={loading}\n        value={value}\n        onChange={handleOnChange}\n        inputValue={inputValue}\n        onInputChange={handleInputChange}\n        renderInput={(params) => (\n          <TextField\n            {...params}\n            name=\"vehicle\"\n            label=\"Vehicle\"\n            variant=\"outlined\"\n            error={Boolean(touched.vehicle && errors.vehicle)}\n            fullWidth\n            helperText={touched.vehicle && errors.vehicle}\n            onBlur={handleBlur}\n            InputProps={{\n              ...params.InputProps,\n              inputComponent: vehicleNumberFormatter,\n              endAdornment: (\n                <React.Fragment>\n                  {loading ? (\n                    <CircularProgress color=\"inherit\" size={20} />\n                  ) : null}\n                  {params.InputProps.endAdornment}\n                </React.Fragment>\n              ),\n            }}\n          />\n        )}\n      />\n    </Grid>\n  );\n};\n\nVehicleAutocomplete.propTypes = {\n  className: PropTypes.string,\n};\n\nexport default VehicleAutocomplete;\n"]},"metadata":{},"sourceType":"module"}