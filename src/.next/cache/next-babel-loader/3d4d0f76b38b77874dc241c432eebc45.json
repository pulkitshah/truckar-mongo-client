{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/pulkitshah/Desktop/truckarv2/renderer/contexts/amplify-context.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { createContext, useEffect, useReducer } from \"react\";\nimport PropTypes from \"prop-types\";\nimport Amplify, { Auth } from \"aws-amplify\";\nimport awsconfig from \"../aws-exports\";\nAmplify.configure(awsconfig); // import { amplifyConfig } from \"../config\";\n// Amplify.configure(amplifyConfig);\n\nconst initialState = {\n  isAuthenticated: false,\n  isInitialized: false,\n  user: null\n};\nconst handlers = {\n  INITIALIZE: (state, action) => {\n    const {\n      isAuthenticated,\n      user\n    } = action.payload;\n    return _objectSpread(_objectSpread({}, state), {}, {\n      isAuthenticated,\n      isInitialized: true,\n      user\n    });\n  },\n  LOGIN: (state, action) => {\n    const {\n      user\n    } = action.payload;\n    return _objectSpread(_objectSpread({}, state), {}, {\n      isAuthenticated: true,\n      user\n    });\n  },\n  LOGOUT: state => _objectSpread(_objectSpread({}, state), {}, {\n    isAuthenticated: false,\n    user: null\n  }),\n  REGISTER: state => _objectSpread({}, state),\n  VERIFY_CODE: state => _objectSpread({}, state),\n  RESEND_CODE: state => _objectSpread({}, state),\n  PASSWORD_RECOVERY: state => _objectSpread({}, state),\n  PASSWORD_RESET: state => _objectSpread({}, state)\n};\n\nconst reducer = (state, action) => handlers[action.type] ? handlers[action.type](state, action) : state;\n\nexport const AuthContext = /*#__PURE__*/createContext(_objectSpread(_objectSpread({}, initialState), {}, {\n  platform: \"Amplify\",\n  login: () => Promise.resolve(),\n  logout: () => Promise.resolve(),\n  register: () => Promise.resolve(),\n  verifyCode: () => Promise.resolve(),\n  resendCode: () => Promise.resolve(),\n  passwordRecovery: () => Promise.resolve(),\n  passwordReset: () => Promise.resolve()\n}));\nexport const AuthProvider = props => {\n  const {\n    children\n  } = props;\n  const {\n    0: state,\n    1: dispatch\n  } = useReducer(reducer, initialState);\n  useEffect(() => {\n    const initialize = async () => {\n      try {\n        console.log(Auth.signUp);\n        const user = await Auth.currentAuthenticatedUser(); // Here you should extract the complete user profile to make it\n        // available in your entire app.\n        // The auth state only provides basic information.\n\n        dispatch({\n          type: \"INITIALIZE\",\n          payload: {\n            isAuthenticated: true,\n            user: {\n              id: user.sub,\n              avatar: \"/static/mock-images/avatars/avatar-anika_visser.png\",\n              email: user.attributes.email,\n              name: \"Anika Visser\",\n              plan: \"Premium\"\n            }\n          }\n        });\n      } catch (error) {\n        dispatch({\n          type: \"INITIALIZE\",\n          payload: {\n            isAuthenticated: false,\n            user: null\n          }\n        });\n      }\n    };\n\n    initialize();\n  }, []);\n\n  const login = async (email, password) => {\n    const user = await Auth.signIn(email, password);\n    console.log(user);\n\n    if (user.challengeName) {\n      console.error(`Unable to login, because challenge \"${user.challengeName}\" is mandated and we did not handle this case.`);\n      return;\n    }\n\n    dispatch({\n      type: \"LOGIN\",\n      payload: {\n        user: {\n          id: user.attributes.sub,\n          avatar: \"/static/mock-images/avatars/avatar-anika_visser.png\",\n          email: user.attributes.email,\n          name: \"Anika Visser\",\n          plan: \"Premium\"\n        }\n      }\n    });\n  };\n\n  const logout = async () => {\n    await Auth.signOut();\n    dispatch({\n      type: \"LOGOUT\"\n    });\n  };\n\n  const register = async (email, password) => {\n    let a = await Auth.signUp({\n      username: email,\n      password,\n      attributes: {\n        email,\n        phone_number: \"+919769480620\"\n      }\n    });\n    console.log(a);\n    dispatch({\n      type: \"REGISTER\"\n    });\n  };\n\n  const verifyCode = async (username, code) => {\n    await Auth.confirmSignUp(username, code);\n    dispatch({\n      type: \"VERIFY_CODE\"\n    });\n  };\n\n  const resendCode = async username => {\n    await Auth.resendSignUp(username);\n    dispatch({\n      type: \"RESEND_CODE\"\n    });\n  };\n\n  const passwordRecovery = async username => {\n    await Auth.forgotPassword(username);\n    dispatch({\n      type: \"PASSWORD_RECOVERY\"\n    });\n  };\n\n  const passwordReset = async (username, code, newPassword) => {\n    await Auth.forgotPasswordSubmit(username, code, newPassword);\n    dispatch({\n      type: \"PASSWORD_RESET\"\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: _objectSpread(_objectSpread({}, state), {}, {\n      platform: \"Amplify\",\n      login,\n      logout,\n      register,\n      verifyCode,\n      resendCode,\n      passwordRecovery,\n      passwordReset\n    }),\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 178,\n    columnNumber: 5\n  }, this);\n};\nAuthProvider.propTypes = {\n  children: PropTypes.node.isRequired\n};\nexport const AuthConsumer = AuthContext.Consumer;","map":{"version":3,"sources":["/Users/pulkitshah/Desktop/truckarv2/renderer/contexts/amplify-context.js"],"names":["createContext","useEffect","useReducer","PropTypes","Amplify","Auth","awsconfig","configure","initialState","isAuthenticated","isInitialized","user","handlers","INITIALIZE","state","action","payload","LOGIN","LOGOUT","REGISTER","VERIFY_CODE","RESEND_CODE","PASSWORD_RECOVERY","PASSWORD_RESET","reducer","type","AuthContext","platform","login","Promise","resolve","logout","register","verifyCode","resendCode","passwordRecovery","passwordReset","AuthProvider","props","children","dispatch","initialize","console","log","signUp","currentAuthenticatedUser","id","sub","avatar","email","attributes","name","plan","error","password","signIn","challengeName","signOut","a","username","phone_number","code","confirmSignUp","resendSignUp","forgotPassword","newPassword","forgotPasswordSubmit","propTypes","node","isRequired","AuthConsumer","Consumer"],"mappings":"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","sourcesContent":["import { createContext, useEffect, useReducer } from \"react\";\nimport PropTypes from \"prop-types\";\nimport Amplify, { Auth } from \"aws-amplify\";\nimport awsconfig from \"../aws-exports\";\nAmplify.configure(awsconfig);\n\n// import { amplifyConfig } from \"../config\";\n\n// Amplify.configure(amplifyConfig);\n\nconst initialState = {\n  isAuthenticated: false,\n  isInitialized: false,\n  user: null,\n};\n\nconst handlers = {\n  INITIALIZE: (state, action) => {\n    const { isAuthenticated, user } = action.payload;\n\n    return {\n      ...state,\n      isAuthenticated,\n      isInitialized: true,\n      user,\n    };\n  },\n  LOGIN: (state, action) => {\n    const { user } = action.payload;\n\n    return {\n      ...state,\n      isAuthenticated: true,\n      user,\n    };\n  },\n  LOGOUT: (state) => ({\n    ...state,\n    isAuthenticated: false,\n    user: null,\n  }),\n  REGISTER: (state) => ({ ...state }),\n  VERIFY_CODE: (state) => ({ ...state }),\n  RESEND_CODE: (state) => ({ ...state }),\n  PASSWORD_RECOVERY: (state) => ({ ...state }),\n  PASSWORD_RESET: (state) => ({ ...state }),\n};\n\nconst reducer = (state, action) =>\n  handlers[action.type] ? handlers[action.type](state, action) : state;\n\nexport const AuthContext = createContext({\n  ...initialState,\n  platform: \"Amplify\",\n  login: () => Promise.resolve(),\n  logout: () => Promise.resolve(),\n  register: () => Promise.resolve(),\n  verifyCode: () => Promise.resolve(),\n  resendCode: () => Promise.resolve(),\n  passwordRecovery: () => Promise.resolve(),\n  passwordReset: () => Promise.resolve(),\n});\n\nexport const AuthProvider = (props) => {\n  const { children } = props;\n  const [state, dispatch] = useReducer(reducer, initialState);\n\n  useEffect(() => {\n    const initialize = async () => {\n      try {\n        console.log(Auth.signUp);\n\n        const user = await Auth.currentAuthenticatedUser();\n\n        // Here you should extract the complete user profile to make it\n        // available in your entire app.\n        // The auth state only provides basic information.\n\n        dispatch({\n          type: \"INITIALIZE\",\n          payload: {\n            isAuthenticated: true,\n            user: {\n              id: user.sub,\n              avatar: \"/static/mock-images/avatars/avatar-anika_visser.png\",\n              email: user.attributes.email,\n              name: \"Anika Visser\",\n              plan: \"Premium\",\n            },\n          },\n        });\n      } catch (error) {\n        dispatch({\n          type: \"INITIALIZE\",\n          payload: {\n            isAuthenticated: false,\n            user: null,\n          },\n        });\n      }\n    };\n\n    initialize();\n  }, []);\n\n  const login = async (email, password) => {\n    const user = await Auth.signIn(email, password);\n    console.log(user);\n    if (user.challengeName) {\n      console.error(\n        `Unable to login, because challenge \"${user.challengeName}\" is mandated and we did not handle this case.`\n      );\n      return;\n    }\n\n    dispatch({\n      type: \"LOGIN\",\n      payload: {\n        user: {\n          id: user.attributes.sub,\n          avatar: \"/static/mock-images/avatars/avatar-anika_visser.png\",\n          email: user.attributes.email,\n          name: \"Anika Visser\",\n          plan: \"Premium\",\n        },\n      },\n    });\n  };\n\n  const logout = async () => {\n    await Auth.signOut();\n    dispatch({\n      type: \"LOGOUT\",\n    });\n  };\n\n  const register = async (email, password) => {\n    let a = await Auth.signUp({\n      username: email,\n      password,\n      attributes: { email, phone_number: \"+919769480620\" },\n    });\n    console.log(a);\n    dispatch({\n      type: \"REGISTER\",\n    });\n  };\n\n  const verifyCode = async (username, code) => {\n    await Auth.confirmSignUp(username, code);\n    dispatch({\n      type: \"VERIFY_CODE\",\n    });\n  };\n\n  const resendCode = async (username) => {\n    await Auth.resendSignUp(username);\n    dispatch({\n      type: \"RESEND_CODE\",\n    });\n  };\n\n  const passwordRecovery = async (username) => {\n    await Auth.forgotPassword(username);\n    dispatch({\n      type: \"PASSWORD_RECOVERY\",\n    });\n  };\n\n  const passwordReset = async (username, code, newPassword) => {\n    await Auth.forgotPasswordSubmit(username, code, newPassword);\n    dispatch({\n      type: \"PASSWORD_RESET\",\n    });\n  };\n\n  return (\n    <AuthContext.Provider\n      value={{\n        ...state,\n        platform: \"Amplify\",\n        login,\n        logout,\n        register,\n        verifyCode,\n        resendCode,\n        passwordRecovery,\n        passwordReset,\n      }}\n    >\n      {children}\n    </AuthContext.Provider>\n  );\n};\n\nAuthProvider.propTypes = {\n  children: PropTypes.node.isRequired,\n};\n\nexport const AuthConsumer = AuthContext.Consumer;\n"]},"metadata":{},"sourceType":"module"}