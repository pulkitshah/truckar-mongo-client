{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/pulkitshah/Desktop/truckarv2/renderer/components/dashboard/order/google-maps.js\";\nimport React, { useState, useRef, useMemo, useCallback } from \"react\";\nimport { GoogleMap, Marker, DirectionsService, DirectionsRenderer } from \"@react-google-maps/api\";\n\nconst GoogleMaps = ({\n  formik\n}) => {\n  console.log(\"child component\");\n  let googleResponse = useRef(null);\n\n  let directionsCallback = response => {\n    if (response !== null) {\n      if (response.status === \"OK\") {\n        console.log(googleResponse.current.request);\n        console.log(response.request);\n        console.log(Boolean(googleResponse.current.request === response.request));\n\n        if (googleResponse.current === response) {\n          return;\n        } else {\n          googleResponse.current = response; //   console.log(googleResponse.current);\n        }\n      } else {\n        console.log(\"response: \");\n      }\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(GoogleMap, {\n    options: {\n      mapTypeId: \"hybrid\",\n      disableDefaultUI: true\n    },\n    mapContainerStyle: {\n      width: \"90%\",\n      height: \"100%\",\n      minHeight: \"12rem\"\n    },\n    center: {\n      lat: 22.309425,\n      lng: 72.13623\n    },\n    zoom: 5,\n    children: [console.log(googleResponse.current), formik.values.deliveryDetails[0].loading.description && formik.values.deliveryDetails[0].unloading.description && /*#__PURE__*/_jsxDEV(DirectionsService // required\n    , {\n      options: {\n        origin: formik.values.deliveryDetails[0].loading.description,\n        destination: formik.values.deliveryDetails[0].unloading.description,\n        travelMode: \"DRIVING\"\n      } // required\n      ,\n      callback: directionsCallback // optional\n      ,\n      onLoad: directionsService => {\n        console.log(\"DirectionsService onLoad directionsService: \", directionsService);\n      } // optional\n      ,\n      onUnmount: directionsService => {\n        console.log(\"DirectionsService onUnmount directionsService: \", directionsService);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(DirectionsRenderer // required\n    , {\n      options: {\n        // eslint-disable-line react-perf/jsx-no-new-object-as-prop\n        directions: googleResponse.current\n      } // optional\n      ,\n      onLoad: directionsRenderer => {\n        console.log(\"DirectionsRenderer onLoad directionsRenderer: \", directionsRenderer);\n      } // optional\n      ,\n      onUnmount: directionsRenderer => {\n        console.log(\"DirectionsRenderer onUnmount directionsRenderer: \", directionsRenderer);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 5\n  }, this);\n};\n\nexport default /*#__PURE__*/React.memo(GoogleMaps);","map":{"version":3,"sources":["/Users/pulkitshah/Desktop/truckarv2/renderer/components/dashboard/order/google-maps.js"],"names":["React","useState","useRef","useMemo","useCallback","GoogleMap","Marker","DirectionsService","DirectionsRenderer","GoogleMaps","formik","console","log","googleResponse","directionsCallback","response","status","current","request","Boolean","mapTypeId","disableDefaultUI","width","height","minHeight","lat","lng","values","deliveryDetails","loading","description","unloading","origin","destination","travelMode","directionsService","directions","directionsRenderer","memo"],"mappings":"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","sourcesContent":["import React, { useState, useRef, useMemo, useCallback } from \"react\";\nimport {\n  GoogleMap,\n  Marker,\n  DirectionsService,\n  DirectionsRenderer,\n} from \"@react-google-maps/api\";\n\nconst GoogleMaps = ({ formik }) => {\n  console.log(\"child component\");\n\n  let googleResponse = useRef(null);\n\n  let directionsCallback = (response) => {\n    if (response !== null) {\n      if (response.status === \"OK\") {\n        console.log(googleResponse.current.request);\n        console.log(response.request);\n        console.log(\n          Boolean(googleResponse.current.request === response.request)\n        );\n        if (googleResponse.current === response) {\n          return;\n        } else {\n          googleResponse.current = response;\n          //   console.log(googleResponse.current);\n        }\n      } else {\n        console.log(\"response: \");\n      }\n    }\n  };\n\n  return (\n    <GoogleMap\n      options={{ mapTypeId: \"hybrid\", disableDefaultUI: true }}\n      mapContainerStyle={{\n        width: \"90%\",\n        height: \"100%\",\n        minHeight: \"12rem\",\n      }}\n      center={{\n        lat: 22.309425,\n        lng: 72.13623,\n      }}\n      zoom={5}\n    >\n      {console.log(googleResponse.current)}\n      {formik.values.deliveryDetails[0].loading.description &&\n        formik.values.deliveryDetails[0].unloading.description && (\n          <DirectionsService\n            // required\n            options={{\n              origin: formik.values.deliveryDetails[0].loading.description,\n              destination:\n                formik.values.deliveryDetails[0].unloading.description,\n              travelMode: \"DRIVING\",\n            }}\n            // required\n            callback={directionsCallback}\n            // optional\n            onLoad={(directionsService) => {\n              console.log(\n                \"DirectionsService onLoad directionsService: \",\n                directionsService\n              );\n            }}\n            // optional\n            onUnmount={(directionsService) => {\n              console.log(\n                \"DirectionsService onUnmount directionsService: \",\n                directionsService\n              );\n            }}\n          />\n        )}\n\n      {\n        <DirectionsRenderer\n          // required\n          options={{\n            // eslint-disable-line react-perf/jsx-no-new-object-as-prop\n            directions: googleResponse.current,\n          }}\n          // optional\n          onLoad={(directionsRenderer) => {\n            console.log(\n              \"DirectionsRenderer onLoad directionsRenderer: \",\n              directionsRenderer\n            );\n          }}\n          // optional\n          onUnmount={(directionsRenderer) => {\n            console.log(\n              \"DirectionsRenderer onUnmount directionsRenderer: \",\n              directionsRenderer\n            );\n          }}\n        />\n      }\n      {/* {formik.values.deliveryDetails.map((deliveries) => {\n        return (\n          <React.Fragment>\n            <Marker\n              key={deliveries.loading.place_id}\n              position={{\n                lat: deliveries.loading.latitude,\n                lng: deliveries.loading.longitude,\n              }}\n            />\n            <Marker\n              key={deliveries.unloading.place_id}\n              position={{\n                lat: deliveries.unloading.latitude,\n                lng: deliveries.unloading.longitude,\n              }}\n            />\n          </React.Fragment>\n        );\n      })} */}\n    </GoogleMap>\n  );\n};\n\nexport default React.memo(GoogleMaps);\n"]},"metadata":{},"sourceType":"module"}