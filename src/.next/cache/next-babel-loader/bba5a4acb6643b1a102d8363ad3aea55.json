{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/pulkitshah/Desktop/truckarv2/renderer/components/dashboard/autocompletes/driver-autocomplete/driver-autocomplete.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React, { useState, useEffect, useCallback } from \"react\";\nimport PropTypes from \"prop-types\";\nimport Autocomplete from \"@mui/material\";\nimport axios from \"src/utils/axios\";\nimport useIsMountedRef from \"src/hooks/useIsMountedRef\";\nimport { CircularProgress, Grid, TextField } from \"@material-ui/core\";\n\nconst DriverAutocomplete = (_ref) => {\n  let {\n    className,\n    touched,\n    setFieldValue,\n    errors,\n    handleBlur,\n    values,\n    driver,\n    setDriver\n  } = _ref,\n      rest = _objectWithoutProperties(_ref, [\"className\", \"touched\", \"setFieldValue\", \"errors\", \"handleBlur\", \"values\", \"driver\", \"setDriver\"]);\n\n  const {\n    0: open,\n    1: setOpen\n  } = useState(false);\n  const {\n    0: drivers,\n    1: setDrivers\n  } = useState([]);\n  const [inputValue, setInputValue] = React.useState(\"\");\n  const loading = open && drivers.length === 0;\n  const isMountedRef = useIsMountedRef();\n  const getDrivers = useCallback(async () => {\n    try {\n      const response = await axios.get(\"/api/drivers/\");\n\n      if (isMountedRef.current) {\n        setDrivers(response.data);\n      }\n    } catch (err) {\n      console.error(err);\n    }\n  }, [isMountedRef]);\n  useEffect(() => {\n    getDrivers();\n\n    if (!open) {\n      setDrivers([]);\n    }\n  }, [getDrivers, open]);\n  useEffect(() => {\n    console.log(\"driver has changed\");\n    setFieldValue(\"driver\", driver);\n  }, [setFieldValue, driver]);\n\n  const handleOnChange = (event, newValue) => {\n    setFieldValue(\"driver\", newValue); // setFieldValue('driver', newValue);\n  };\n\n  const handleInputChange = (event, newInputValue) => {\n    setInputValue(newInputValue); // setFieldValue('driver', newInputValue);\n  };\n\n  return /*#__PURE__*/_jsxDEV(Grid, {\n    item: true,\n    children: /*#__PURE__*/_jsxDEV(Autocomplete, {\n      autoSelect: true,\n      blurOnSelect: true,\n      id: \"driver\",\n      open: open,\n      onOpen: () => {\n        setOpen(true);\n      },\n      onClose: () => {\n        setOpen(false);\n      },\n      getOptionSelected: (option, value) => {\n        if (value) return option.name === value.name.replace(/\\w\\S*/g, function (txt) {\n          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();\n        });\n      },\n      getOptionLabel: option => {\n        return option && option.name.replace(/\\w\\S*/g, function (txt) {\n          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();\n        });\n      },\n      options: drivers,\n      loading: loading,\n      value: values.driver,\n      onChange: handleOnChange,\n      inputValue: inputValue,\n      onInputChange: handleInputChange,\n      renderInput: params => /*#__PURE__*/_jsxDEV(TextField, _objectSpread(_objectSpread({}, params), {}, {\n        name: \"driver\",\n        label: \"Driver\",\n        variant: \"outlined\",\n        error: Boolean(touched.driver && errors.driver),\n        fullWidth: true,\n        helperText: touched.driver && errors.driver,\n        onBlur: handleBlur,\n        InputProps: _objectSpread(_objectSpread({}, params.InputProps), {}, {\n          endAdornment: /*#__PURE__*/_jsxDEV(React.Fragment, {\n            children: [loading ? /*#__PURE__*/_jsxDEV(CircularProgress, {\n              color: \"inherit\",\n              size: 20\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 115,\n              columnNumber: 21\n            }, this) : null, params.InputProps.endAdornment]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 113,\n            columnNumber: 17\n          }, this)\n        })\n      }), void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 5\n  }, this);\n};\n\nDriverAutocomplete.propTypes = {\n  className: PropTypes.string\n};\nexport default DriverAutocomplete;","map":{"version":3,"sources":["/Users/pulkitshah/Desktop/truckarv2/renderer/components/dashboard/autocompletes/driver-autocomplete/driver-autocomplete.js"],"names":["React","useState","useEffect","useCallback","PropTypes","Autocomplete","axios","useIsMountedRef","CircularProgress","Grid","TextField","DriverAutocomplete","className","touched","setFieldValue","errors","handleBlur","values","driver","setDriver","rest","open","setOpen","drivers","setDrivers","inputValue","setInputValue","loading","length","isMountedRef","getDrivers","response","get","current","data","err","console","error","log","handleOnChange","event","newValue","handleInputChange","newInputValue","option","value","name","replace","txt","charAt","toUpperCase","substr","toLowerCase","params","Boolean","InputProps","endAdornment","propTypes","string"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useCallback } from \"react\";\nimport PropTypes from \"prop-types\";\nimport Autocomplete from \"@mui/material\";\nimport axios from \"src/utils/axios\";\nimport useIsMountedRef from \"src/hooks/useIsMountedRef\";\n\nimport { CircularProgress, Grid, TextField } from \"@material-ui/core\";\n\nconst DriverAutocomplete = ({\n  className,\n  touched,\n  setFieldValue,\n  errors,\n  handleBlur,\n  values,\n  driver,\n  setDriver,\n  ...rest\n}) => {\n  const [open, setOpen] = useState(false);\n  const [drivers, setDrivers] = useState([]);\n  const [inputValue, setInputValue] = React.useState(\"\");\n\n  const loading = open && drivers.length === 0;\n  const isMountedRef = useIsMountedRef();\n\n  const getDrivers = useCallback(async () => {\n    try {\n      const response = await axios.get(\"/api/drivers/\");\n      if (isMountedRef.current) {\n        setDrivers(response.data);\n      }\n    } catch (err) {\n      console.error(err);\n    }\n  }, [isMountedRef]);\n\n  useEffect(() => {\n    getDrivers();\n\n    if (!open) {\n      setDrivers([]);\n    }\n  }, [getDrivers, open]);\n\n  useEffect(() => {\n    console.log(\"driver has changed\");\n    setFieldValue(\"driver\", driver);\n  }, [setFieldValue, driver]);\n\n  const handleOnChange = (event, newValue) => {\n    setFieldValue(\"driver\", newValue);\n\n    // setFieldValue('driver', newValue);\n  };\n\n  const handleInputChange = (event, newInputValue) => {\n    setInputValue(newInputValue);\n    // setFieldValue('driver', newInputValue);\n  };\n\n  return (\n    <Grid item>\n      <Autocomplete\n        autoSelect={true}\n        blurOnSelect={true}\n        id=\"driver\"\n        open={open}\n        onOpen={() => {\n          setOpen(true);\n        }}\n        onClose={() => {\n          setOpen(false);\n        }}\n        getOptionSelected={(option, value) => {\n          if (value)\n            return (\n              option.name ===\n              value.name.replace(/\\w\\S*/g, function (txt) {\n                return (\n                  txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase()\n                );\n              })\n            );\n        }}\n        getOptionLabel={(option) => {\n          return (\n            option &&\n            option.name.replace(/\\w\\S*/g, function (txt) {\n              return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();\n            })\n          );\n        }}\n        options={drivers}\n        loading={loading}\n        value={values.driver}\n        onChange={handleOnChange}\n        inputValue={inputValue}\n        onInputChange={handleInputChange}\n        renderInput={(params) => (\n          <TextField\n            {...params}\n            name=\"driver\"\n            label=\"Driver\"\n            variant=\"outlined\"\n            error={Boolean(touched.driver && errors.driver)}\n            fullWidth\n            helperText={touched.driver && errors.driver}\n            onBlur={handleBlur}\n            InputProps={{\n              ...params.InputProps,\n              endAdornment: (\n                <React.Fragment>\n                  {loading ? (\n                    <CircularProgress color=\"inherit\" size={20} />\n                  ) : null}\n                  {params.InputProps.endAdornment}\n                </React.Fragment>\n              ),\n            }}\n          />\n        )}\n      />\n    </Grid>\n  );\n};\n\nDriverAutocomplete.propTypes = {\n  className: PropTypes.string,\n};\n\nexport default DriverAutocomplete;\n"]},"metadata":{},"sourceType":"module"}