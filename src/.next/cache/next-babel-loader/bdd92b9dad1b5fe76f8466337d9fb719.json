{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/pulkitshah/Desktop/truckarv2/renderer/components/dashboard/welcome/organisation-create-form.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport { forwardRef, useImperativeHandle } from \"react\";\nimport toast from \"react-hot-toast\";\nimport * as Yup from \"yup\";\nimport { useFormik } from \"formik\";\nimport { Divider, Grid, TextField, Typography } from \"@mui/material\";\nimport GoogleMaps from \"./google-places-autocomplete\";\nimport { useAuth } from \"../../../hooks/use-auth\";\nimport { organisationApi } from \"../../../api/organisation-api\";\nimport { userApi } from \"../../../api/user-api\";\nexport const OrganisationCreateForm = /*#__PURE__*/forwardRef((_ref, ref) => {\n  let {\n    handleNext,\n    setActiveStep\n  } = _ref,\n      props = _objectWithoutProperties(_ref, [\"handleNext\", \"setActiveStep\"]);\n\n  const {\n    user,\n    initialize\n  } = useAuth(); // console.log(user);\n\n  useImperativeHandle(ref, () => ({\n    handleFormSubmit() {\n      formik.handleSubmit();\n    }\n\n  }));\n  const formik = useFormik({\n    initialValues: {\n      organisationName: \"\",\n      gstin: \"\",\n      jurisdiction: \"\",\n      pan: \"\",\n      initials: \"\",\n      addressLine1: \"\",\n      addressLine2: \"\",\n      bankAccountNumber: \"\",\n      bankName: \"\",\n      bankBranchName: \"\",\n      bankIFSC: \"\",\n      invoiceTermsAndConditions: \"\",\n      contact: \"\",\n      email: \"\",\n      city: \"\",\n      submit: null\n    },\n    validationSchema: Yup.object({\n      organisationName: Yup.string().max(255).required(\"Please enter a organisation name.\"),\n      city: Yup.object().required(\"Please select a city.\")\n    }),\n    onSubmit: async (values, helpers) => {\n      try {\n        const newOrganisation = {\n          organisationName: values.organisationName,\n          user: user.id\n        };\n        await organisationApi.createOrganisation(newOrganisation);\n        await userApi.updateUser({\n          onBoardingRequired: false,\n          id: user.id\n        });\n        await initialize();\n        toast.success(\"Organisation created!\");\n        setActiveStep(1); // router.push(\"/dashboard/organisationes\");\n      } catch (err) {\n        console.error(err);\n        toast.error(\"Something went wrong!\");\n        helpers.setStatus({\n          success: false\n        });\n        helpers.setErrors({\n          submit: err.message\n        });\n        helpers.setSubmitting(false);\n      }\n    }\n  });\n  return /*#__PURE__*/_jsxDEV(\"form\", _objectSpread(_objectSpread({\n    onSubmit: formik.handleSubmit\n  }, props), {}, {\n    children: /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      spacing: 5,\n      alignItems: \"center\",\n      sx: {\n        mb: 4,\n        mt: 2\n      },\n      children: [/*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        md: 4,\n        xs: 12,\n        children: /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h6\",\n          children: \"Please pick a name\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        md: 8,\n        xs: 12,\n        children: /*#__PURE__*/_jsxDEV(TextField, {\n          error: Boolean(formik.touched.organisationName && formik.errors.organisationName),\n          fullWidth: true,\n          helperText: formik.touched.organisationName && formik.errors.organisationName,\n          label: \"Your organisation name\",\n          name: \"organisationName\",\n          onBlur: formik.handleBlur,\n          onChange: formik.handleChange,\n          value: formik.values.organisationName\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 9\n    }, this)\n  }), void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 7\n  }, this);\n});","map":{"version":3,"sources":["/Users/pulkitshah/Desktop/truckarv2/renderer/components/dashboard/welcome/organisation-create-form.js"],"names":["forwardRef","useImperativeHandle","toast","Yup","useFormik","Divider","Grid","TextField","Typography","GoogleMaps","useAuth","organisationApi","userApi","OrganisationCreateForm","ref","handleNext","setActiveStep","props","user","initialize","handleFormSubmit","formik","handleSubmit","initialValues","organisationName","gstin","jurisdiction","pan","initials","addressLine1","addressLine2","bankAccountNumber","bankName","bankBranchName","bankIFSC","invoiceTermsAndConditions","contact","email","city","submit","validationSchema","object","string","max","required","onSubmit","values","helpers","newOrganisation","id","createOrganisation","updateUser","onBoardingRequired","success","err","console","error","setStatus","setErrors","message","setSubmitting","mb","mt","Boolean","touched","errors","handleBlur","handleChange"],"mappings":"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","sourcesContent":["import { forwardRef, useImperativeHandle } from \"react\";\nimport toast from \"react-hot-toast\";\nimport * as Yup from \"yup\";\nimport { useFormik } from \"formik\";\nimport { Divider, Grid, TextField, Typography } from \"@mui/material\";\nimport GoogleMaps from \"./google-places-autocomplete\";\nimport { useAuth } from \"../../../hooks/use-auth\";\nimport { organisationApi } from \"../../../api/organisation-api\";\nimport { userApi } from \"../../../api/user-api\";\n\nexport const OrganisationCreateForm = forwardRef(\n  ({ handleNext, setActiveStep, ...props }, ref) => {\n    const { user, initialize } = useAuth();\n    // console.log(user);\n\n    useImperativeHandle(ref, () => ({\n      handleFormSubmit() {\n        formik.handleSubmit();\n      },\n    }));\n\n    const formik = useFormik({\n      initialValues: {\n        organisationName: \"\",\n        gstin: \"\",\n        jurisdiction: \"\",\n        pan: \"\",\n        initials: \"\",\n        addressLine1: \"\",\n        addressLine2: \"\",\n        bankAccountNumber: \"\",\n        bankName: \"\",\n        bankBranchName: \"\",\n        bankIFSC: \"\",\n        invoiceTermsAndConditions: \"\",\n        contact: \"\",\n        email: \"\",\n        city: \"\",\n        submit: null,\n      },\n      validationSchema: Yup.object({\n        organisationName: Yup.string()\n          .max(255)\n          .required(\"Please enter a organisation name.\"),\n        city: Yup.object().required(\"Please select a city.\"),\n      }),\n      onSubmit: async (values, helpers) => {\n        try {\n          const newOrganisation = {\n            organisationName: values.organisationName,\n            user: user.id,\n          };\n\n          await organisationApi.createOrganisation(newOrganisation);\n          await userApi.updateUser({\n            onBoardingRequired: false,\n            id: user.id,\n          });\n          await initialize();\n          toast.success(\"Organisation created!\");\n          setActiveStep(1);\n          // router.push(\"/dashboard/organisationes\");\n        } catch (err) {\n          console.error(err);\n          toast.error(\"Something went wrong!\");\n          helpers.setStatus({ success: false });\n          helpers.setErrors({ submit: err.message });\n          helpers.setSubmitting(false);\n        }\n      },\n    });\n\n    return (\n      <form onSubmit={formik.handleSubmit} {...props}>\n        <Grid container spacing={5} alignItems=\"center\" sx={{ mb: 4, mt: 2 }}>\n          {/* <Grid item md={4} xs={12}>\n            <Typography variant=\"h6\">Tell us your city</Typography>\n          </Grid>\n          <Grid item md={8} xs={12}>\n            <GoogleMaps\n              formik={formik}\n              error={Boolean(formik.touched.city && formik.errors.city)}\n              label={\"Your city in India\"}\n              field={\"city\"}\n              setFieldValue={formik.setFieldValue}\n              handleBlur={formik.handleBlur}\n              values={formik.values}\n            />\n          </Grid>\n          <Grid item xs={12}>\n            <Divider />\n          </Grid> */}\n          <Grid item md={4} xs={12}>\n            <Typography variant=\"h6\">Please pick a name</Typography>\n          </Grid>\n          <Grid item md={8} xs={12}>\n            <TextField\n              error={Boolean(\n                formik.touched.organisationName &&\n                  formik.errors.organisationName\n              )}\n              fullWidth\n              helperText={\n                formik.touched.organisationName &&\n                formik.errors.organisationName\n              }\n              label=\"Your organisation name\"\n              name=\"organisationName\"\n              onBlur={formik.handleBlur}\n              onChange={formik.handleChange}\n              value={formik.values.organisationName}\n            />\n          </Grid>\n        </Grid>\n      </form>\n    );\n  }\n);\n"]},"metadata":{},"sourceType":"module"}