{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/pulkitshah/Desktop/truckarv2/renderer/components/dashboard/order/google-places-autocomplete.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport * as React from \"react\";\nimport Box from \"@mui/material/Box\";\nimport TextField from \"@mui/material/TextField\";\nimport Autocomplete from \"@mui/material/Autocomplete\";\nimport LocationOnIcon from \"@mui/icons-material/LocationOn\";\nimport Grid from \"@mui/material/Grid\";\nimport Typography from \"@mui/material/Typography\";\nimport parse from \"autosuggest-highlight/parse\";\nimport throttle from \"lodash/throttle\";\nconst autocompleteService = {\n  current: null\n};\nexport default function GoogleMaps({\n  label,\n  handleBlur,\n  formik,\n  field,\n  values\n}) {\n  const [value, setValue] = React.useState(values.deliveryDetails[index][type] ? values.deliveryDetails[index][type] : null);\n  const [inputValue, setInputValue] = React.useState(\"\");\n  const [options, setOptions] = React.useState([]);\n  const loaded = React.useRef(false);\n  React.useEffect(() => {\n    setValue(values.deliveryDetails[index][type]);\n  }, [values.deliveryDetails.length]);\n  const fetch = React.useMemo(() => throttle((request, callback) => {\n    autocompleteService.current.getPlacePredictions(request, callback);\n  }, 200), []);\n  React.useEffect(() => {\n    let active = true;\n\n    if (!autocompleteService.current && window.google) {\n      autocompleteService.current = new window.google.maps.places.AutocompleteService();\n    }\n\n    if (!autocompleteService.current) {\n      return undefined;\n    }\n\n    if (inputValue === \"\") {\n      setOptions(value ? [value] : []);\n      return undefined;\n    }\n\n    fetch({\n      input: inputValue,\n      types: [\"(cities)\"],\n      componentRestrictions: {\n        country: \"in\"\n      },\n      fields: [\"address_components\", \"geometry\", \"icon\", \"name\"]\n    }, results => {\n      if (active) {\n        let newOptions = [];\n\n        if (value) {\n          newOptions = [value];\n        }\n\n        if (results) {\n          newOptions = [...newOptions, ...results];\n        }\n\n        setOptions(newOptions);\n      }\n    });\n    return () => {\n      active = false;\n    };\n  }, [value, inputValue, fetch]);\n  return /*#__PURE__*/_jsxDEV(Autocomplete, {\n    id: `deliveryDetails[${index}].${type}`,\n    autoSelect: true,\n    onBlur: handleBlur,\n    blurOnSelect: true //   sx={{ width: 300 }}\n    ,\n    getOptionLabel: option => typeof option === \"string\" ? option : option.structured_formatting.main_text,\n    filterOptions: x => x,\n    options: options,\n    autoComplete: true,\n    includeInputInList: true,\n    filterSelectedOptions: true,\n    value: value,\n    onChange: (event, newValue) => {\n      var geocoder = new window.google.maps.Geocoder();\n\n      if (newValue) {\n        geocoder.geocode({\n          placeId: newValue.place_id\n        }, function (results, status) {\n          if (status === window.google.maps.GeocoderStatus.OK) {\n            formik.setFieldValue(`${field}.latitude`, results[0].geometry.location.lat());\n            formik.setFieldValue(`${field}.longitude`, results[0].geometry.location.lng());\n            formik.setFieldValue(`${field}.description`, newValue.description);\n            formik.setFieldValue(`${field}.structured_formatting`, newValue.structured_formatting);\n            formik.setFieldValue(`${field}.place_id`, newValue.place_id);\n            formik.setFieldValue(`branchName`, `${newValue.structured_formatting.main_text} Branch`);\n          } else {\n            alert(\"Can't find address: \" + status);\n          }\n        });\n      }\n\n      setOptions(newValue ? [newValue, ...options] : options);\n      setValue(newValue);\n    },\n    onInputChange: (event, newInputValue) => {\n      setInputValue(newInputValue);\n    },\n    renderInput: params => /*#__PURE__*/_jsxDEV(TextField, _objectSpread(_objectSpread({}, params), {}, {\n      placeholder: label,\n      helperText: formik.touched[field] && formik.errors[field] ? formik.errors[field] : \"\",\n      error: Boolean(formik.touched[field] && formik.errors[field]),\n      fullWidth: true\n    }), void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 9\n    }, this),\n    renderOption: (props, option) => {\n      const matches = option.structured_formatting.main_text_matched_substrings;\n      const parts = parse(option.structured_formatting.main_text, matches.map(match => [match.offset, match.offset + match.length]));\n      return /*#__PURE__*/_jsxDEV(\"li\", _objectSpread(_objectSpread({}, props), {}, {\n        children: /*#__PURE__*/_jsxDEV(Grid, {\n          container: true,\n          alignItems: \"center\",\n          children: [/*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            children: /*#__PURE__*/_jsxDEV(Box, {\n              component: LocationOnIcon,\n              sx: {\n                color: \"text.secondary\",\n                mr: 2\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 169,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 168,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: true,\n            children: [parts.map((part, index) => /*#__PURE__*/_jsxDEV(\"span\", {\n              style: {\n                fontWeight: part.highlight ? 700 : 400\n              },\n              children: part.text\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 176,\n              columnNumber: 19\n            }, this)), /*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"body2\",\n              color: \"text.secondary\",\n              children: option.structured_formatting.secondary_text\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 186,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 174,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 167,\n          columnNumber: 13\n        }, this)\n      }), void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 11\n      }, this);\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 87,\n    columnNumber: 5\n  }, this);\n}","map":{"version":3,"sources":["/Users/pulkitshah/Desktop/truckarv2/renderer/components/dashboard/order/google-places-autocomplete.js"],"names":["React","Box","TextField","Autocomplete","LocationOnIcon","Grid","Typography","parse","throttle","autocompleteService","current","GoogleMaps","label","handleBlur","formik","field","values","value","setValue","useState","deliveryDetails","index","type","inputValue","setInputValue","options","setOptions","loaded","useRef","useEffect","length","fetch","useMemo","request","callback","getPlacePredictions","active","window","google","maps","places","AutocompleteService","undefined","input","types","componentRestrictions","country","fields","results","newOptions","option","structured_formatting","main_text","x","event","newValue","geocoder","Geocoder","geocode","placeId","place_id","status","GeocoderStatus","OK","setFieldValue","geometry","location","lat","lng","description","alert","newInputValue","params","touched","errors","Boolean","props","matches","main_text_matched_substrings","parts","map","match","offset","color","mr","part","fontWeight","highlight","text","secondary_text"],"mappings":"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","sourcesContent":["import * as React from \"react\";\nimport Box from \"@mui/material/Box\";\nimport TextField from \"@mui/material/TextField\";\nimport Autocomplete from \"@mui/material/Autocomplete\";\nimport LocationOnIcon from \"@mui/icons-material/LocationOn\";\nimport Grid from \"@mui/material/Grid\";\nimport Typography from \"@mui/material/Typography\";\nimport parse from \"autosuggest-highlight/parse\";\nimport throttle from \"lodash/throttle\";\n\nconst autocompleteService = { current: null };\n\nexport default function GoogleMaps({\n  label,\n  handleBlur,\n  formik,\n  field,\n  values,\n}) {\n  const [value, setValue] = React.useState(\n    values.deliveryDetails[index][type]\n      ? values.deliveryDetails[index][type]\n      : null\n  );\n  const [inputValue, setInputValue] = React.useState(\"\");\n  const [options, setOptions] = React.useState([]);\n  const loaded = React.useRef(false);\n\n  React.useEffect(() => {\n    setValue(values.deliveryDetails[index][type]);\n  }, [values.deliveryDetails.length]);\n\n  const fetch = React.useMemo(\n    () =>\n      throttle((request, callback) => {\n        autocompleteService.current.getPlacePredictions(request, callback);\n      }, 200),\n    []\n  );\n\n  React.useEffect(() => {\n    let active = true;\n\n    if (!autocompleteService.current && window.google) {\n      autocompleteService.current =\n        new window.google.maps.places.AutocompleteService();\n    }\n    if (!autocompleteService.current) {\n      return undefined;\n    }\n\n    if (inputValue === \"\") {\n      setOptions(value ? [value] : []);\n      return undefined;\n    }\n\n    fetch(\n      {\n        input: inputValue,\n        types: [\"(cities)\"],\n        componentRestrictions: { country: \"in\" },\n        fields: [\"address_components\", \"geometry\", \"icon\", \"name\"],\n      },\n      (results) => {\n        if (active) {\n          let newOptions = [];\n\n          if (value) {\n            newOptions = [value];\n          }\n\n          if (results) {\n            newOptions = [...newOptions, ...results];\n          }\n\n          setOptions(newOptions);\n        }\n      }\n    );\n\n    return () => {\n      active = false;\n    };\n  }, [value, inputValue, fetch]);\n\n  return (\n    <Autocomplete\n      id={`deliveryDetails[${index}].${type}`}\n      autoSelect={true}\n      onBlur={handleBlur}\n      blurOnSelect={true}\n      //   sx={{ width: 300 }}\n      getOptionLabel={(option) =>\n        typeof option === \"string\"\n          ? option\n          : option.structured_formatting.main_text\n      }\n      filterOptions={(x) => x}\n      options={options}\n      autoComplete\n      includeInputInList\n      filterSelectedOptions\n      value={value}\n      onChange={(event, newValue) => {\n        var geocoder = new window.google.maps.Geocoder();\n        if (newValue) {\n          geocoder.geocode(\n            { placeId: newValue.place_id },\n            function (results, status) {\n              if (status === window.google.maps.GeocoderStatus.OK) {\n                formik.setFieldValue(\n                  `${field}.latitude`,\n                  results[0].geometry.location.lat()\n                );\n                formik.setFieldValue(\n                  `${field}.longitude`,\n                  results[0].geometry.location.lng()\n                );\n                formik.setFieldValue(\n                  `${field}.description`,\n                  newValue.description\n                );\n                formik.setFieldValue(\n                  `${field}.structured_formatting`,\n                  newValue.structured_formatting\n                );\n                formik.setFieldValue(`${field}.place_id`, newValue.place_id);\n                formik.setFieldValue(\n                  `branchName`,\n                  `${newValue.structured_formatting.main_text} Branch`\n                );\n              } else {\n                alert(\"Can't find address: \" + status);\n              }\n            }\n          );\n        }\n        setOptions(newValue ? [newValue, ...options] : options);\n        setValue(newValue);\n      }}\n      onInputChange={(event, newInputValue) => {\n        setInputValue(newInputValue);\n      }}\n      renderInput={(params) => (\n        <TextField\n          {...params}\n          placeholder={label}\n          helperText={\n            formik.touched[field] && formik.errors[field]\n              ? formik.errors[field]\n              : \"\"\n          }\n          error={Boolean(formik.touched[field] && formik.errors[field])}\n          fullWidth\n        />\n      )}\n      renderOption={(props, option) => {\n        const matches =\n          option.structured_formatting.main_text_matched_substrings;\n        const parts = parse(\n          option.structured_formatting.main_text,\n          matches.map((match) => [match.offset, match.offset + match.length])\n        );\n\n        return (\n          <li {...props}>\n            <Grid container alignItems=\"center\">\n              <Grid item>\n                <Box\n                  component={LocationOnIcon}\n                  sx={{ color: \"text.secondary\", mr: 2 }}\n                />\n              </Grid>\n              <Grid item xs>\n                {parts.map((part, index) => (\n                  <span\n                    key={index}\n                    style={{\n                      fontWeight: part.highlight ? 700 : 400,\n                    }}\n                  >\n                    {part.text}\n                  </span>\n                ))}\n\n                <Typography variant=\"body2\" color=\"text.secondary\">\n                  {option.structured_formatting.secondary_text}\n                </Typography>\n              </Grid>\n            </Grid>\n          </li>\n        );\n      }}\n    />\n  );\n}\n"]},"metadata":{},"sourceType":"module"}