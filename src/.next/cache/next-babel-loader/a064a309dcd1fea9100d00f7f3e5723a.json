{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/pulkitshah/Desktop/truckarv2/renderer/components/dashboard/branch/branch-create-form.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { useState } from \"react\";\nimport { useRouter } from \"next/router\";\nimport toast from \"react-hot-toast\";\nimport * as Yup from \"yup\";\nimport { useFormik } from \"formik\";\nimport { Box, Button, Card, CardContent, Grid, TextField, Typography } from \"@mui/material\";\nimport { useAuth } from \"../../../hooks/use-auth\";\nimport { v4 as uuid } from \"uuid\";\nimport { branchApi } from \"../../../api/branch-api\";\nimport { useDispatch } from \"../../../store\";\nimport { branchNameFormatter } from \"../../../utils/customFormatters\";\nexport const BranchCreateForm = props => {\n  const router = useRouter();\n  const dispatch = useDispatch();\n  const {\n    user\n  } = useAuth();\n  const formik = useFormik({\n    initialValues: {\n      branchName: \"\",\n      make: \"\",\n      model: \"\"\n    },\n    // validationSchema: Yup.object({\n    //   name: Yup.string().max(255).required(\"Name is required\"),\n    // }),\n    onSubmit: async (values, helpers) => {\n      try {\n        // NOTE: Make API request\n        const id = uuid();\n        values.id = id;\n        values.user = user.id;\n        console.log(values);\n        await branchApi.createBranch(values, dispatch);\n        toast.success(\"Branch created!\"); // router.push(\"/dashboard/branches\");\n      } catch (err) {\n        console.error(err);\n        toast.error(\"Something went wrong!\");\n        helpers.setStatus({\n          success: false\n        });\n        helpers.setErrors({\n          submit: err.message\n        });\n        helpers.setSubmitting(false);\n      }\n    }\n  });\n  return /*#__PURE__*/_jsxDEV(\"form\", _objectSpread(_objectSpread({\n    onSubmit: formik.handleSubmit\n  }, props), {}, {\n    children: [/*#__PURE__*/_jsxDEV(Card, {\n      children: /*#__PURE__*/_jsxDEV(CardContent, {\n        children: /*#__PURE__*/_jsxDEV(Grid, {\n          container: true,\n          spacing: 3,\n          children: [/*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            md: 4,\n            xs: 12,\n            children: /*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"h6\",\n              children: \"Truck details\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 61,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 60,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            md: 8,\n            xs: 12,\n            children: /*#__PURE__*/_jsxDEV(Grid, {\n              container: true,\n              spacing: 3,\n              children: /*#__PURE__*/_jsxDEV(Grid, {\n                item: true,\n                xs: 12,\n                children: /*#__PURE__*/_jsxDEV(TextField, {\n                  error: Boolean(formik.touched.branchName && formik.errors.branchName),\n                  fullWidth: true,\n                  helperText: formik.touched.branchName && formik.errors.branchName,\n                  label: \"Branch Name\",\n                  name: \"branchName\",\n                  onBlur: formik.handleBlur,\n                  onChange: event => {\n                    formik.setFieldValue(`branchName`, event.target.value.toUpperCase());\n                  },\n                  value: formik.values.branchName,\n                  variant: \"outlined\",\n                  inputProps: {\n                    style: {\n                      textTransform: \"uppercase\"\n                    }\n                  },\n                  InputProps: {\n                    inputComponent: branchNameFormatter\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 66,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 65,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 64,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 63,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        display: \"flex\",\n        flexWrap: \"wrap\",\n        justifyContent: \"space-between\",\n        mx: -1,\n        mb: -1,\n        mt: 3\n      },\n      children: [/*#__PURE__*/_jsxDEV(Button, {\n        color: \"error\",\n        sx: {\n          m: 1,\n          mr: \"auto\"\n        },\n        children: \"Delete\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        sx: {\n          m: 1\n        },\n        variant: \"outlined\",\n        children: \"Cancel\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        sx: {\n          m: 1\n        },\n        type: \"submit\",\n        variant: \"contained\",\n        children: \"Create\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }, this)]\n  }), void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 5\n  }, this);\n};","map":{"version":3,"sources":["/Users/pulkitshah/Desktop/truckarv2/renderer/components/dashboard/branch/branch-create-form.js"],"names":["useState","useRouter","toast","Yup","useFormik","Box","Button","Card","CardContent","Grid","TextField","Typography","useAuth","v4","uuid","branchApi","useDispatch","branchNameFormatter","BranchCreateForm","props","router","dispatch","user","formik","initialValues","branchName","make","model","onSubmit","values","helpers","id","console","log","createBranch","success","err","error","setStatus","setErrors","submit","message","setSubmitting","handleSubmit","Boolean","touched","errors","handleBlur","event","setFieldValue","target","value","toUpperCase","style","textTransform","inputComponent","display","flexWrap","justifyContent","mx","mb","mt","m","mr"],"mappings":";;;;;;;;;AAAA,SAASA,QAAT,QAAyB,OAAzB;AACA,SAASC,SAAT,QAA0B,aAA1B;AACA,OAAOC,KAAP,MAAkB,iBAAlB;AACA,OAAO,KAAKC,GAAZ,MAAqB,KAArB;AACA,SAASC,SAAT,QAA0B,QAA1B;AACA,SACEC,GADF,EAEEC,MAFF,EAGEC,IAHF,EAIEC,WAJF,EAKEC,IALF,EAMEC,SANF,EAOEC,UAPF,QAQO,eARP;AASA,SAASC,OAAT,QAAwB,yBAAxB;AACA,SAASC,EAAE,IAAIC,IAAf,QAA2B,MAA3B;AACA,SAASC,SAAT,QAA0B,yBAA1B;AACA,SAASC,WAAT,QAA4B,gBAA5B;AACA,SAASC,mBAAT,QAAoC,iCAApC;AAEA,OAAO,MAAMC,gBAAgB,GAAIC,KAAD,IAAW;AACzC,QAAMC,MAAM,GAAGnB,SAAS,EAAxB;AACA,QAAMoB,QAAQ,GAAGL,WAAW,EAA5B;AACA,QAAM;AAAEM,IAAAA;AAAF,MAAWV,OAAO,EAAxB;AACA,QAAMW,MAAM,GAAGnB,SAAS,CAAC;AACvBoB,IAAAA,aAAa,EAAE;AACbC,MAAAA,UAAU,EAAE,EADC;AAEbC,MAAAA,IAAI,EAAE,EAFO;AAGbC,MAAAA,KAAK,EAAE;AAHM,KADQ;AAMvB;AACA;AACA;AACAC,IAAAA,QAAQ,EAAE,OAAOC,MAAP,EAAeC,OAAf,KAA2B;AACnC,UAAI;AACF;AACA,cAAMC,EAAE,GAAGjB,IAAI,EAAf;AACAe,QAAAA,MAAM,CAACE,EAAP,GAAYA,EAAZ;AACAF,QAAAA,MAAM,CAACP,IAAP,GAAcA,IAAI,CAACS,EAAnB;AACAC,QAAAA,OAAO,CAACC,GAAR,CAAYJ,MAAZ;AACA,cAAMd,SAAS,CAACmB,YAAV,CAAuBL,MAAvB,EAA+BR,QAA/B,CAAN;AAEAnB,QAAAA,KAAK,CAACiC,OAAN,CAAc,iBAAd,EARE,CASF;AACD,OAVD,CAUE,OAAOC,GAAP,EAAY;AACZJ,QAAAA,OAAO,CAACK,KAAR,CAAcD,GAAd;AACAlC,QAAAA,KAAK,CAACmC,KAAN,CAAY,uBAAZ;AACAP,QAAAA,OAAO,CAACQ,SAAR,CAAkB;AAAEH,UAAAA,OAAO,EAAE;AAAX,SAAlB;AACAL,QAAAA,OAAO,CAACS,SAAR,CAAkB;AAAEC,UAAAA,MAAM,EAAEJ,GAAG,CAACK;AAAd,SAAlB;AACAX,QAAAA,OAAO,CAACY,aAAR,CAAsB,KAAtB;AACD;AACF;AA3BsB,GAAD,CAAxB;AA8BA,sBACE;AAAM,IAAA,QAAQ,EAAEnB,MAAM,CAACoB;AAAvB,KAAyCxB,KAAzC;AAAA,4BACE,QAAC,IAAD;AAAA,6BACE,QAAC,WAAD;AAAA,+BACE,QAAC,IAAD;AAAM,UAAA,SAAS,MAAf;AAAgB,UAAA,OAAO,EAAE,CAAzB;AAAA,kCACE,QAAC,IAAD;AAAM,YAAA,IAAI,MAAV;AAAW,YAAA,EAAE,EAAE,CAAf;AAAkB,YAAA,EAAE,EAAE,EAAtB;AAAA,mCACE,QAAC,UAAD;AAAY,cAAA,OAAO,EAAC,IAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,kBADF,eAIE,QAAC,IAAD;AAAM,YAAA,IAAI,MAAV;AAAW,YAAA,EAAE,EAAE,CAAf;AAAkB,YAAA,EAAE,EAAE,EAAtB;AAAA,mCACE,QAAC,IAAD;AAAM,cAAA,SAAS,MAAf;AAAgB,cAAA,OAAO,EAAE,CAAzB;AAAA,qCACE,QAAC,IAAD;AAAM,gBAAA,IAAI,MAAV;AAAW,gBAAA,EAAE,EAAE,EAAf;AAAA,uCACE,QAAC,SAAD;AACE,kBAAA,KAAK,EAAEyB,OAAO,CACZrB,MAAM,CAACsB,OAAP,CAAepB,UAAf,IAA6BF,MAAM,CAACuB,MAAP,CAAcrB,UAD/B,CADhB;AAIE,kBAAA,SAAS,MAJX;AAKE,kBAAA,UAAU,EACRF,MAAM,CAACsB,OAAP,CAAepB,UAAf,IAA6BF,MAAM,CAACuB,MAAP,CAAcrB,UAN/C;AAQE,kBAAA,KAAK,EAAC,aARR;AASE,kBAAA,IAAI,EAAC,YATP;AAUE,kBAAA,MAAM,EAAEF,MAAM,CAACwB,UAVjB;AAWE,kBAAA,QAAQ,EAAGC,KAAD,IAAW;AACnBzB,oBAAAA,MAAM,CAAC0B,aAAP,CACG,YADH,EAEED,KAAK,CAACE,MAAN,CAAaC,KAAb,CAAmBC,WAAnB,EAFF;AAID,mBAhBH;AAiBE,kBAAA,KAAK,EAAE7B,MAAM,CAACM,MAAP,CAAcJ,UAjBvB;AAkBE,kBAAA,OAAO,EAAC,UAlBV;AAmBE,kBAAA,UAAU,EAAE;AAAE4B,oBAAAA,KAAK,EAAE;AAAEC,sBAAAA,aAAa,EAAE;AAAjB;AAAT,mBAnBd;AAoBE,kBAAA,UAAU,EAAE;AACVC,oBAAAA,cAAc,EAAEtC;AADN;AApBd;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,kBAJF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADF,eA8CE,QAAC,GAAD;AACE,MAAA,EAAE,EAAE;AACFuC,QAAAA,OAAO,EAAE,MADP;AAEFC,QAAAA,QAAQ,EAAE,MAFR;AAGFC,QAAAA,cAAc,EAAE,eAHd;AAIFC,QAAAA,EAAE,EAAE,CAAC,CAJH;AAKFC,QAAAA,EAAE,EAAE,CAAC,CALH;AAMFC,QAAAA,EAAE,EAAE;AANF,OADN;AAAA,8BAUE,QAAC,MAAD;AACE,QAAA,KAAK,EAAC,OADR;AAEE,QAAA,EAAE,EAAE;AACFC,UAAAA,CAAC,EAAE,CADD;AAEFC,UAAAA,EAAE,EAAE;AAFF,SAFN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAVF,eAmBE,QAAC,MAAD;AAAQ,QAAA,EAAE,EAAE;AAAED,UAAAA,CAAC,EAAE;AAAL,SAAZ;AAAsB,QAAA,OAAO,EAAC,UAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAnBF,eAsBE,QAAC,MAAD;AAAQ,QAAA,EAAE,EAAE;AAAEA,UAAAA,CAAC,EAAE;AAAL,SAAZ;AAAsB,QAAA,IAAI,EAAC,QAA3B;AAAoC,QAAA,OAAO,EAAC,WAA5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAtBF;AAAA;AAAA;AAAA;AAAA;AAAA,YA9CF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AA2ED,CA7GM","sourcesContent":["import { useState } from \"react\";\nimport { useRouter } from \"next/router\";\nimport toast from \"react-hot-toast\";\nimport * as Yup from \"yup\";\nimport { useFormik } from \"formik\";\nimport {\n  Box,\n  Button,\n  Card,\n  CardContent,\n  Grid,\n  TextField,\n  Typography,\n} from \"@mui/material\";\nimport { useAuth } from \"../../../hooks/use-auth\";\nimport { v4 as uuid } from \"uuid\";\nimport { branchApi } from \"../../../api/branch-api\";\nimport { useDispatch } from \"../../../store\";\nimport { branchNameFormatter } from \"../../../utils/customFormatters\";\n\nexport const BranchCreateForm = (props) => {\n  const router = useRouter();\n  const dispatch = useDispatch();\n  const { user } = useAuth();\n  const formik = useFormik({\n    initialValues: {\n      branchName: \"\",\n      make: \"\",\n      model: \"\",\n    },\n    // validationSchema: Yup.object({\n    //   name: Yup.string().max(255).required(\"Name is required\"),\n    // }),\n    onSubmit: async (values, helpers) => {\n      try {\n        // NOTE: Make API request\n        const id = uuid();\n        values.id = id;\n        values.user = user.id;\n        console.log(values);\n        await branchApi.createBranch(values, dispatch);\n\n        toast.success(\"Branch created!\");\n        // router.push(\"/dashboard/branches\");\n      } catch (err) {\n        console.error(err);\n        toast.error(\"Something went wrong!\");\n        helpers.setStatus({ success: false });\n        helpers.setErrors({ submit: err.message });\n        helpers.setSubmitting(false);\n      }\n    },\n  });\n\n  return (\n    <form onSubmit={formik.handleSubmit} {...props}>\n      <Card>\n        <CardContent>\n          <Grid container spacing={3}>\n            <Grid item md={4} xs={12}>\n              <Typography variant=\"h6\">Truck details</Typography>\n            </Grid>\n            <Grid item md={8} xs={12}>\n              <Grid container spacing={3}>\n                <Grid item xs={12}>\n                  <TextField\n                    error={Boolean(\n                      formik.touched.branchName && formik.errors.branchName\n                    )}\n                    fullWidth\n                    helperText={\n                      formik.touched.branchName && formik.errors.branchName\n                    }\n                    label=\"Branch Name\"\n                    name=\"branchName\"\n                    onBlur={formik.handleBlur}\n                    onChange={(event) => {\n                      formik.setFieldValue(\n                        `branchName`,\n                        event.target.value.toUpperCase()\n                      );\n                    }}\n                    value={formik.values.branchName}\n                    variant=\"outlined\"\n                    inputProps={{ style: { textTransform: \"uppercase\" } }}\n                    InputProps={{\n                      inputComponent: branchNameFormatter,\n                    }}\n                  />\n\n                  {/* \n                    onChange={event => {\n                      handleChange(event);\n                    }} */}\n                </Grid>\n              </Grid>\n            </Grid>\n          </Grid>\n        </CardContent>\n      </Card>\n\n      <Box\n        sx={{\n          display: \"flex\",\n          flexWrap: \"wrap\",\n          justifyContent: \"space-between\",\n          mx: -1,\n          mb: -1,\n          mt: 3,\n        }}\n      >\n        <Button\n          color=\"error\"\n          sx={{\n            m: 1,\n            mr: \"auto\",\n          }}\n        >\n          Delete\n        </Button>\n        <Button sx={{ m: 1 }} variant=\"outlined\">\n          Cancel\n        </Button>\n        <Button sx={{ m: 1 }} type=\"submit\" variant=\"contained\">\n          Create\n        </Button>\n      </Box>\n    </form>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}