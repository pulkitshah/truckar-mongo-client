{"ast":null,"code":"import _regeneratorRuntime from \"/Users/pulkitshah/Desktop/truckarv2/node_modules/next/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/pulkitshah/Desktop/truckarv2/node_modules/next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/pulkitshah/Desktop/truckarv2/node_modules/next/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/pulkitshah/Desktop/truckarv2/node_modules/next/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { API } from \"aws-amplify\";\nimport { branchesByUser } from \"../graphql/queries\";\nimport { createBranch as _createBranch, updateBranch as _updateBranch } from \"../graphql/mutations\";\nimport { Branch } from \"../models\";\nimport { DataStore, Predicates } from \"@aws-amplify/datastore\";\nimport moment from \"moment\";\nimport { slice } from \"../slices/branches\";\nvar now = new Date();\n\nvar BranchApi = /*#__PURE__*/function () {\n  function BranchApi() {\n    _classCallCheck(this, BranchApi);\n  }\n\n  _createClass(BranchApi, [{\n    key: \"getBranchesByUser\",\n    value: function () {\n      var _getBranchesByUser = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(user, dispatch) {\n        var branches;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.prev = 0;\n                _context.next = 3;\n                return DataStore.query(Branch, function (c) {\n                  return c.user(\"eq\", user.id);\n                });\n\n              case 3:\n                branches = _context.sent;\n                //////////////////////// DataStore API ////////////////////////\n                // console.log(branches);\n                // Dispatch - Reducer\n                dispatch(slice.actions.getBranches(branches));\n                return _context.abrupt(\"return\", branches);\n\n              case 8:\n                _context.prev = 8;\n                _context.t0 = _context[\"catch\"](0);\n                console.log(_context.t0);\n\n              case 11:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, null, [[0, 8]]);\n      }));\n\n      function getBranchesByUser(_x, _x2) {\n        return _getBranchesByUser.apply(this, arguments);\n      }\n\n      return getBranchesByUser;\n    }()\n  }, {\n    key: \"createBranch\",\n    value: function () {\n      var _createBranch2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(newBranch, dispatch) {\n        var createdAt, newOrg, response, branch;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                createdAt = moment().toISOString();\n                newOrg = newBranch;\n                newOrg.createdAt = createdAt; //////////////////////// GraphQL API ////////////////////////\n\n                _context2.next = 5;\n                return API.graphql({\n                  query: _createBranch,\n                  variables: {\n                    input: newOrg\n                  },\n                  authMode: \"AMAZON_COGNITO_USER_POOLS\"\n                });\n\n              case 5:\n                response = _context2.sent;\n                branch = response.data.createBranch; //////////////////////// GraphQL API ////////////////////////\n                //////////////////////// DataStore API ////////////////////////\n                // const branch = await DataStore.save(new Branch(newOrg));\n                //////////////////////// DataStore API ////////////////////////\n                // Dispatch - Reducer\n\n                dispatch(slice.actions.createBranch({\n                  branch: branch\n                }));\n                return _context2.abrupt(\"return\", branch);\n\n              case 9:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      function createBranch(_x3, _x4) {\n        return _createBranch2.apply(this, arguments);\n      }\n\n      return createBranch;\n    }()\n  }, {\n    key: \"updateBranch\",\n    value: function () {\n      var _updateBranch2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(editedBranch, dispatch) {\n        var response, branch;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.next = 2;\n                return API.graphql({\n                  query: _updateBranch,\n                  variables: {\n                    input: editedBranch\n                  },\n                  authMode: \"AMAZON_COGNITO_USER_POOLS\"\n                });\n\n              case 2:\n                response = _context3.sent;\n                branch = response.data.updateBranch; //////////////////////// GraphQL API ////////////////////////\n                // console.log(branch);\n                // Dispatch - Reducer\n\n                dispatch(slice.actions.updateBranch({\n                  branch: branch\n                }));\n                return _context3.abrupt(\"return\", response);\n\n              case 6:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      }));\n\n      function updateBranch(_x5, _x6) {\n        return _updateBranch2.apply(this, arguments);\n      }\n\n      return updateBranch;\n    }()\n  }]);\n\n  return BranchApi;\n}();\n\nexport var branchApi = new BranchApi();","map":{"version":3,"sources":["/Users/pulkitshah/Desktop/truckarv2/renderer/api/branch-api.js"],"names":["API","branchesByUser","createBranch","updateBranch","Branch","DataStore","Predicates","moment","slice","now","Date","BranchApi","user","dispatch","query","c","id","branches","actions","getBranches","console","log","newBranch","createdAt","toISOString","newOrg","graphql","variables","input","authMode","response","branch","data","editedBranch","branchApi"],"mappings":";;;;AAAA,SAASA,GAAT,QAAoB,aAApB;AACA,SAASC,cAAT,QAA+B,oBAA/B;AACA,SAASC,YAAY,IAAZA,aAAT,EAAuBC,YAAY,IAAZA,aAAvB,QAA2C,sBAA3C;AACA,SAASC,MAAT,QAAuB,WAAvB;AACA,SAASC,SAAT,EAAoBC,UAApB,QAAsC,wBAAtC;AACA,OAAOC,MAAP,MAAmB,QAAnB;AACA,SAASC,KAAT,QAAsB,oBAAtB;AAEA,IAAMC,GAAG,GAAG,IAAIC,IAAJ,EAAZ;;IAEMC,S;;;;;;;;yGACoBC,I,EAAMC,Q;;;;;;;;uBAcHR,SAAS,CAACS,KAAV,CAAgBV,MAAhB,EAAwB,UAACW,CAAD;AAAA,yBAC7CA,CAAC,CAACH,IAAF,CAAO,IAAP,EAAaA,IAAI,CAACI,EAAlB,CAD6C;AAAA,iBAAxB,C;;;AAAjBC,gBAAAA,Q;AAIN;AAEA;AAEA;AAEAJ,gBAAAA,QAAQ,CAACL,KAAK,CAACU,OAAN,CAAcC,WAAd,CAA0BF,QAA1B,CAAD,CAAR;iDAEOA,Q;;;;;AAEPG,gBAAAA,OAAO,CAACC,GAAR;;;;;;;;;;;;;;;;;;;sGAIeC,S,EAAWT,Q;;;;;;AACtBU,gBAAAA,S,GAAYhB,MAAM,GAAGiB,WAAT,E;AACdC,gBAAAA,M,GAASH,S;AACbG,gBAAAA,MAAM,CAACF,SAAP,GAAmBA,SAAnB,C,CAEA;;;uBAEuBvB,GAAG,CAAC0B,OAAJ,CAAY;AACjCZ,kBAAAA,KAAK,EAAEZ,aAD0B;AAEjCyB,kBAAAA,SAAS,EAAE;AAAEC,oBAAAA,KAAK,EAAEH;AAAT,mBAFsB;AAGjCI,kBAAAA,QAAQ,EAAE;AAHuB,iBAAZ,C;;;AAAjBC,gBAAAA,Q;AAMAC,gBAAAA,M,GAASD,QAAQ,CAACE,IAAT,CAAc9B,Y,EAE7B;AAEA;AAEA;AAEA;AAEA;;AAEAW,gBAAAA,QAAQ,CAACL,KAAK,CAACU,OAAN,CAAchB,YAAd,CAA2B;AAAE6B,kBAAAA,MAAM,EAANA;AAAF,iBAA3B,CAAD,CAAR;kDAEOA,M;;;;;;;;;;;;;;;;;;;sGAGUE,Y,EAAcpB,Q;;;;;;;uBAGRb,GAAG,CAAC0B,OAAJ,CAAY;AACjCZ,kBAAAA,KAAK,EAAEX,aAD0B;AAEjCwB,kBAAAA,SAAS,EAAE;AAAEC,oBAAAA,KAAK,EAAEK;AAAT,mBAFsB;AAGjCJ,kBAAAA,QAAQ,EAAE;AAHuB,iBAAZ,C;;;AAAjBC,gBAAAA,Q;AAMAC,gBAAAA,M,GAASD,QAAQ,CAACE,IAAT,CAAc7B,Y,EAE7B;AAEA;AAEA;;AAEAU,gBAAAA,QAAQ,CAACL,KAAK,CAACU,OAAN,CAAcf,YAAd,CAA2B;AAAE4B,kBAAAA,MAAM,EAANA;AAAF,iBAA3B,CAAD,CAAR;kDAEOD,Q;;;;;;;;;;;;;;;;;;;;;AAIX,OAAO,IAAMI,SAAS,GAAG,IAAIvB,SAAJ,EAAlB","sourcesContent":["import { API } from \"aws-amplify\";\nimport { branchesByUser } from \"../graphql/queries\";\nimport { createBranch, updateBranch } from \"../graphql/mutations\";\nimport { Branch } from \"../models\";\nimport { DataStore, Predicates } from \"@aws-amplify/datastore\";\nimport moment from \"moment\";\nimport { slice } from \"../slices/branches\";\n\nconst now = new Date();\n\nclass BranchApi {\n  async getBranchesByUser(user, dispatch) {\n    try {\n      //////////////////////// GraphQL API ////////////////////////\n\n      // const response = await API.graphql({\n      //   query: branchesByUser,\n      //   variables: { user: user.id.toString() },\n      // });\n      // const branches = response.data.branchesByUser.items\n\n      //////////////////////// GraphQL API ////////////////////////\n\n      //////////////////////// DataStore API ////////////////////////\n\n      const branches = await DataStore.query(Branch, (c) =>\n        c.user(\"eq\", user.id)\n      );\n\n      //////////////////////// DataStore API ////////////////////////\n\n      // console.log(branches);\n\n      // Dispatch - Reducer\n\n      dispatch(slice.actions.getBranches(branches));\n\n      return branches;\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  async createBranch(newBranch, dispatch) {\n    const createdAt = moment().toISOString();\n    let newOrg = newBranch;\n    newOrg.createdAt = createdAt;\n\n    //////////////////////// GraphQL API ////////////////////////\n\n    const response = await API.graphql({\n      query: createBranch,\n      variables: { input: newOrg },\n      authMode: \"AMAZON_COGNITO_USER_POOLS\",\n    });\n\n    const branch = response.data.createBranch;\n\n    //////////////////////// GraphQL API ////////////////////////\n\n    //////////////////////// DataStore API ////////////////////////\n\n    // const branch = await DataStore.save(new Branch(newOrg));\n\n    //////////////////////// DataStore API ////////////////////////\n\n    // Dispatch - Reducer\n\n    dispatch(slice.actions.createBranch({ branch }));\n\n    return branch;\n  }\n\n  async updateBranch(editedBranch, dispatch) {\n    //////////////////////// GraphQL API ////////////////////////\n\n    const response = await API.graphql({\n      query: updateBranch,\n      variables: { input: editedBranch },\n      authMode: \"AMAZON_COGNITO_USER_POOLS\",\n    });\n\n    const branch = response.data.updateBranch;\n\n    //////////////////////// GraphQL API ////////////////////////\n\n    // console.log(branch);\n\n    // Dispatch - Reducer\n\n    dispatch(slice.actions.updateBranch({ branch }));\n\n    return response;\n  }\n}\n\nexport const branchApi = new BranchApi();\n"]},"metadata":{},"sourceType":"module"}