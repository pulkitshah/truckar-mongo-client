{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/pulkitshah/Desktop/truckarv2/renderer/components/dashboard/welcome/stepper.js\";\nimport * as React from \"react\";\nimport NextLink from \"next/link\";\nimport { Box, Button, Card, CardActions, CardContent, Container, Divider, Grid, MenuItem, TextField, Typography, Stepper, Step, StepButton } from \"@mui/material\";\nimport { ArrowRight as ArrowRightIcon } from \"../../../icons/arrow-right\";\nimport { Briefcase as BriefcaseIcon } from \"../../../icons/briefcase\";\nimport { useTranslation } from \"react-i18next\";\nimport { BranchCreateForm } from \"../../../components/dashboard/welcome/branch-create-form\";\nconst steps = [\"Create a main branch\", \"Add team members\", \"Create vehicles\"];\nexport default function HorizontalNonLinearStepper() {\n  const [activeStep, setActiveStep] = React.useState(0);\n  const [completed, setCompleted] = React.useState({});\n  const {\n    t\n  } = useTranslation();\n\n  const totalSteps = () => {\n    return steps.length;\n  };\n\n  const completedSteps = () => {\n    return Object.keys(completed).length;\n  };\n\n  const isLastStep = () => {\n    return activeStep === totalSteps() - 1;\n  };\n\n  const allStepsCompleted = () => {\n    return completedSteps() === totalSteps();\n  };\n\n  const handleNext = () => {\n    const newActiveStep = isLastStep() && !allStepsCompleted() ? // It's the last step, but not all steps have been completed,\n    // find the first step that has been completed\n    steps.findIndex((step, i) => !(i in completed)) : activeStep + 1;\n    setActiveStep(newActiveStep);\n  };\n\n  const handleBack = () => {\n    setActiveStep(prevActiveStep => prevActiveStep - 1);\n  };\n\n  const handleStep = step => () => {\n    setActiveStep(step);\n  };\n\n  const handleComplete = () => {\n    const newCompleted = completed;\n    newCompleted[activeStep] = true;\n    setCompleted(newCompleted);\n    handleNext();\n  };\n\n  const handleReset = () => {\n    setActiveStep(0);\n    setCompleted({});\n  };\n\n  return /*#__PURE__*/_jsxDEV(Box, {\n    sx: {\n      width: \"100%\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(Stepper, {\n      nonLinear: true,\n      activeStep: activeStep,\n      children: steps.map((label, index) => /*#__PURE__*/_jsxDEV(Step, {\n        completed: completed[index],\n        children: /*#__PURE__*/_jsxDEV(StepButton, {\n          color: \"inherit\",\n          onClick: handleStep(index),\n          children: label\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 13\n        }, this)\n      }, label, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: allStepsCompleted() ? /*#__PURE__*/_jsxDEV(React.Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          sx: {\n            mt: 2,\n            mb: 1\n          },\n          children: \"All steps completed - you're finished\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Box, {\n          sx: {\n            display: \"flex\",\n            flexDirection: \"row\",\n            pt: 2\n          },\n          children: [/*#__PURE__*/_jsxDEV(Box, {\n            sx: {\n              flex: \"1 1 auto\"\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 95,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            onClick: handleReset,\n            children: \"Reset\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 96,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(React.Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          sx: {\n            mt: 2,\n            mb: 1\n          },\n          children: [\"Step \", activeStep + 1]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          children: [/*#__PURE__*/_jsxDEV(Box, {\n            sx: {\n              alignItems: \"center\",\n              display: \"flex\"\n            },\n            children: [/*#__PURE__*/_jsxDEV(BriefcaseIcon, {\n              color: \"primary\",\n              fontSize: \"small\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 110,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Typography, {\n              color: \"primary.main\",\n              sx: {\n                pl: 1\n              },\n              variant: \"subtitle2\",\n              children: t(\"Create a main branch.\")\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 111,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 104,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"h6\",\n            sx: {\n              mt: 2\n            },\n            children: t(\"Let us open your branch.\")\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 119,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(BranchCreateForm, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 122,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Divider, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 124,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Box, {\n          sx: {\n            display: \"flex\",\n            flexDirection: \"row\",\n            pt: 2\n          },\n          children: [/*#__PURE__*/_jsxDEV(Button, {\n            color: \"inherit\",\n            disabled: activeStep === 0,\n            onClick: handleBack,\n            sx: {\n              mr: 1\n            },\n            children: \"Back\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 138,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Box, {\n            sx: {\n              flex: \"1 1 auto\"\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 146,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            onClick: handleNext,\n            sx: {\n              mr: 1\n            },\n            children: \"Next\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 147,\n            columnNumber: 15\n          }, this), activeStep !== steps.length && (completed[activeStep] ? /*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"caption\",\n            sx: {\n              display: \"inline-block\"\n            },\n            children: [\"Step \", activeStep + 1, \" already completed\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 152,\n            columnNumber: 19\n          }, this) : /*#__PURE__*/_jsxDEV(Button, {\n            onClick: handleComplete,\n            children: completedSteps() === totalSteps() - 1 ? \"Finish\" : \"Complete Step\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 159,\n            columnNumber: 19\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 5\n  }, this);\n}","map":{"version":3,"sources":["/Users/pulkitshah/Desktop/truckarv2/renderer/components/dashboard/welcome/stepper.js"],"names":["React","NextLink","Box","Button","Card","CardActions","CardContent","Container","Divider","Grid","MenuItem","TextField","Typography","Stepper","Step","StepButton","ArrowRight","ArrowRightIcon","Briefcase","BriefcaseIcon","useTranslation","BranchCreateForm","steps","HorizontalNonLinearStepper","activeStep","setActiveStep","useState","completed","setCompleted","t","totalSteps","length","completedSteps","Object","keys","isLastStep","allStepsCompleted","handleNext","newActiveStep","findIndex","step","i","handleBack","prevActiveStep","handleStep","handleComplete","newCompleted","handleReset","width","map","label","index","mt","mb","display","flexDirection","pt","flex","alignItems","pl","mr"],"mappings":"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","sourcesContent":["import * as React from \"react\";\nimport NextLink from \"next/link\";\nimport {\n  Box,\n  Button,\n  Card,\n  CardActions,\n  CardContent,\n  Container,\n  Divider,\n  Grid,\n  MenuItem,\n  TextField,\n  Typography,\n  Stepper,\n  Step,\n  StepButton,\n} from \"@mui/material\";\nimport { ArrowRight as ArrowRightIcon } from \"../../../icons/arrow-right\";\nimport { Briefcase as BriefcaseIcon } from \"../../../icons/briefcase\";\nimport { useTranslation } from \"react-i18next\";\nimport { BranchCreateForm } from \"../../../components/dashboard/welcome/branch-create-form\";\n\nconst steps = [\"Create a main branch\", \"Add team members\", \"Create vehicles\"];\n\nexport default function HorizontalNonLinearStepper() {\n  const [activeStep, setActiveStep] = React.useState(0);\n  const [completed, setCompleted] = React.useState({});\n  const { t } = useTranslation();\n\n  const totalSteps = () => {\n    return steps.length;\n  };\n\n  const completedSteps = () => {\n    return Object.keys(completed).length;\n  };\n\n  const isLastStep = () => {\n    return activeStep === totalSteps() - 1;\n  };\n\n  const allStepsCompleted = () => {\n    return completedSteps() === totalSteps();\n  };\n\n  const handleNext = () => {\n    const newActiveStep =\n      isLastStep() && !allStepsCompleted()\n        ? // It's the last step, but not all steps have been completed,\n          // find the first step that has been completed\n          steps.findIndex((step, i) => !(i in completed))\n        : activeStep + 1;\n    setActiveStep(newActiveStep);\n  };\n\n  const handleBack = () => {\n    setActiveStep((prevActiveStep) => prevActiveStep - 1);\n  };\n\n  const handleStep = (step) => () => {\n    setActiveStep(step);\n  };\n\n  const handleComplete = () => {\n    const newCompleted = completed;\n    newCompleted[activeStep] = true;\n    setCompleted(newCompleted);\n    handleNext();\n  };\n\n  const handleReset = () => {\n    setActiveStep(0);\n    setCompleted({});\n  };\n\n  return (\n    <Box sx={{ width: \"100%\" }}>\n      <Stepper nonLinear activeStep={activeStep}>\n        {steps.map((label, index) => (\n          <Step key={label} completed={completed[index]}>\n            <StepButton color=\"inherit\" onClick={handleStep(index)}>\n              {label}\n            </StepButton>\n          </Step>\n        ))}\n      </Stepper>\n      <div>\n        {allStepsCompleted() ? (\n          <React.Fragment>\n            <Typography sx={{ mt: 2, mb: 1 }}>\n              All steps completed - you&apos;re finished\n            </Typography>\n            <Box sx={{ display: \"flex\", flexDirection: \"row\", pt: 2 }}>\n              <Box sx={{ flex: \"1 1 auto\" }} />\n              <Button onClick={handleReset}>Reset</Button>\n            </Box>\n          </React.Fragment>\n        ) : (\n          <React.Fragment>\n            <Typography sx={{ mt: 2, mb: 1 }}>Step {activeStep + 1}</Typography>\n\n            <Grid item xs={12}>\n              <Box\n                sx={{\n                  alignItems: \"center\",\n                  display: \"flex\",\n                }}\n              >\n                <BriefcaseIcon color=\"primary\" fontSize=\"small\" />\n                <Typography\n                  color=\"primary.main\"\n                  sx={{ pl: 1 }}\n                  variant=\"subtitle2\"\n                >\n                  {t(\"Create a main branch.\")}\n                </Typography>\n              </Box>\n              <Typography variant=\"h6\" sx={{ mt: 2 }}>\n                {t(\"Let us open your branch.\")}\n              </Typography>\n              <BranchCreateForm />\n              {/* </CardContent> */}\n              <Divider />\n              {/* <CardActions>\n                  <NextLink href=\"/dashboard/welcome/team/add-branch\" passHref>\n                    <Button\n                      endIcon={<ArrowRightIcon fontSize=\"small\" />}\n                      size=\"small\"\n                    >\n                      Add Employees\n                    </Button>\n                  </NextLink>\n                </CardActions>\n              </Card> */}\n            </Grid>\n            <Box sx={{ display: \"flex\", flexDirection: \"row\", pt: 2 }}>\n              <Button\n                color=\"inherit\"\n                disabled={activeStep === 0}\n                onClick={handleBack}\n                sx={{ mr: 1 }}\n              >\n                Back\n              </Button>\n              <Box sx={{ flex: \"1 1 auto\" }} />\n              <Button onClick={handleNext} sx={{ mr: 1 }}>\n                Next\n              </Button>\n              {activeStep !== steps.length &&\n                (completed[activeStep] ? (\n                  <Typography\n                    variant=\"caption\"\n                    sx={{ display: \"inline-block\" }}\n                  >\n                    Step {activeStep + 1} already completed\n                  </Typography>\n                ) : (\n                  <Button onClick={handleComplete}>\n                    {completedSteps() === totalSteps() - 1\n                      ? \"Finish\"\n                      : \"Complete Step\"}\n                  </Button>\n                ))}\n            </Box>\n          </React.Fragment>\n        )}\n      </div>\n    </Box>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}