{"ast":null,"code":"import _slicedToArray from \"/Users/pulkitshah/Desktop/truckarv2/node_modules/next/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/pulkitshah/Desktop/truckarv2/renderer/components/dashboard/welcome/stepper.js\",\n    _s = $RefreshSig$();\n\nimport * as React from \"react\";\nimport Box from \"@mui/material/Box\";\nimport Stepper from \"@mui/material/Stepper\";\nimport Step from \"@mui/material/Step\";\nimport StepButton from \"@mui/material/StepButton\";\nimport Button from \"@mui/material/Button\";\nimport Typography from \"@mui/material/Typography\";\nvar steps = [\"Create a main branch\", \"Add team members\", \"Create vehicles\"];\nexport default function HorizontalNonLinearStepper() {\n  _s();\n\n  var _this = this;\n\n  var _React$useState = React.useState(0),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      activeStep = _React$useState2[0],\n      setActiveStep = _React$useState2[1];\n\n  var _React$useState3 = React.useState({}),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      completed = _React$useState4[0],\n      setCompleted = _React$useState4[1];\n\n  var totalSteps = function totalSteps() {\n    return steps.length;\n  };\n\n  var completedSteps = function completedSteps() {\n    return Object.keys(completed).length;\n  };\n\n  var isLastStep = function isLastStep() {\n    return activeStep === totalSteps() - 1;\n  };\n\n  var allStepsCompleted = function allStepsCompleted() {\n    return completedSteps() === totalSteps();\n  };\n\n  var handleNext = function handleNext() {\n    var newActiveStep = isLastStep() && !allStepsCompleted() ? // It's the last step, but not all steps have been completed,\n    // find the first step that has been completed\n    steps.findIndex(function (step, i) {\n      return !(i in completed);\n    }) : activeStep + 1;\n    setActiveStep(newActiveStep);\n  };\n\n  var handleBack = function handleBack() {\n    setActiveStep(function (prevActiveStep) {\n      return prevActiveStep - 1;\n    });\n  };\n\n  var handleStep = function handleStep(step) {\n    return function () {\n      setActiveStep(step);\n    };\n  };\n\n  var handleComplete = function handleComplete() {\n    var newCompleted = completed;\n    newCompleted[activeStep] = true;\n    setCompleted(newCompleted);\n    handleNext();\n  };\n\n  var handleReset = function handleReset() {\n    setActiveStep(0);\n    setCompleted({});\n  };\n\n  return /*#__PURE__*/_jsxDEV(Box, {\n    sx: {\n      width: \"100%\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(Stepper, {\n      nonLinear: true,\n      activeStep: activeStep,\n      children: steps.map(function (label, index) {\n        return /*#__PURE__*/_jsxDEV(Step, {\n          completed: completed[index],\n          children: /*#__PURE__*/_jsxDEV(StepButton, {\n            color: \"inherit\",\n            onClick: handleStep(index),\n            children: label\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 66,\n            columnNumber: 13\n          }, _this)\n        }, label, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 11\n        }, _this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: allStepsCompleted() ? /*#__PURE__*/_jsxDEV(React.Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          sx: {\n            mt: 2,\n            mb: 1\n          },\n          children: \"All steps completed - you're finished\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Box, {\n          sx: {\n            display: \"flex\",\n            flexDirection: \"row\",\n            pt: 2\n          },\n          children: [/*#__PURE__*/_jsxDEV(Box, {\n            sx: {\n              flex: \"1 1 auto\"\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 79,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            onClick: handleReset,\n            children: \"Reset\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 80,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(React.Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          sx: {\n            mt: 2,\n            mb: 1\n          },\n          children: [\"Step \", activeStep + 1]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Box, {\n          sx: {\n            display: \"flex\",\n            flexDirection: \"row\",\n            pt: 2\n          },\n          children: [/*#__PURE__*/_jsxDEV(Button, {\n            color: \"inherit\",\n            disabled: activeStep === 0,\n            onClick: handleBack,\n            sx: {\n              mr: 1\n            },\n            children: \"Back\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 87,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Box, {\n            sx: {\n              flex: \"1 1 auto\"\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 95,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            onClick: handleNext,\n            sx: {\n              mr: 1\n            },\n            children: \"Next\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 96,\n            columnNumber: 15\n          }, this), activeStep !== steps.length && (completed[activeStep] ? /*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"caption\",\n            sx: {\n              display: \"inline-block\"\n            },\n            children: [\"Step \", activeStep + 1, \" already completed\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 101,\n            columnNumber: 19\n          }, this) : /*#__PURE__*/_jsxDEV(Button, {\n            onClick: handleComplete,\n            children: completedSteps() === totalSteps() - 1 ? \"Finish\" : \"Complete Step\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 108,\n            columnNumber: 19\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 5\n  }, this);\n}\n\n_s(HorizontalNonLinearStepper, \"ScfQtMjocTEEPsQJA4wuJiaPwNA=\");\n\n_c = HorizontalNonLinearStepper;\n\nvar _c;\n\n$RefreshReg$(_c, \"HorizontalNonLinearStepper\");","map":{"version":3,"sources":["/Users/pulkitshah/Desktop/truckarv2/renderer/components/dashboard/welcome/stepper.js"],"names":["React","Box","Stepper","Step","StepButton","Button","Typography","steps","HorizontalNonLinearStepper","useState","activeStep","setActiveStep","completed","setCompleted","totalSteps","length","completedSteps","Object","keys","isLastStep","allStepsCompleted","handleNext","newActiveStep","findIndex","step","i","handleBack","prevActiveStep","handleStep","handleComplete","newCompleted","handleReset","width","map","label","index","mt","mb","display","flexDirection","pt","flex","mr"],"mappings":"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","sourcesContent":["import * as React from \"react\";\nimport Box from \"@mui/material/Box\";\nimport Stepper from \"@mui/material/Stepper\";\nimport Step from \"@mui/material/Step\";\nimport StepButton from \"@mui/material/StepButton\";\nimport Button from \"@mui/material/Button\";\nimport Typography from \"@mui/material/Typography\";\n\nconst steps = [\"Create a main branch\", \"Add team members\", \"Create vehicles\"];\n\nexport default function HorizontalNonLinearStepper() {\n  const [activeStep, setActiveStep] = React.useState(0);\n  const [completed, setCompleted] = React.useState({});\n\n  const totalSteps = () => {\n    return steps.length;\n  };\n\n  const completedSteps = () => {\n    return Object.keys(completed).length;\n  };\n\n  const isLastStep = () => {\n    return activeStep === totalSteps() - 1;\n  };\n\n  const allStepsCompleted = () => {\n    return completedSteps() === totalSteps();\n  };\n\n  const handleNext = () => {\n    const newActiveStep =\n      isLastStep() && !allStepsCompleted()\n        ? // It's the last step, but not all steps have been completed,\n          // find the first step that has been completed\n          steps.findIndex((step, i) => !(i in completed))\n        : activeStep + 1;\n    setActiveStep(newActiveStep);\n  };\n\n  const handleBack = () => {\n    setActiveStep((prevActiveStep) => prevActiveStep - 1);\n  };\n\n  const handleStep = (step) => () => {\n    setActiveStep(step);\n  };\n\n  const handleComplete = () => {\n    const newCompleted = completed;\n    newCompleted[activeStep] = true;\n    setCompleted(newCompleted);\n    handleNext();\n  };\n\n  const handleReset = () => {\n    setActiveStep(0);\n    setCompleted({});\n  };\n\n  return (\n    <Box sx={{ width: \"100%\" }}>\n      <Stepper nonLinear activeStep={activeStep}>\n        {steps.map((label, index) => (\n          <Step key={label} completed={completed[index]}>\n            <StepButton color=\"inherit\" onClick={handleStep(index)}>\n              {label}\n            </StepButton>\n          </Step>\n        ))}\n      </Stepper>\n      <div>\n        {allStepsCompleted() ? (\n          <React.Fragment>\n            <Typography sx={{ mt: 2, mb: 1 }}>\n              All steps completed - you&apos;re finished\n            </Typography>\n            <Box sx={{ display: \"flex\", flexDirection: \"row\", pt: 2 }}>\n              <Box sx={{ flex: \"1 1 auto\" }} />\n              <Button onClick={handleReset}>Reset</Button>\n            </Box>\n          </React.Fragment>\n        ) : (\n          <React.Fragment>\n            <Typography sx={{ mt: 2, mb: 1 }}>Step {activeStep + 1}</Typography>\n            <Box sx={{ display: \"flex\", flexDirection: \"row\", pt: 2 }}>\n              <Button\n                color=\"inherit\"\n                disabled={activeStep === 0}\n                onClick={handleBack}\n                sx={{ mr: 1 }}\n              >\n                Back\n              </Button>\n              <Box sx={{ flex: \"1 1 auto\" }} />\n              <Button onClick={handleNext} sx={{ mr: 1 }}>\n                Next\n              </Button>\n              {activeStep !== steps.length &&\n                (completed[activeStep] ? (\n                  <Typography\n                    variant=\"caption\"\n                    sx={{ display: \"inline-block\" }}\n                  >\n                    Step {activeStep + 1} already completed\n                  </Typography>\n                ) : (\n                  <Button onClick={handleComplete}>\n                    {completedSteps() === totalSteps() - 1\n                      ? \"Finish\"\n                      : \"Complete Step\"}\n                  </Button>\n                ))}\n            </Box>\n          </React.Fragment>\n        )}\n      </div>\n    </Box>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}