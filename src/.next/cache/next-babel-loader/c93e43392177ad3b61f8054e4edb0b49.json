{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/pulkitshah/Desktop/truckarv2/renderer/components/dashboard/autocompletes/party-autocomplete/party-addnew-autocomplete.js\";\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* eslint-disable no-use-before-define */\nimport React, { useState, useEffect, useCallback } from \"react\";\nimport { Formik } from \"formik\";\nimport toast from \"react-hot-toast\";\nimport { v4 as uuid } from \"uuid\";\nimport * as Yup from \"yup\";\nimport { Box, Button, Card, CardContent, Dialog, DialogTitle, Grid, Switch, TextField, Typography } from \"@mui/material\";\nimport GooglePlaces from \"./google-places-autocomplete\";\nimport { partyApi } from \"../../../../api/party-api\";\nimport { useDispatch } from \"../../../../store\";\n\nconst AddNewPartyFromAutocomplete = (_ref) => {\n  let {\n    open,\n    dialogValue,\n    setDialogValue,\n    setFieldValue,\n    toggleOpen,\n    type,\n    user\n  } = _ref,\n      rest = _objectWithoutProperties(_ref, [\"open\", \"dialogValue\", \"setDialogValue\", \"setFieldValue\", \"toggleOpen\", \"type\", \"user\"]);\n\n  const dispatch = useDispatch();\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Dialog, {\n      open: open,\n      onClose: () => toggleOpen(false),\n      \"aria-labelledby\": \"form-dialog-name\",\n      children: [/*#__PURE__*/_jsxDEV(DialogTitle, {\n        id: \"form-dialog-name\",\n        children: \"Add a new party\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Formik, {\n        initialValues: {\n          name: dialogValue.name || \"\",\n          mobile: dialogValue.mobile || \"\",\n          city: dialogValue.location || \"\",\n          isTransporter: dialogValue.isTransporter || false,\n          submit: null\n        },\n        validationSchema: YYup.object().shape({\n          name: Yup.string().max(255).required(\"Name is required\").test(\"Unique Name\", \"A party already exists with this name\", // <- key, message\n          async function (value) {\n            try {\n              const response = await partyApi.validateDuplicateName(value, user);\n              return response;\n            } catch (error) {}\n          }),\n          mobile: Yup.string().matches(/^[6-9]\\d{9}$/, \"Mobile is not valid\").required(\"Mobile is required\").test(\"Unique Mobile\", \"Mobile already in use\", // <- key, message\n          async function (value) {\n            try {\n              const response = await partyApi.validateDuplicateMobile(value, user);\n              return response;\n            } catch (error) {}\n          })\n        }),\n        onSubmit: async (values, {\n          setErrors,\n          setStatus,\n          setSubmitting\n        }) => {\n          try {\n            const newParty = {\n              id: uuid(),\n              name: values.name,\n              mobile: values.mobile,\n              city: JSON.stringify(values.city),\n              user: user.id,\n              isTransporter: values.isTransporter\n            };\n            const response = await partyApi.createParty(newParty, dispatch);\n            toast.success(\"Party created!\");\n            setFieldValue(type, response);\n            toggleOpen(false);\n          } catch (err) {\n            console.log(err);\n            setStatus({\n              success: false\n            });\n            setErrors({\n              submit: err.message\n            });\n            setSubmitting(false);\n          }\n        },\n        children: ({\n          errors,\n          handleBlur,\n          handleChange,\n          handleSubmit,\n          isSubmitting,\n          setFieldValue,\n          touched,\n          values\n        }) => /*#__PURE__*/_jsxDEV(\"form\", {\n          onSubmit: handleSubmit,\n          children: /*#__PURE__*/_jsxDEV(Card, {\n            children: /*#__PURE__*/_jsxDEV(CardContent, {\n              children: [/*#__PURE__*/_jsxDEV(Grid, {\n                container: true,\n                spacing: 3,\n                children: [/*#__PURE__*/_jsxDEV(Grid, {\n                  item: true,\n                  xs: 12,\n                  children: /*#__PURE__*/_jsxDEV(TextField, {\n                    error: Boolean(touched.name && errors.name),\n                    fullWidth: true,\n                    helperText: touched.name && errors.name,\n                    label: \"Main Contact Name\",\n                    name: \"name\",\n                    onBlur: handleBlur,\n                    onChange: event => {\n                      setFieldValue(\"name\", event.target.value.replace(/\\w\\S*/g, function (txt) {\n                        return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();\n                      }));\n                    },\n                    required: true,\n                    value: values.name,\n                    variant: \"outlined\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 122,\n                    columnNumber: 23\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 121,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(Grid, {\n                  item: true,\n                  xs: 12,\n                  children: /*#__PURE__*/_jsxDEV(TextField, {\n                    error: Boolean(touched.mobile && errors.mobile),\n                    fullWidth: true,\n                    helperText: touched.mobile && errors.mobile,\n                    label: \"Mobile\",\n                    name: \"mobile\",\n                    onBlur: handleBlur,\n                    onChange: event => {\n                      setFieldValue(\"mobile\", event.target.value.replace(/ /g, \"\"));\n                    },\n                    value: values.mobile,\n                    variant: \"outlined\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 149,\n                    columnNumber: 23\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 148,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(Grid, {\n                  item: true,\n                  xs: 12,\n                  children: /*#__PURE__*/_jsxDEV(GooglePlaces, {\n                    error: Boolean(touched.mobile && errors.mobile),\n                    name: \"City\",\n                    field: \"city\",\n                    setFieldValue: setFieldValue,\n                    handleBlur: handleBlur,\n                    values: values\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 167,\n                    columnNumber: 23\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 166,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(Grid, {\n                  item: true,\n                  xs: 12,\n                  children: [/*#__PURE__*/_jsxDEV(Typography, {\n                    variant: \"h5\",\n                    color: \"textPrimary\",\n                    children: \"Party Type\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 177,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                    variant: \"body2\",\n                    color: \"textSecondary\",\n                    children: \"Is this party a transporter?\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 180,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(Switch, {\n                    checked: values.isTransporter,\n                    color: \"secondary\",\n                    edge: \"start\",\n                    name: \"isTransporter\",\n                    onChange: handleChange,\n                    value: values.isTransporter\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 183,\n                    columnNumber: 23\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 176,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 120,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(Box, {\n                mt: 2,\n                children: /*#__PURE__*/_jsxDEV(Grid, {\n                  container: true,\n                  spacing: 3,\n                  children: [/*#__PURE__*/_jsxDEV(Grid, {\n                    item: true,\n                    children: /*#__PURE__*/_jsxDEV(Button, {\n                      variant: \"contained\",\n                      color: \"secondary\",\n                      type: \"submit\",\n                      disabled: isSubmitting,\n                      children: \"Create Party\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 196,\n                      columnNumber: 25\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 195,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(Grid, {\n                    item: true,\n                    children: /*#__PURE__*/_jsxDEV(Button, {\n                      variant: \"contained\",\n                      color: \"secondary\",\n                      onClick: () => toggleOpen(false),\n                      children: \"Cancel\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 206,\n                      columnNumber: 25\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 205,\n                    columnNumber: 23\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 194,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 193,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 119,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 118,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 5\n  }, this);\n};\n\nexport default AddNewPartyFromAutocomplete;","map":{"version":3,"sources":["/Users/pulkitshah/Desktop/truckarv2/renderer/components/dashboard/autocompletes/party-autocomplete/party-addnew-autocomplete.js"],"names":["React","useState","useEffect","useCallback","Formik","toast","v4","uuid","Yup","Box","Button","Card","CardContent","Dialog","DialogTitle","Grid","Switch","TextField","Typography","GooglePlaces","partyApi","useDispatch","AddNewPartyFromAutocomplete","open","dialogValue","setDialogValue","setFieldValue","toggleOpen","type","user","rest","dispatch","name","mobile","city","location","isTransporter","submit","YYup","object","shape","string","max","required","test","value","response","validateDuplicateName","error","matches","validateDuplicateMobile","values","setErrors","setStatus","setSubmitting","newParty","id","JSON","stringify","createParty","success","err","console","log","message","errors","handleBlur","handleChange","handleSubmit","isSubmitting","touched","Boolean","event","target","replace","txt","charAt","toUpperCase","substr","toLowerCase"],"mappings":"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","sourcesContent":["/* eslint-disable no-use-before-define */\nimport React, { useState, useEffect, useCallback } from \"react\";\nimport { Formik } from \"formik\";\nimport toast from \"react-hot-toast\";\nimport { v4 as uuid } from \"uuid\";\nimport * as Yup from \"yup\";\n\nimport {\n  Box,\n  Button,\n  Card,\n  CardContent,\n  Dialog,\n  DialogTitle,\n  Grid,\n  Switch,\n  TextField,\n  Typography,\n} from \"@mui/material\";\nimport GooglePlaces from \"./google-places-autocomplete\";\nimport { partyApi } from \"../../../../api/party-api\";\nimport { useDispatch } from \"../../../../store\";\nconst AddNewPartyFromAutocomplete = ({\n  open,\n  dialogValue,\n  setDialogValue,\n  setFieldValue,\n  toggleOpen,\n  type,\n  user,\n  ...rest\n}) => {\n  const dispatch = useDispatch();\n\n  return (\n    <React.Fragment>\n      <Dialog\n        open={open}\n        onClose={() => toggleOpen(false)}\n        aria-labelledby=\"form-dialog-name\"\n      >\n        <DialogTitle id=\"form-dialog-name\">Add a new party</DialogTitle>\n        <Formik\n          initialValues={{\n            name: dialogValue.name || \"\",\n            mobile: dialogValue.mobile || \"\",\n            city: dialogValue.location || \"\",\n            isTransporter: dialogValue.isTransporter || false,\n            submit: null,\n          }}\n          validationSchema={YYup.object().shape({\n            name: Yup.string()\n              .max(255)\n              .required(\"Name is required\")\n              .test(\n                \"Unique Name\",\n                \"A party already exists with this name\", // <- key, message\n                async function (value) {\n                  try {\n                    const response = await partyApi.validateDuplicateName(\n                      value,\n                      user\n                    );\n                    return response;\n                  } catch (error) {}\n                }\n              ),\n            mobile: Yup.string()\n              .matches(/^[6-9]\\d{9}$/, \"Mobile is not valid\")\n              .required(\"Mobile is required\")\n              .test(\n                \"Unique Mobile\",\n                \"Mobile already in use\", // <- key, message\n                async function (value) {\n                  try {\n                    const response = await partyApi.validateDuplicateMobile(\n                      value,\n                      user\n                    );\n                    return response;\n                  } catch (error) {}\n                }\n              ),\n          })}\n          onSubmit={async (values, { setErrors, setStatus, setSubmitting }) => {\n            try {\n              const newParty = {\n                id: uuid(),\n                name: values.name,\n                mobile: values.mobile,\n                city: JSON.stringify(values.city),\n                user: user.id,\n                isTransporter: values.isTransporter,\n              };\n              const response = await partyApi.createParty(newParty, dispatch);\n              toast.success(\"Party created!\");\n              setFieldValue(type, response);\n              toggleOpen(false);\n            } catch (err) {\n              console.log(err);\n              setStatus({ success: false });\n              setErrors({ submit: err.message });\n              setSubmitting(false);\n            }\n          }}\n        >\n          {({\n            errors,\n            handleBlur,\n            handleChange,\n            handleSubmit,\n            isSubmitting,\n            setFieldValue,\n            touched,\n            values,\n          }) => (\n            <form onSubmit={handleSubmit}>\n              <Card>\n                <CardContent>\n                  <Grid container spacing={3}>\n                    <Grid item xs={12}>\n                      <TextField\n                        error={Boolean(touched.name && errors.name)}\n                        fullWidth\n                        helperText={touched.name && errors.name}\n                        label=\"Main Contact Name\"\n                        name=\"name\"\n                        onBlur={handleBlur}\n                        onChange={(event) => {\n                          setFieldValue(\n                            \"name\",\n                            event.target.value.replace(\n                              /\\w\\S*/g,\n                              function (txt) {\n                                return (\n                                  txt.charAt(0).toUpperCase() +\n                                  txt.substr(1).toLowerCase()\n                                );\n                              }\n                            )\n                          );\n                        }}\n                        required\n                        value={values.name}\n                        variant=\"outlined\"\n                      />\n                    </Grid>\n                    <Grid item xs={12}>\n                      <TextField\n                        error={Boolean(touched.mobile && errors.mobile)}\n                        fullWidth\n                        helperText={touched.mobile && errors.mobile}\n                        label=\"Mobile\"\n                        name=\"mobile\"\n                        onBlur={handleBlur}\n                        onChange={(event) => {\n                          setFieldValue(\n                            \"mobile\",\n                            event.target.value.replace(/ /g, \"\")\n                          );\n                        }}\n                        value={values.mobile}\n                        variant=\"outlined\"\n                      />\n                    </Grid>\n                    <Grid item xs={12}>\n                      <GooglePlaces\n                        error={Boolean(touched.mobile && errors.mobile)}\n                        name={\"City\"}\n                        field={\"city\"}\n                        setFieldValue={setFieldValue}\n                        handleBlur={handleBlur}\n                        values={values}\n                      />\n                    </Grid>\n                    <Grid item xs={12}>\n                      <Typography variant=\"h5\" color=\"textPrimary\">\n                        Party Type\n                      </Typography>\n                      <Typography variant=\"body2\" color=\"textSecondary\">\n                        Is this party a transporter?\n                      </Typography>\n                      <Switch\n                        checked={values.isTransporter}\n                        color=\"secondary\"\n                        edge=\"start\"\n                        name=\"isTransporter\"\n                        onChange={handleChange}\n                        value={values.isTransporter}\n                      />\n                    </Grid>\n                  </Grid>\n                  <Box mt={2}>\n                    <Grid container spacing={3}>\n                      <Grid item>\n                        <Button\n                          variant=\"contained\"\n                          color=\"secondary\"\n                          type=\"submit\"\n                          disabled={isSubmitting}\n                        >\n                          Create Party\n                        </Button>\n                      </Grid>\n                      <Grid item>\n                        <Button\n                          variant=\"contained\"\n                          color=\"secondary\"\n                          onClick={() => toggleOpen(false)}\n                        >\n                          Cancel\n                        </Button>\n                      </Grid>\n                    </Grid>\n                  </Box>\n                </CardContent>\n              </Card>\n            </form>\n          )}\n        </Formik>\n      </Dialog>\n    </React.Fragment>\n  );\n};\nexport default AddNewPartyFromAutocomplete;\n"]},"metadata":{},"sourceType":"module"}