{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/pulkitshah/Desktop/truckarv2/renderer/components/authentication/amplify-password-recovery.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { useRouter } from 'next/router';\nimport * as Yup from 'yup';\nimport { useFormik } from 'formik';\nimport { Box, Button, FormHelperText, TextField } from '@mui/material';\nimport { useAuth } from '../../hooks/use-auth';\nimport { useMounted } from '../../hooks/use-mounted';\nexport const AmplifyPasswordRecovery = props => {\n  const isMounted = useMounted();\n  const {\n    passwordRecovery\n  } = useAuth();\n  const router = useRouter();\n  const formik = useFormik({\n    initialValues: {\n      email: '',\n      submit: null\n    },\n    validationSchema: Yup.object({\n      email: Yup.string().email('Must be a valid email').max(255).required('Email is required')\n    }),\n    onSubmit: async (values, helpers) => {\n      try {\n        await passwordRecovery(values.email);\n\n        if (isMounted()) {\n          sessionStorage.setItem('username', values.email);\n          router.push('/authentication/password-reset');\n        }\n      } catch (err) {\n        console.error(err);\n\n        if (isMounted()) {\n          helpers.setStatus({\n            success: false\n          });\n          helpers.setErrors({\n            submit: err.message\n          });\n          helpers.setSubmitting(false);\n        }\n      }\n    }\n  });\n  return /*#__PURE__*/_jsxDEV(\"form\", _objectSpread(_objectSpread({\n    noValidate: true,\n    onSubmit: formik.handleSubmit\n  }, props), {}, {\n    children: [/*#__PURE__*/_jsxDEV(TextField, {\n      autoFocus: true,\n      error: Boolean(formik.touched.email && formik.errors.email),\n      fullWidth: true,\n      helperText: formik.touched.email && formik.errors.email,\n      label: \"Email Address\",\n      margin: \"normal\",\n      name: \"email\",\n      onBlur: formik.handleBlur,\n      onChange: formik.handleChange,\n      type: \"email\",\n      value: formik.values.email\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this), formik.errors.submit && /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        mt: 3\n      },\n      children: /*#__PURE__*/_jsxDEV(FormHelperText, {\n        error: true,\n        children: formik.errors.submit\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        mt: 3\n      },\n      children: /*#__PURE__*/_jsxDEV(Button, {\n        disabled: formik.isSubmitting,\n        fullWidth: true,\n        size: \"large\",\n        type: \"submit\",\n        variant: \"contained\",\n        children: \"Recover Password\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this)]\n  }), void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 5\n  }, this);\n};","map":{"version":3,"sources":["/Users/pulkitshah/Desktop/truckarv2/renderer/components/authentication/amplify-password-recovery.js"],"names":["useRouter","Yup","useFormik","Box","Button","FormHelperText","TextField","useAuth","useMounted","AmplifyPasswordRecovery","props","isMounted","passwordRecovery","router","formik","initialValues","email","submit","validationSchema","object","string","max","required","onSubmit","values","helpers","sessionStorage","setItem","push","err","console","error","setStatus","success","setErrors","message","setSubmitting","handleSubmit","Boolean","touched","errors","handleBlur","handleChange","mt","isSubmitting"],"mappings":"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","sourcesContent":["import { useRouter } from 'next/router';\nimport * as Yup from 'yup';\nimport { useFormik } from 'formik';\nimport { Box, Button, FormHelperText, TextField } from '@mui/material';\nimport { useAuth } from '../../hooks/use-auth';\nimport { useMounted } from '../../hooks/use-mounted';\n\nexport const AmplifyPasswordRecovery = (props) => {\n  const isMounted = useMounted();\n  const { passwordRecovery } = useAuth();\n  const router = useRouter();\n  const formik = useFormik({\n    initialValues: {\n      email: '',\n      submit: null\n    },\n    validationSchema: Yup.object({\n      email: Yup\n        .string()\n        .email('Must be a valid email')\n        .max(255)\n        .required('Email is required')\n    }),\n    onSubmit: async (values, helpers) => {\n      try {\n        await passwordRecovery(values.email);\n\n        if (isMounted()) {\n          sessionStorage.setItem('username', values.email);\n          router.push('/authentication/password-reset');\n        }\n      } catch (err) {\n        console.error(err);\n\n        if (isMounted()) {\n          helpers.setStatus({ success: false });\n          helpers.setErrors({ submit: err.message });\n          helpers.setSubmitting(false);\n        }\n      }\n    }\n  });\n\n  return (\n    <form\n      noValidate\n      onSubmit={formik.handleSubmit}\n      {...props}>\n      <TextField\n        autoFocus\n        error={Boolean(formik.touched.email && formik.errors.email)}\n        fullWidth\n        helperText={formik.touched.email && formik.errors.email}\n        label=\"Email Address\"\n        margin=\"normal\"\n        name=\"email\"\n        onBlur={formik.handleBlur}\n        onChange={formik.handleChange}\n        type=\"email\"\n        value={formik.values.email}\n      />\n      {formik.errors.submit && (\n        <Box sx={{ mt: 3 }}>\n          <FormHelperText error>\n            {formik.errors.submit}\n          </FormHelperText>\n        </Box>\n      )}\n      <Box sx={{ mt: 3 }}>\n        <Button\n          disabled={formik.isSubmitting}\n          fullWidth\n          size=\"large\"\n          type=\"submit\"\n          variant=\"contained\"\n        >\n          Recover Password\n        </Button>\n      </Box>\n    </form>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}