{"ast":null,"code":"import { nanoid } from \"nanoid\";\nimport axios from \"../utils/axios\"; // var electron = require('electron');\n\nimport electron from \"electron\";\nconst ipcRenderer = electron.ipcRenderer || false;\n\nfunction waitForEvent(emitter, channel) {\n  // https://www.derpturkey.com/event-emitter-to-promise/\n  return new Promise(resolve => {\n    emitter.once(channel, (event, data) => {\n      resolve(data);\n    });\n  });\n}\n\nexport const fetchApiResult = !ipcRenderer ? async (url, method, payload) => {\n  try {\n    const response = await axios[method](`http://localhost:3001${url}`, payload);\n    return response;\n  } catch (error) {\n    if (error.error) {\n      // The request was made and the server responded with a status code\n      // that falls out of the range of 2xx\n      console.log(error.error);\n      throw new Error(error.error);\n    } else if (error.request) {\n      // The request was made but no response was received\n      // `error.request` is an instance of XMLHttpRequest in the browser and an instance of\n      // http.ClientRequest in node.js\n      console.log(error.request);\n      throw new Error(\"Check Internet Connection\");\n    } else {\n      // Something happened in setting up the request that triggered an Error\n      console.log(\"Error\", error);\n      throw new Error(\"Something went wrong. Please contact Customer Support.\");\n    }\n  }\n} : async (url, method, payload) => {\n  const id = nanoid();\n  console.log(\"electron\");\n  console.log(electron);\n\n  try {\n    const response = await axios[method](`http://localhost:3001${url}`, payload);\n    return response;\n  } catch (error) {\n    if (error.response) {// The request was made and the server responded with a status code\n      // that falls out of the range of 2xx\n      // throw new Error(error.response.data.error);\n    } else if (error.request) {\n      // The request was made but no response was received\n      // `error.request` is an instance of XMLHttpRequest in the browser and an instance of\n      // http.ClientRequest in node.js\n      console.log(error.request);\n      throw new Error(\"Check Internet Connection\");\n    } else {\n      // Something happened in setting up the request that triggered an Error\n      console.log(\"Error\", error.message);\n      throw new Error(\"Something went wrong. Please contact Customer Support.\");\n    } // ipcRenderer.send('api', { id, url, method, payload });\n    // return await waitForEvent(ipcRenderer, id);\n\n  }\n};","map":{"version":3,"sources":["/Users/pulkitshah/Desktop/truckarv2/renderer/helper/fetchApiResult.js"],"names":["nanoid","axios","electron","ipcRenderer","waitForEvent","emitter","channel","Promise","resolve","once","event","data","fetchApiResult","url","method","payload","response","error","console","log","Error","request","id","message"],"mappings":"AAAA,SAASA,MAAT,QAAuB,QAAvB;AACA,OAAOC,KAAP,MAAkB,gBAAlB,C,CAEA;;AACA,OAAOC,QAAP,MAAqB,UAArB;AACA,MAAMC,WAAW,GAAGD,QAAQ,CAACC,WAAT,IAAwB,KAA5C;;AAEA,SAASC,YAAT,CAAsBC,OAAtB,EAA+BC,OAA/B,EAAwC;AACtC;AACA,SAAO,IAAIC,OAAJ,CAAaC,OAAD,IAAa;AAC9BH,IAAAA,OAAO,CAACI,IAAR,CAAaH,OAAb,EAAsB,CAACI,KAAD,EAAQC,IAAR,KAAiB;AACrCH,MAAAA,OAAO,CAACG,IAAD,CAAP;AACD,KAFD;AAGD,GAJM,CAAP;AAKD;;AACD,OAAO,MAAMC,cAAc,GAAG,CAACT,WAAD,GAC1B,OAAOU,GAAP,EAAYC,MAAZ,EAAoBC,OAApB,KAAgC;AAC9B,MAAI;AACF,UAAMC,QAAQ,GAAG,MAAMf,KAAK,CAACa,MAAD,CAAL,CACpB,wBAAuBD,GAAI,EADP,EAErBE,OAFqB,CAAvB;AAKA,WAAOC,QAAP;AACD,GAPD,CAOE,OAAOC,KAAP,EAAc;AACd,QAAIA,KAAK,CAACA,KAAV,EAAiB;AACf;AACA;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYF,KAAK,CAACA,KAAlB;AACA,YAAM,IAAIG,KAAJ,CAAUH,KAAK,CAACA,KAAhB,CAAN;AACD,KALD,MAKO,IAAIA,KAAK,CAACI,OAAV,EAAmB;AACxB;AACA;AACA;AACAH,MAAAA,OAAO,CAACC,GAAR,CAAYF,KAAK,CAACI,OAAlB;AACA,YAAM,IAAID,KAAJ,CAAU,2BAAV,CAAN;AACD,KANM,MAMA;AACL;AACAF,MAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBF,KAArB;AACA,YAAM,IAAIG,KAAJ,CACJ,wDADI,CAAN;AAGD;AACF;AACF,CA7ByB,GA8B1B,OAAOP,GAAP,EAAYC,MAAZ,EAAoBC,OAApB,KAAgC;AAC9B,QAAMO,EAAE,GAAGtB,MAAM,EAAjB;AACAkB,EAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ;AACAD,EAAAA,OAAO,CAACC,GAAR,CAAYjB,QAAZ;;AACA,MAAI;AACF,UAAMc,QAAQ,GAAG,MAAMf,KAAK,CAACa,MAAD,CAAL,CACpB,wBAAuBD,GAAI,EADP,EAErBE,OAFqB,CAAvB;AAIA,WAAOC,QAAP;AACD,GAND,CAME,OAAOC,KAAP,EAAc;AACd,QAAIA,KAAK,CAACD,QAAV,EAAoB,CAClB;AACA;AACA;AACD,KAJD,MAIO,IAAIC,KAAK,CAACI,OAAV,EAAmB;AACxB;AACA;AACA;AACAH,MAAAA,OAAO,CAACC,GAAR,CAAYF,KAAK,CAACI,OAAlB;AACA,YAAM,IAAID,KAAJ,CAAU,2BAAV,CAAN;AACD,KANM,MAMA;AACL;AACAF,MAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBF,KAAK,CAACM,OAA3B;AACA,YAAM,IAAIH,KAAJ,CACJ,wDADI,CAAN;AAGD,KAjBa,CAmBd;AACA;;AACD;AACF,CA9DE","sourcesContent":["import { nanoid } from \"nanoid\";\nimport axios from \"../utils/axios\";\n\n// var electron = require('electron');\nimport electron from \"electron\";\nconst ipcRenderer = electron.ipcRenderer || false;\n\nfunction waitForEvent(emitter, channel) {\n  // https://www.derpturkey.com/event-emitter-to-promise/\n  return new Promise((resolve) => {\n    emitter.once(channel, (event, data) => {\n      resolve(data);\n    });\n  });\n}\nexport const fetchApiResult = !ipcRenderer\n  ? async (url, method, payload) => {\n      try {\n        const response = await axios[method](\n          `http://localhost:3001${url}`,\n          payload\n        );\n\n        return response;\n      } catch (error) {\n        if (error.error) {\n          // The request was made and the server responded with a status code\n          // that falls out of the range of 2xx\n          console.log(error.error);\n          throw new Error(error.error);\n        } else if (error.request) {\n          // The request was made but no response was received\n          // `error.request` is an instance of XMLHttpRequest in the browser and an instance of\n          // http.ClientRequest in node.js\n          console.log(error.request);\n          throw new Error(\"Check Internet Connection\");\n        } else {\n          // Something happened in setting up the request that triggered an Error\n          console.log(\"Error\", error);\n          throw new Error(\n            \"Something went wrong. Please contact Customer Support.\"\n          );\n        }\n      }\n    }\n  : async (url, method, payload) => {\n      const id = nanoid();\n      console.log(\"electron\");\n      console.log(electron);\n      try {\n        const response = await axios[method](\n          `http://localhost:3001${url}`,\n          payload\n        );\n        return response;\n      } catch (error) {\n        if (error.response) {\n          // The request was made and the server responded with a status code\n          // that falls out of the range of 2xx\n          // throw new Error(error.response.data.error);\n        } else if (error.request) {\n          // The request was made but no response was received\n          // `error.request` is an instance of XMLHttpRequest in the browser and an instance of\n          // http.ClientRequest in node.js\n          console.log(error.request);\n          throw new Error(\"Check Internet Connection\");\n        } else {\n          // Something happened in setting up the request that triggered an Error\n          console.log(\"Error\", error.message);\n          throw new Error(\n            \"Something went wrong. Please contact Customer Support.\"\n          );\n        }\n\n        // ipcRenderer.send('api', { id, url, method, payload });\n        // return await waitForEvent(ipcRenderer, id);\n      }\n    };\n"]},"metadata":{},"sourceType":"module"}