{"ast":null,"code":"import { API } from \"aws-amplify\";\nimport { ordersByUser } from \"../graphql/queries\";\nimport { createOrder, updateOrder } from \"../graphql/mutations\";\nimport { Order } from \"../models\";\nimport { DataStore, Predicates } from \"@aws-amplify/datastore\";\nimport moment from \"moment\";\nimport { slice } from \"../slices/orders\";\nimport { getFiscalYearTimestamps } from \"../utils/get-fiscal-year\";\n\nclass OrderApi {\n  async getOrdersByUser(user, dispatch) {\n    try {\n      //////////////////////// GraphQL API ////////////////////////\n      const response = await API.graphql({\n        query: ordersByUser,\n        variables: {\n          user: user.id.toString(),\n          sortDirection: \"DESC\"\n        }\n      });\n      const orders = response.data.ordersByUser.items; //////////////////////// GraphQL API ////////////////////////\n      //////////////////////// DataStore API ////////////////////////\n      // const orders = await DataStore.query(Order, (c) =>\n      //   c.user(\"eq\", user.id)\n      // );\n      //////////////////////// DataStore API ////////////////////////\n      // console.log(orders);\n      // Dispatch - Reducer\n\n      dispatch(slice.actions.getOrders(orders));\n      return orders;\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  async createOrder(newOrder, dispatch) {\n    const createdAt = moment().toISOString();\n    let newOrg = newOrder;\n    newOrg.createdAt = createdAt; //////////////////////// GraphQL API ////////////////////////\n\n    const response = await API.graphql({\n      query: createOrder,\n      variables: {\n        input: newOrg\n      },\n      authMode: \"AMAZON_COGNITO_USER_POOLS\"\n    });\n    const order = response.data.createOrder; //////////////////////// GraphQL API ////////////////////////\n    //////////////////////// DataStore API ////////////////////////\n    // const order = await DataStore.save(new Order(newOrg));\n    //////////////////////// DataStore API ////////////////////////\n\n    console.log(order); // Dispatch - Reducer\n\n    dispatch(slice.actions.createOrder({\n      order\n    }));\n    return order;\n  }\n\n  async updateOrder(editedOrder, dispatch) {\n    //////////////////////// GraphQL API ////////////////////////\n    const response = await API.graphql({\n      query: updateOrder,\n      variables: {\n        input: editedOrder\n      },\n      authMode: \"AMAZON_COGNITO_USER_POOLS\"\n    });\n    const order = response.data.updateOrder; //////////////////////// GraphQL API ////////////////////////\n    // console.log(order);\n    // Dispatch - Reducer\n\n    dispatch(slice.actions.updateOrder({\n      order\n    }));\n    return response;\n  }\n\n  async validateDuplicateOrderNo(orderNo, saleDate, user) {\n    try {\n      const response = await API.graphql({\n        query: ordersByUser,\n        variables: {\n          user: user.id.toString()\n        }\n      });\n      const orders = response.data.ordersByUser.items;\n      const order = orders.filter(order => {\n        const orderSaleDate = moment(orders[0].saleDate);\n        return order.orderNo === orderNo && getFiscalYearTimestamps(orderSaleDate).current.start.format(\"L\") === getFiscalYearTimestamps(saleDate).current.start.format(\"L\");\n      });\n      return Boolean(!order.length);\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n}\n\nexport const orderApi = new OrderApi();","map":{"version":3,"sources":["/Users/pulkitshah/Desktop/truckarv2/renderer/api/order-api.js"],"names":["API","ordersByUser","createOrder","updateOrder","Order","DataStore","Predicates","moment","slice","getFiscalYearTimestamps","OrderApi","getOrdersByUser","user","dispatch","response","graphql","query","variables","id","toString","sortDirection","orders","data","items","actions","getOrders","error","console","log","newOrder","createdAt","toISOString","newOrg","input","authMode","order","editedOrder","validateDuplicateOrderNo","orderNo","saleDate","filter","orderSaleDate","current","start","format","Boolean","length","orderApi"],"mappings":"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","sourcesContent":["import { API } from \"aws-amplify\";\nimport { ordersByUser } from \"../graphql/queries\";\nimport { createOrder, updateOrder } from \"../graphql/mutations\";\nimport { Order } from \"../models\";\nimport { DataStore, Predicates } from \"@aws-amplify/datastore\";\nimport moment from \"moment\";\nimport { slice } from \"../slices/orders\";\nimport { getFiscalYearTimestamps } from \"../utils/get-fiscal-year\";\n\nclass OrderApi {\n  async getOrdersByUser(user, dispatch) {\n    try {\n      //////////////////////// GraphQL API ////////////////////////\n\n      const response = await API.graphql({\n        query: ordersByUser,\n        variables: {\n          user: user.id.toString(),\n          sortDirection: \"DESC\",\n        },\n      });\n      const orders = response.data.ordersByUser.items;\n      //////////////////////// GraphQL API ////////////////////////\n\n      //////////////////////// DataStore API ////////////////////////\n\n      // const orders = await DataStore.query(Order, (c) =>\n      //   c.user(\"eq\", user.id)\n      // );\n\n      //////////////////////// DataStore API ////////////////////////\n\n      // console.log(orders);\n\n      // Dispatch - Reducer\n\n      dispatch(slice.actions.getOrders(orders));\n\n      return orders;\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  async createOrder(newOrder, dispatch) {\n    const createdAt = moment().toISOString();\n    let newOrg = newOrder;\n    newOrg.createdAt = createdAt;\n\n    //////////////////////// GraphQL API ////////////////////////\n\n    const response = await API.graphql({\n      query: createOrder,\n      variables: { input: newOrg },\n      authMode: \"AMAZON_COGNITO_USER_POOLS\",\n    });\n\n    const order = response.data.createOrder;\n\n    //////////////////////// GraphQL API ////////////////////////\n\n    //////////////////////// DataStore API ////////////////////////\n\n    // const order = await DataStore.save(new Order(newOrg));\n\n    //////////////////////// DataStore API ////////////////////////\n\n    console.log(order);\n\n    // Dispatch - Reducer\n\n    dispatch(slice.actions.createOrder({ order }));\n\n    return order;\n  }\n\n  async updateOrder(editedOrder, dispatch) {\n    //////////////////////// GraphQL API ////////////////////////\n\n    const response = await API.graphql({\n      query: updateOrder,\n      variables: { input: editedOrder },\n      authMode: \"AMAZON_COGNITO_USER_POOLS\",\n    });\n\n    const order = response.data.updateOrder;\n\n    //////////////////////// GraphQL API ////////////////////////\n\n    // console.log(order);\n\n    // Dispatch - Reducer\n\n    dispatch(slice.actions.updateOrder({ order }));\n\n    return response;\n  }\n\n  async validateDuplicateOrderNo(orderNo, saleDate, user) {\n    try {\n      const response = await API.graphql({\n        query: ordersByUser,\n        variables: { user: user.id.toString() },\n      });\n\n      const orders = response.data.ordersByUser.items;\n\n      const order = orders.filter((order) => {\n        const orderSaleDate = moment(orders[0].saleDate);\n\n        return (\n          order.orderNo === orderNo &&\n          getFiscalYearTimestamps(orderSaleDate).current.start.format(\"L\") ===\n            getFiscalYearTimestamps(saleDate).current.start.format(\"L\")\n        );\n      });\n      return Boolean(!order.length);\n    } catch (error) {\n      console.log(error);\n    }\n  }\n}\n\nexport const orderApi = new OrderApi();\n"]},"metadata":{},"sourceType":"module"}