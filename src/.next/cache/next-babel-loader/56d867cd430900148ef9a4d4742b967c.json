{"ast":null,"code":"import _regeneratorRuntime from \"/Users/pulkitshah/Desktop/truckarv2/node_modules/next/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/pulkitshah/Desktop/truckarv2/node_modules/next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/pulkitshah/Desktop/truckarv2/node_modules/next/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/pulkitshah/Desktop/truckarv2/node_modules/next/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { API } from \"aws-amplify\";\nimport { partiesByUser } from \"../graphql/queries\";\nimport { createParty as _createParty, updateParty as _updateParty } from \"../graphql/mutations\";\nimport { Party } from \"../models\";\nimport { DataStore, Predicates } from \"@aws-amplify/datastore\";\nimport moment from \"moment\";\nimport { slice } from \"../slices/parties\";\nvar now = new Date();\n\nvar PartyApi = /*#__PURE__*/function () {\n  function PartyApi() {\n    _classCallCheck(this, PartyApi);\n  }\n\n  _createClass(PartyApi, [{\n    key: \"getPartiesByUser\",\n    value: function () {\n      var _getPartiesByUser = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(user, dispatch) {\n        var response, parties;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.prev = 0;\n                _context.next = 3;\n                return API.graphql({\n                  query: partiesByUser,\n                  variables: {\n                    user: user.id.toString()\n                  }\n                });\n\n              case 3:\n                response = _context.sent;\n                parties = response.data.partiesByUser.items; //////////////////////// GraphQL API ////////////////////////\n                //////////////////////// DataStore API ////////////////////////\n                // const parties = await DataStore.query(Party, (c) =>\n                //   c.user(\"eq\", user.id)\n                // );\n                //////////////////////// DataStore API ////////////////////////\n\n                console.log(parties); // Dispatch - Reducer\n\n                dispatch(slice.actions.getParties(parties));\n                return _context.abrupt(\"return\", parties);\n\n              case 10:\n                _context.prev = 10;\n                _context.t0 = _context[\"catch\"](0);\n                console.log(_context.t0);\n\n              case 13:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, null, [[0, 10]]);\n      }));\n\n      function getPartiesByUser(_x, _x2) {\n        return _getPartiesByUser.apply(this, arguments);\n      }\n\n      return getPartiesByUser;\n    }()\n  }, {\n    key: \"createParty\",\n    value: function () {\n      var _createParty2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(createdParty, dispatch) {\n        var createdAt, newParty, response, party;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                createdAt = moment().toISOString();\n                newParty = createdParty;\n                newParty.createdAt = createdAt; //////////////////////// GraphQL API ////////////////////////\n\n                _context2.next = 5;\n                return API.graphql({\n                  query: _createParty,\n                  variables: {\n                    input: newParty\n                  },\n                  authMode: \"AMAZON_COGNITO_USER_POOLS\"\n                });\n\n              case 5:\n                response = _context2.sent;\n                party = response.data.createParty; //////////////////////// GraphQL API ////////////////////////\n                //////////////////////// DataStore API ////////////////////////\n                // const party = await DataStore.save(new Party(newParty));\n                //////////////////////// DataStore API ////////////////////////\n                // console.log(party);\n                // Dispatch - Reducer\n\n                dispatch(slice.actions.createParty({\n                  party: party\n                }));\n                return _context2.abrupt(\"return\", party);\n\n              case 9:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      function createParty(_x3, _x4) {\n        return _createParty2.apply(this, arguments);\n      }\n\n      return createParty;\n    }()\n  }, {\n    key: \"updateParty\",\n    value: function () {\n      var _updateParty2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(editedParty, dispatch) {\n        var response, party;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.next = 2;\n                return API.graphql({\n                  query: _updateParty,\n                  variables: {\n                    input: editedParty\n                  },\n                  authMode: \"AMAZON_COGNITO_USER_POOLS\"\n                });\n\n              case 2:\n                response = _context3.sent;\n                party = response.data.updateParty; //////////////////////// GraphQL API ////////////////////////\n                // console.log(party);\n                // Dispatch - Reducer\n\n                dispatch(slice.actions.updateParty({\n                  party: party\n                }));\n                return _context3.abrupt(\"return\", response);\n\n              case 6:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      }));\n\n      function updateParty(_x5, _x6) {\n        return _updateParty2.apply(this, arguments);\n      }\n\n      return updateParty;\n    }()\n  }, {\n    key: \"validateDuplicateName\",\n    value: function () {\n      var _validateDuplicateName = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(name, user) {\n        var response, parties, party;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _context4.next = 2;\n                return API.graphql({\n                  query: partiesByUser,\n                  variables: {\n                    user: user.id.toString()\n                  }\n                });\n\n              case 2:\n                response = _context4.sent;\n                parties = response.data.partiesByUser.items;\n                party = parties.find(function (party) {\n                  return party.name === name;\n                });\n                return _context4.abrupt(\"return\", Boolean(!party));\n\n              case 6:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4);\n      }));\n\n      function validateDuplicateName(_x7, _x8) {\n        return _validateDuplicateName.apply(this, arguments);\n      }\n\n      return validateDuplicateName;\n    }()\n  }, {\n    key: \"validateDuplicateMobile\",\n    value: function () {\n      var _validateDuplicateMobile = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(mobile, user) {\n        var response, parties, party;\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                _context5.next = 2;\n                return API.graphql({\n                  query: partiesByUser,\n                  variables: {\n                    user: user.id.toString()\n                  }\n                });\n\n              case 2:\n                response = _context5.sent;\n                parties = response.data.partiesByUser.items;\n                party = parties.find(function (party) {\n                  return party.mobile === mobile;\n                });\n                return _context5.abrupt(\"return\", Boolean(!party));\n\n              case 6:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5);\n      }));\n\n      function validateDuplicateMobile(_x9, _x10) {\n        return _validateDuplicateMobile.apply(this, arguments);\n      }\n\n      return validateDuplicateMobile;\n    }()\n  }]);\n\n  return PartyApi;\n}();\n\nexport var partyApi = new PartyApi();","map":{"version":3,"sources":["/Users/pulkitshah/Desktop/truckarv2/renderer/api/party-api.js"],"names":["API","partiesByUser","createParty","updateParty","Party","DataStore","Predicates","moment","slice","now","Date","PartyApi","user","dispatch","graphql","query","variables","id","toString","response","parties","data","items","console","log","actions","getParties","createdParty","createdAt","toISOString","newParty","input","authMode","party","editedParty","name","find","Boolean","mobile","partyApi"],"mappings":"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","sourcesContent":["import { API } from \"aws-amplify\";\nimport { partiesByUser } from \"../graphql/queries\";\nimport { createParty, updateParty } from \"../graphql/mutations\";\nimport { Party } from \"../models\";\nimport { DataStore, Predicates } from \"@aws-amplify/datastore\";\nimport moment from \"moment\";\nimport { slice } from \"../slices/parties\";\n\nconst now = new Date();\n\nclass PartyApi {\n  async getPartiesByUser(user, dispatch) {\n    try {\n      //////////////////////// GraphQL API ////////////////////////\n\n      const response = await API.graphql({\n        query: partiesByUser,\n        variables: { user: user.id.toString() },\n      });\n      const parties = response.data.partiesByUser.items;\n\n      //////////////////////// GraphQL API ////////////////////////\n\n      //////////////////////// DataStore API ////////////////////////\n\n      // const parties = await DataStore.query(Party, (c) =>\n      //   c.user(\"eq\", user.id)\n      // );\n\n      //////////////////////// DataStore API ////////////////////////\n\n      console.log(parties);\n\n      // Dispatch - Reducer\n\n      dispatch(slice.actions.getParties(parties));\n\n      return parties;\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  async createParty(createdParty, dispatch) {\n    const createdAt = moment().toISOString();\n    let newParty = createdParty;\n    newParty.createdAt = createdAt;\n\n    //////////////////////// GraphQL API ////////////////////////\n\n    const response = await API.graphql({\n      query: createParty,\n      variables: { input: newParty },\n      authMode: \"AMAZON_COGNITO_USER_POOLS\",\n    });\n\n    const party = response.data.createParty;\n\n    //////////////////////// GraphQL API ////////////////////////\n\n    //////////////////////// DataStore API ////////////////////////\n\n    // const party = await DataStore.save(new Party(newParty));\n\n    //////////////////////// DataStore API ////////////////////////\n\n    // console.log(party);\n\n    // Dispatch - Reducer\n\n    dispatch(slice.actions.createParty({ party }));\n\n    return party;\n  }\n\n  async updateParty(editedParty, dispatch) {\n    //////////////////////// GraphQL API ////////////////////////\n\n    const response = await API.graphql({\n      query: updateParty,\n      variables: { input: editedParty },\n      authMode: \"AMAZON_COGNITO_USER_POOLS\",\n    });\n\n    const party = response.data.updateParty;\n\n    //////////////////////// GraphQL API ////////////////////////\n\n    // console.log(party);\n\n    // Dispatch - Reducer\n\n    dispatch(slice.actions.updateParty({ party }));\n\n    return response;\n  }\n\n  async validateDuplicateName(name, user) {\n    const response = await API.graphql({\n      query: partiesByUser,\n      variables: { user: user.id.toString() },\n    });\n    const parties = response.data.partiesByUser.items;\n    const party = parties.find((party) => {\n      return party.name === name;\n    });\n    return Boolean(!party);\n  }\n\n  async validateDuplicateMobile(mobile, user) {\n    const response = await API.graphql({\n      query: partiesByUser,\n      variables: { user: user.id.toString() },\n    });\n    const parties = response.data.partiesByUser.items;\n    const party = parties.find((party) => {\n      return party.mobile === mobile;\n    });\n    return Boolean(!party);\n  }\n}\n\nexport const partyApi = new PartyApi();\n"]},"metadata":{},"sourceType":"module"}