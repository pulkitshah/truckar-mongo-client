{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/pulkitshah/Desktop/truckarv2/renderer/components/dashboard/autocompletes/party-addnew-autocomplete.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* eslint-disable no-use-before-define */\nimport React, { useState, useEffect, useCallback } from \"react\";\nimport * as Yup from \"yup\";\nimport { Formik } from \"formik\";\nimport { Box, Button, Card, CardContent, Dialog, DialogTitle, Grid, Switch, TextField, Typography } from \"@mui/material\";\nimport GoogleMaps from \"./google-places-autocomplete\";\n\nconst AddNewPartyFromAutocomplete = (_ref) => {\n  let {\n    open,\n    dialogValue,\n    setDialogValue,\n    setFieldValue,\n    toggleOpen,\n    type,\n    user\n  } = _ref,\n      rest = _objectWithoutProperties(_ref, [\"open\", \"dialogValue\", \"setDialogValue\", \"setFieldValue\", \"toggleOpen\", \"type\", \"user\"]);\n\n  console.log(open);\n  console.log(dialogValue);\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      children: /*#__PURE__*/_jsxDEV(Dialog, {\n        open: open,\n        onClose: () => toggleOpen(false),\n        \"aria-labelledby\": \"form-dialog-name\",\n        children: [/*#__PURE__*/_jsxDEV(DialogTitle, {\n          id: \"form-dialog-name\",\n          children: \"Add a new party\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Formik, {\n          initialValues: {\n            name: dialogValue.name || \"\",\n            mobile: dialogValue.mobile || \"\",\n            location: dialogValue.location || \"\",\n            transporter: dialogValue.transporter || \"\",\n            submit: null\n          },\n          validationSchema: Yup.object().shape({\n            name: Yup.string().max(255).required(\"Name is required\"),\n            mobile: Yup.string().matches(/^[6-9]\\d{9}$/, \"Phone number is not valid\").required(\"Mobile is required\")\n          }),\n          onSubmit: async (values, {\n            resetForm,\n            setErrors,\n            setStatus,\n            setSubmitting\n          }) => {\n            try {\n              // NOTE: Make API request\n              const response = await axios.post(`/api/parties/`, _objectSpread({\n                name: values.name.replace(/\\w\\S*/g, function (txt) {\n                  return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();\n                })\n              }, values));\n              setFieldValue(type, response.data);\n              resetForm();\n              setStatus({\n                success: true\n              });\n              setSubmitting(false);\n              enqueueSnackbar(\"Party updated\", {\n                variant: \"success\",\n                action: /*#__PURE__*/_jsxDEV(Button, {\n                  children: \"See all\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 76,\n                  columnNumber: 27\n                }, this)\n              });\n              toggleOpen(false);\n            } catch (err) {\n              console.log(err);\n              setStatus({\n                success: false\n              });\n              setErrors({\n                submit: err.message\n              });\n              setSubmitting(false);\n            }\n          },\n          children: ({\n            errors,\n            handleBlur,\n            handleChange,\n            handleSubmit,\n            isSubmitting,\n            setFieldValue,\n            touched,\n            values\n          }) => /*#__PURE__*/_jsxDEV(\"form\", {\n            onSubmit: handleSubmit,\n            children: /*#__PURE__*/_jsxDEV(Card, {\n              children: /*#__PURE__*/_jsxDEV(CardContent, {\n                children: [/*#__PURE__*/_jsxDEV(Grid, {\n                  container: true,\n                  spacing: 3,\n                  children: [/*#__PURE__*/_jsxDEV(Grid, {\n                    item: true,\n                    xs: 12,\n                    children: /*#__PURE__*/_jsxDEV(TextField, {\n                      error: Boolean(touched.name && errors.name),\n                      fullWidth: true,\n                      helperText: touched.name && errors.name,\n                      label: \"Main Contact Name\",\n                      name: \"name\",\n                      onBlur: handleBlur,\n                      onChange: event => {\n                        setFieldValue(\"name\", event.target.value.replace(/\\w\\S*/g, function (txt) {\n                          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();\n                        }));\n                      },\n                      required: true,\n                      value: values.name,\n                      variant: \"outlined\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 102,\n                      columnNumber: 25\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 101,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(Grid, {\n                    item: true,\n                    xs: 12,\n                    children: /*#__PURE__*/_jsxDEV(TextField, {\n                      error: Boolean(touched.mobile && errors.mobile),\n                      fullWidth: true,\n                      helperText: touched.mobile && errors.mobile,\n                      label: \"Mobile\",\n                      name: \"mobile\",\n                      onBlur: handleBlur,\n                      onChange: event => {\n                        setFieldValue(\"mobile\", event.target.value.replace(/ /g, \"\"));\n                      },\n                      value: values.mobile,\n                      variant: \"outlined\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 129,\n                      columnNumber: 25\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 128,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(Grid, {\n                    item: true,\n                    xs: 12,\n                    children: /*#__PURE__*/_jsxDEV(TextField, _objectSpread(_objectSpread(_objectSpread({}, params), {}, {\n                      onKeyPress: e => {\n                        e.which === 13 && e.preventDefault();\n                      }\n                    }, params), {}, {\n                      name: name,\n                      label: \"City\",\n                      variant: \"outlined\",\n                      fullWidth: true,\n                      helperText: touched && error ? error : \"\",\n                      error: Boolean(touched && error)\n                    }), void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 147,\n                      columnNumber: 25\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 146,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(Grid, {\n                    item: true,\n                    xs: 12,\n                    children: [/*#__PURE__*/_jsxDEV(Typography, {\n                      variant: \"h5\",\n                      color: \"textPrimary\",\n                      children: \"Party Type\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 162,\n                      columnNumber: 25\n                    }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                      variant: \"body2\",\n                      color: \"textSecondary\",\n                      children: \"Is this party a transporter?\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 165,\n                      columnNumber: 25\n                    }, this), /*#__PURE__*/_jsxDEV(Switch, {\n                      checked: values.transporter,\n                      color: \"secondary\",\n                      edge: \"start\",\n                      name: \"transporter\",\n                      onChange: handleChange,\n                      value: values.transporter\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 168,\n                      columnNumber: 25\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 161,\n                    columnNumber: 23\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 100,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(Box, {\n                  mt: 2,\n                  children: /*#__PURE__*/_jsxDEV(Grid, {\n                    container: true,\n                    spacing: 3,\n                    children: [/*#__PURE__*/_jsxDEV(Grid, {\n                      item: true,\n                      children: /*#__PURE__*/_jsxDEV(Button, {\n                        variant: \"contained\",\n                        color: \"secondary\",\n                        type: \"submit\",\n                        disabled: isSubmitting,\n                        children: \"Create Party\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 181,\n                        columnNumber: 27\n                      }, this)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 180,\n                      columnNumber: 25\n                    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n                      item: true,\n                      children: /*#__PURE__*/_jsxDEV(Button, {\n                        variant: \"contained\",\n                        color: \"secondary\",\n                        onClick: () => toggleOpen(false),\n                        children: \"Cancel\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 191,\n                        columnNumber: 27\n                      }, this)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 190,\n                      columnNumber: 25\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 179,\n                    columnNumber: 23\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 178,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 99,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 98,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 97,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 5\n  }, this);\n};\n\nexport default AddNewPartyFromAutocomplete;","map":{"version":3,"sources":["/Users/pulkitshah/Desktop/truckarv2/renderer/components/dashboard/autocompletes/party-addnew-autocomplete.js"],"names":["React","useState","useEffect","useCallback","Yup","Formik","Box","Button","Card","CardContent","Dialog","DialogTitle","Grid","Switch","TextField","Typography","GoogleMaps","AddNewPartyFromAutocomplete","open","dialogValue","setDialogValue","setFieldValue","toggleOpen","type","user","rest","console","log","name","mobile","location","transporter","submit","object","shape","string","max","required","matches","values","resetForm","setErrors","setStatus","setSubmitting","response","axios","post","replace","txt","charAt","toUpperCase","substr","toLowerCase","data","success","enqueueSnackbar","variant","action","err","message","errors","handleBlur","handleChange","handleSubmit","isSubmitting","touched","Boolean","event","target","value","params","e","which","preventDefault","error"],"mappings":"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","sourcesContent":["/* eslint-disable no-use-before-define */\nimport React, { useState, useEffect, useCallback } from \"react\";\nimport * as Yup from \"yup\";\nimport { Formik } from \"formik\";\n\nimport {\n  Box,\n  Button,\n  Card,\n  CardContent,\n  Dialog,\n  DialogTitle,\n  Grid,\n  Switch,\n  TextField,\n  Typography,\n} from \"@mui/material\";\nimport GoogleMaps from \"./google-places-autocomplete\";\n\nconst AddNewPartyFromAutocomplete = ({\n  open,\n  dialogValue,\n  setDialogValue,\n  setFieldValue,\n  toggleOpen,\n  type,\n  user,\n  ...rest\n}) => {\n  console.log(open);\n  console.log(dialogValue);\n\n  return (\n    <React.Fragment>\n      <form>\n        <Dialog\n          open={open}\n          onClose={() => toggleOpen(false)}\n          aria-labelledby=\"form-dialog-name\"\n        >\n          <DialogTitle id=\"form-dialog-name\">Add a new party</DialogTitle>\n          <Formik\n            initialValues={{\n              name: dialogValue.name || \"\",\n              mobile: dialogValue.mobile || \"\",\n              location: dialogValue.location || \"\",\n              transporter: dialogValue.transporter || \"\",\n              submit: null,\n            }}\n            validationSchema={Yup.object().shape({\n              name: Yup.string().max(255).required(\"Name is required\"),\n              mobile: Yup.string()\n                .matches(/^[6-9]\\d{9}$/, \"Phone number is not valid\")\n                .required(\"Mobile is required\"),\n            })}\n            onSubmit={async (\n              values,\n              { resetForm, setErrors, setStatus, setSubmitting }\n            ) => {\n              try {\n                // NOTE: Make API request\n                const response = await axios.post(`/api/parties/`, {\n                  name: values.name.replace(/\\w\\S*/g, function (txt) {\n                    return (\n                      txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase()\n                    );\n                  }),\n                  ...values,\n                });\n                setFieldValue(type, response.data);\n                resetForm();\n                setStatus({ success: true });\n                setSubmitting(false);\n                enqueueSnackbar(\"Party updated\", {\n                  variant: \"success\",\n                  action: <Button>See all</Button>,\n                });\n                toggleOpen(false);\n              } catch (err) {\n                console.log(err);\n                setStatus({ success: false });\n                setErrors({ submit: err.message });\n                setSubmitting(false);\n              }\n            }}\n          >\n            {({\n              errors,\n              handleBlur,\n              handleChange,\n              handleSubmit,\n              isSubmitting,\n              setFieldValue,\n              touched,\n              values,\n            }) => (\n              <form onSubmit={handleSubmit}>\n                <Card>\n                  <CardContent>\n                    <Grid container spacing={3}>\n                      <Grid item xs={12}>\n                        <TextField\n                          error={Boolean(touched.name && errors.name)}\n                          fullWidth\n                          helperText={touched.name && errors.name}\n                          label=\"Main Contact Name\"\n                          name=\"name\"\n                          onBlur={handleBlur}\n                          onChange={(event) => {\n                            setFieldValue(\n                              \"name\",\n                              event.target.value.replace(\n                                /\\w\\S*/g,\n                                function (txt) {\n                                  return (\n                                    txt.charAt(0).toUpperCase() +\n                                    txt.substr(1).toLowerCase()\n                                  );\n                                }\n                              )\n                            );\n                          }}\n                          required\n                          value={values.name}\n                          variant=\"outlined\"\n                        />\n                      </Grid>\n                      <Grid item xs={12}>\n                        <TextField\n                          error={Boolean(touched.mobile && errors.mobile)}\n                          fullWidth\n                          helperText={touched.mobile && errors.mobile}\n                          label=\"Mobile\"\n                          name=\"mobile\"\n                          onBlur={handleBlur}\n                          onChange={(event) => {\n                            setFieldValue(\n                              \"mobile\",\n                              event.target.value.replace(/ /g, \"\")\n                            );\n                          }}\n                          value={values.mobile}\n                          variant=\"outlined\"\n                        />\n                      </Grid>\n                      <Grid item xs={12}>\n                        <TextField\n                          {...params}\n                          onKeyPress={(e) => {\n                            e.which === 13 && e.preventDefault();\n                          }}\n                          {...params}\n                          name={name}\n                          label={\"City\"}\n                          variant=\"outlined\"\n                          fullWidth\n                          helperText={touched && error ? error : \"\"}\n                          error={Boolean(touched && error)}\n                        />\n                      </Grid>\n                      <Grid item xs={12}>\n                        <Typography variant=\"h5\" color=\"textPrimary\">\n                          Party Type\n                        </Typography>\n                        <Typography variant=\"body2\" color=\"textSecondary\">\n                          Is this party a transporter?\n                        </Typography>\n                        <Switch\n                          checked={values.transporter}\n                          color=\"secondary\"\n                          edge=\"start\"\n                          name=\"transporter\"\n                          onChange={handleChange}\n                          value={values.transporter}\n                        />\n                      </Grid>\n                    </Grid>\n                    <Box mt={2}>\n                      <Grid container spacing={3}>\n                        <Grid item>\n                          <Button\n                            variant=\"contained\"\n                            color=\"secondary\"\n                            type=\"submit\"\n                            disabled={isSubmitting}\n                          >\n                            Create Party\n                          </Button>\n                        </Grid>\n                        <Grid item>\n                          <Button\n                            variant=\"contained\"\n                            color=\"secondary\"\n                            onClick={() => toggleOpen(false)}\n                          >\n                            Cancel\n                          </Button>\n                        </Grid>\n                      </Grid>\n                    </Box>\n                  </CardContent>\n                </Card>\n              </form>\n            )}\n          </Formik>\n        </Dialog>\n      </form>\n    </React.Fragment>\n  );\n};\nexport default AddNewPartyFromAutocomplete;\n"]},"metadata":{},"sourceType":"module"}