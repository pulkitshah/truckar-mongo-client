{"ast":null,"code":"import _regeneratorRuntime from \"/Users/pulkitshah/Desktop/truckarv2/node_modules/next/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/pulkitshah/Desktop/truckarv2/node_modules/next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/pulkitshah/Desktop/truckarv2/node_modules/next/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/pulkitshah/Desktop/truckarv2/node_modules/next/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { API } from \"aws-amplify\";\nimport { organisationsByUser } from \"../graphql/queries\";\nimport { createOrganisation, updateOrganisation } from \"../graphql/mutations\";\nimport { Organisation } from \"../models\";\nimport { DataStore, Predicates } from \"@aws-amplify/datastore\";\nimport moment from \"moment\";\nvar now = new Date();\n\nvar OrganisationApi = /*#__PURE__*/function () {\n  function OrganisationApi() {\n    _classCallCheck(this, OrganisationApi);\n  }\n\n  _createClass(OrganisationApi, [{\n    key: \"getOrganisationsByUser\",\n    value: function () {\n      var _getOrganisationsByUser = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(user, dispatch) {\n        var response;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.prev = 0;\n                _context.next = 3;\n                return DataStore.query(Organisation, function (c) {\n                  return c.user(\"eq\", user.id);\n                });\n\n              case 3:\n                response = _context.sent;\n                console.log(response);\n                return _context.abrupt(\"return\", response);\n\n              case 8:\n                _context.prev = 8;\n                _context.t0 = _context[\"catch\"](0);\n                console.log(_context.t0);\n\n              case 11:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, null, [[0, 8]]);\n      }));\n\n      function getOrganisationsByUser(_x, _x2) {\n        return _getOrganisationsByUser.apply(this, arguments);\n      }\n\n      return getOrganisationsByUser;\n    }()\n  }, {\n    key: \"createOrganisation\",\n    value: function () {\n      var _createOrganisation = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(newOrganisation) {\n        var createdAt, org, response;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                createdAt = moment().toISOString();\n                org = newOrganisation;\n                org.createdAt = createdAt; // const response2 = await API.graphql({\n                //   query: createOrganisation,\n                //   variables: { input: newOrganisation },\n                //   authMode: \"AMAZON_COGNITO_USER_POOLS\",\n                // });\n\n                _context2.next = 5;\n                return DataStore.save(new Organisation(org));\n\n              case 5:\n                response = _context2.sent;\n                console.log(response);\n                return _context2.abrupt(\"return\", response);\n\n              case 8:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      function createOrganisation(_x3) {\n        return _createOrganisation.apply(this, arguments);\n      }\n\n      return createOrganisation;\n    }()\n  }, {\n    key: \"editOrganisation\",\n    value: function () {\n      var _editOrganisation = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(editedOrganisation) {\n        var response;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.next = 2;\n                return API.graphql({\n                  query: updateOrganisation,\n                  variables: {\n                    input: editedOrganisation\n                  },\n                  authMode: \"AMAZON_COGNITO_USER_POOLS\"\n                });\n\n              case 2:\n                response = _context3.sent;\n                return _context3.abrupt(\"return\", response);\n\n              case 4:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      }));\n\n      function editOrganisation(_x4) {\n        return _editOrganisation.apply(this, arguments);\n      }\n\n      return editOrganisation;\n    }()\n  }]);\n\n  return OrganisationApi;\n}();\n\nexport var organisationApi = new OrganisationApi();","map":{"version":3,"sources":["/Users/pulkitshah/Desktop/truckarv2/renderer/api/organisation-api.js"],"names":["API","organisationsByUser","createOrganisation","updateOrganisation","Organisation","DataStore","Predicates","moment","now","Date","OrganisationApi","user","dispatch","query","c","id","response","console","log","newOrganisation","createdAt","toISOString","org","save","editedOrganisation","graphql","variables","input","authMode","organisationApi"],"mappings":";;;;AAAA,SAASA,GAAT,QAAoB,aAApB;AACA,SAASC,mBAAT,QAAoC,oBAApC;AACA,SAASC,kBAAT,EAA6BC,kBAA7B,QAAuD,sBAAvD;AACA,SAASC,YAAT,QAA6B,WAA7B;AACA,SAASC,SAAT,EAAoBC,UAApB,QAAsC,wBAAtC;AACA,OAAOC,MAAP,MAAmB,QAAnB;AAEA,IAAMC,GAAG,GAAG,IAAIC,IAAJ,EAAZ;;IAEMC,e;;;;;;;;8GACyBC,I,EAAMC,Q;;;;;;;;uBAQRP,SAAS,CAACQ,KAAV,CAAgBT,YAAhB,EAA8B,UAACU,CAAD;AAAA,yBACnDA,CAAC,CAACH,IAAF,CAAO,IAAP,EAAaA,IAAI,CAACI,EAAlB,CADmD;AAAA,iBAA9B,C;;;AAAjBC,gBAAAA,Q;AAGNC,gBAAAA,OAAO,CAACC,GAAR,CAAYF,QAAZ;iDAEOA,Q;;;;;AAEPC,gBAAAA,OAAO,CAACC,GAAR;;;;;;;;;;;;;;;;;;;2GAIqBC,e;;;;;;AACjBC,gBAAAA,S,GAAYb,MAAM,GAAGc,WAAT,E;AACdC,gBAAAA,G,GAAMH,e;AACVG,gBAAAA,GAAG,CAACF,SAAJ,GAAgBA,SAAhB,C,CAEA;AACA;AACA;AACA;AACA;;;uBAEuBf,SAAS,CAACkB,IAAV,CAAe,IAAInB,YAAJ,CAAiBkB,GAAjB,CAAf,C;;;AAAjBN,gBAAAA,Q;AAENC,gBAAAA,OAAO,CAACC,GAAR,CAAYF,QAAZ;kDACOA,Q;;;;;;;;;;;;;;;;;;;yGAGcQ,kB;;;;;;;uBACExB,GAAG,CAACyB,OAAJ,CAAY;AACjCZ,kBAAAA,KAAK,EAAEV,kBAD0B;AAEjCuB,kBAAAA,SAAS,EAAE;AAAEC,oBAAAA,KAAK,EAAEH;AAAT,mBAFsB;AAGjCI,kBAAAA,QAAQ,EAAE;AAHuB,iBAAZ,C;;;AAAjBZ,gBAAAA,Q;kDAKCA,Q;;;;;;;;;;;;;;;;;;;;;AAIX,OAAO,IAAMa,eAAe,GAAG,IAAInB,eAAJ,EAAxB","sourcesContent":["import { API } from \"aws-amplify\";\nimport { organisationsByUser } from \"../graphql/queries\";\nimport { createOrganisation, updateOrganisation } from \"../graphql/mutations\";\nimport { Organisation } from \"../models\";\nimport { DataStore, Predicates } from \"@aws-amplify/datastore\";\nimport moment from \"moment\";\n\nconst now = new Date();\n\nclass OrganisationApi {\n  async getOrganisationsByUser(user, dispatch) {\n    try {\n      // const organisationesDB = await API.graphql({\n      //   query: organisationsByUser,\n      //   variables: { user: user.id.toString() },\n      // });\n      // console.log(organisationesDB.data.organisationsByUser.items);\n\n      const response = await DataStore.query(Organisation, (c) =>\n        c.user(\"eq\", user.id)\n      );\n      console.log(response);\n\n      return response;\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  async createOrganisation(newOrganisation) {\n    const createdAt = moment().toISOString();\n    let org = newOrganisation;\n    org.createdAt = createdAt;\n\n    // const response2 = await API.graphql({\n    //   query: createOrganisation,\n    //   variables: { input: newOrganisation },\n    //   authMode: \"AMAZON_COGNITO_USER_POOLS\",\n    // });\n\n    const response = await DataStore.save(new Organisation(org));\n\n    console.log(response);\n    return response;\n  }\n\n  async editOrganisation(editedOrganisation) {\n    const response = await API.graphql({\n      query: updateOrganisation,\n      variables: { input: editedOrganisation },\n      authMode: \"AMAZON_COGNITO_USER_POOLS\",\n    });\n    return response;\n  }\n}\n\nexport const organisationApi = new OrganisationApi();\n"]},"metadata":{},"sourceType":"module"}