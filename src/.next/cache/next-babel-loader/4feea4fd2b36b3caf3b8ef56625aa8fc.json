{"ast":null,"code":"import _regeneratorRuntime from \"/Users/pulkitshah/Desktop/truckarv2/node_modules/next/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/pulkitshah/Desktop/truckarv2/node_modules/next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/pulkitshah/Desktop/truckarv2/renderer/components/dashboard/order/delivery-details-grid.js\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { DataGrid } from \"@mui/x-data-grid\";\nimport { useDispatch } from \"../../../store\";\nimport { deliveryDetailsTable } from \"../../grids/grid-columns\";\nimport { orderApi } from \"../../../api/order-api\";\n\nvar Table = function Table(_ref) {\n  _s();\n\n  var order = _ref.order,\n      deliveries = _ref.deliveries;\n  var dispatch = useDispatch();\n\n  var getOrderUnit = function getOrderUnit(order) {\n    switch (JSON.parse(order.saleType).value) {\n      case \"quantity\":\n        return \"\".concat(JSON.parse(order.saleType).unit);\n        break;\n\n      case \"fixed\":\n        return \"(Fixed)\";\n        break;\n\n      case \"time\":\n        return \"\".concat(JSON.parse(order.saleType).unit);\n        break;\n\n      default:\n        break;\n    }\n  };\n\n  var processRowUpdate = React.useCallback( /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(newRow) {\n      var _order, newDeliveries, newOrder, response;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              // Make the HTTP request to save in the backend\n              _order = newRow.order;\n              delete newRow.order;\n              newDeliveries = JSON.parse(_order.deliveries).map(function (del) {\n                if (del.id !== newRow.id) {\n                  return del;\n                } else {\n                  return newRow;\n                }\n              });\n              newOrder = {\n                id: _order.id,\n                deliveries: JSON.stringify(newDeliveries),\n                _version: _order._version\n              };\n              console.log(_order);\n              _context.next = 8;\n              return orderApi.updateOrder(newOrder, dispatch);\n\n            case 8:\n              response = _context.sent;\n              console.log(response);\n              return _context.abrupt(\"return\", response);\n\n            case 13:\n              _context.prev = 13;\n              _context.t0 = _context[\"catch\"](0);\n              console.log(_context.t0);\n\n            case 16:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[0, 13]]);\n    }));\n\n    return function (_x) {\n      return _ref2.apply(this, arguments);\n    };\n  }(), []);\n  deliveries.map(function (del) {\n    del.order = order;\n    del.unit = getOrderUnit(order);\n    return del;\n  });\n  return /*#__PURE__*/_jsxDEV(DataGrid, {\n    rows: deliveries,\n    autoHeight: true,\n    columns: deliveryDetailsTable,\n    disableSelectionOnClick: true,\n    experimentalFeatures: {\n      newEditingApi: true\n    },\n    processRowUpdate: processRowUpdate\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 5\n  }, _this);\n};\n\n_s(Table, \"6UOfhBpef+0HOc/ZyCaDgEWUMgE=\", false, function () {\n  return [useDispatch];\n});\n\n_c = Table;\nexport default Table;\n\nvar _c;\n\n$RefreshReg$(_c, \"Table\");","map":{"version":3,"sources":["/Users/pulkitshah/Desktop/truckarv2/renderer/components/dashboard/order/delivery-details-grid.js"],"names":["React","DataGrid","useDispatch","deliveryDetailsTable","orderApi","Table","order","deliveries","dispatch","getOrderUnit","JSON","parse","saleType","value","unit","processRowUpdate","useCallback","newRow","newDeliveries","map","del","id","newOrder","stringify","_version","console","log","updateOrder","response","newEditingApi"],"mappings":";;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,QAAyB,kBAAzB;AACA,SAASC,WAAT,QAA4B,gBAA5B;AACA,SAASC,oBAAT,QAAqC,0BAArC;AACA,SAASC,QAAT,QAAyB,wBAAzB;;AAEA,IAAMC,KAAK,GAAG,SAARA,KAAQ,OAA2B;AAAA;;AAAA,MAAxBC,KAAwB,QAAxBA,KAAwB;AAAA,MAAjBC,UAAiB,QAAjBA,UAAiB;AACvC,MAAMC,QAAQ,GAAGN,WAAW,EAA5B;;AAEA,MAAMO,YAAY,GAAG,SAAfA,YAAe,CAACH,KAAD,EAAW;AAC9B,YAAQI,IAAI,CAACC,KAAL,CAAWL,KAAK,CAACM,QAAjB,EAA2BC,KAAnC;AACE,WAAK,UAAL;AACE,yBAAUH,IAAI,CAACC,KAAL,CAAWL,KAAK,CAACM,QAAjB,EAA2BE,IAArC;AACA;;AACF,WAAK,OAAL;AACE;AACA;;AACF,WAAK,MAAL;AACE,yBAAUJ,IAAI,CAACC,KAAL,CAAWL,KAAK,CAACM,QAAjB,EAA2BE,IAArC;AACA;;AACF;AACE;AAXJ;AAaD,GAdD;;AAgBA,MAAMC,gBAAgB,GAAGf,KAAK,CAACgB,WAAN;AAAA,yEAAkB,iBAAOC,MAAP;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAEvC;AACIX,cAAAA,MAHmC,GAG3BW,MAAM,CAACX,KAHoB;AAIvC,qBAAOW,MAAM,CAACX,KAAd;AAEIY,cAAAA,aANmC,GAMnBR,IAAI,CAACC,KAAL,CAAWL,MAAK,CAACC,UAAjB,EAA6BY,GAA7B,CAAiC,UAACC,GAAD,EAAS;AAC5D,oBAAIA,GAAG,CAACC,EAAJ,KAAWJ,MAAM,CAACI,EAAtB,EAA0B;AACxB,yBAAOD,GAAP;AACD,iBAFD,MAEO;AACL,yBAAOH,MAAP;AACD;AACF,eANmB,CANmB;AAcnCK,cAAAA,QAdmC,GAcxB;AACbD,gBAAAA,EAAE,EAAEf,MAAK,CAACe,EADG;AAEbd,gBAAAA,UAAU,EAAEG,IAAI,CAACa,SAAL,CAAeL,aAAf,CAFC;AAGbM,gBAAAA,QAAQ,EAAElB,MAAK,CAACkB;AAHH,eAdwB;AAoBvCC,cAAAA,OAAO,CAACC,GAAR,CAAYpB,MAAZ;AApBuC;AAAA,qBAsBhBF,QAAQ,CAACuB,WAAT,CAAqBL,QAArB,EAA+Bd,QAA/B,CAtBgB;;AAAA;AAsBjCoB,cAAAA,QAtBiC;AAuBvCH,cAAAA,OAAO,CAACC,GAAR,CAAYE,QAAZ;AAvBuC,+CAyBhCA,QAzBgC;;AAAA;AAAA;AAAA;AA2BvCH,cAAAA,OAAO,CAACC,GAAR;;AA3BuC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAlB;;AAAA;AAAA;AAAA;AAAA,OA6BtB,EA7BsB,CAAzB;AA+BAnB,EAAAA,UAAU,CAACY,GAAX,CAAe,UAACC,GAAD,EAAS;AACtBA,IAAAA,GAAG,CAACd,KAAJ,GAAYA,KAAZ;AACAc,IAAAA,GAAG,CAACN,IAAJ,GAAWL,YAAY,CAACH,KAAD,CAAvB;AACA,WAAOc,GAAP;AACD,GAJD;AAKA,sBACE,QAAC,QAAD;AACE,IAAA,IAAI,EAAEb,UADR;AAEE,IAAA,UAAU,EAAE,IAFd;AAGE,IAAA,OAAO,EAAEJ,oBAHX;AAIE,IAAA,uBAAuB,MAJzB;AAKE,IAAA,oBAAoB,EAAE;AAAE0B,MAAAA,aAAa,EAAE;AAAjB,KALxB;AAME,IAAA,gBAAgB,EAAEd;AANpB;AAAA;AAAA;AAAA;AAAA,WADF;AAUD,CAjED;;GAAMV,K;UACaH,W;;;KADbG,K;AAmEN,eAAeA,KAAf","sourcesContent":["import React from \"react\";\nimport { DataGrid } from \"@mui/x-data-grid\";\nimport { useDispatch } from \"../../../store\";\nimport { deliveryDetailsTable } from \"../../grids/grid-columns\";\nimport { orderApi } from \"../../../api/order-api\";\n\nconst Table = ({ order, deliveries }) => {\n  const dispatch = useDispatch();\n\n  const getOrderUnit = (order) => {\n    switch (JSON.parse(order.saleType).value) {\n      case \"quantity\":\n        return `${JSON.parse(order.saleType).unit}`;\n        break;\n      case \"fixed\":\n        return `(Fixed)`;\n        break;\n      case \"time\":\n        return `${JSON.parse(order.saleType).unit}`;\n        break;\n      default:\n        break;\n    }\n  };\n\n  const processRowUpdate = React.useCallback(async (newRow) => {\n    try {\n      // Make the HTTP request to save in the backend\n      let order = newRow.order;\n      delete newRow.order;\n\n      let newDeliveries = JSON.parse(order.deliveries).map((del) => {\n        if (del.id !== newRow.id) {\n          return del;\n        } else {\n          return newRow;\n        }\n      });\n\n      let newOrder = {\n        id: order.id,\n        deliveries: JSON.stringify(newDeliveries),\n        _version: order._version,\n      };\n\n      console.log(order);\n\n      const response = await orderApi.updateOrder(newOrder, dispatch);\n      console.log(response);\n\n      return response;\n    } catch (error) {\n      console.log(error);\n    }\n  }, []);\n\n  deliveries.map((del) => {\n    del.order = order;\n    del.unit = getOrderUnit(order);\n    return del;\n  });\n  return (\n    <DataGrid\n      rows={deliveries}\n      autoHeight={true}\n      columns={deliveryDetailsTable}\n      disableSelectionOnClick\n      experimentalFeatures={{ newEditingApi: true }}\n      processRowUpdate={processRowUpdate}\n    />\n  );\n};\n\nexport default Table;\n"]},"metadata":{},"sourceType":"module"}