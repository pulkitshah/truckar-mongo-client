{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/pulkitshah/Desktop/truckarv2/renderer/components/dashboard/autocompletes/PartyAutocomplete.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* eslint-disable no-use-before-define */\nimport React, { useState, useEffect, useCallback } from \"react\";\nimport clsx from \"clsx\";\nimport * as Yup from \"yup\";\nimport { Formik } from \"formik\";\nimport { useFormik } from \"formik\";\nimport { Box, Button, Card, CardContent, Dialog, DialogTitle, Divider, Grid, Switch, TextField, Typography } from \"@mui/material\";\nimport Autocomplete, { createFilterOptions } from \"@mui/material/Autocomplete\";\nimport GoogleMaps from \"../welcome/google-places-autocomplete\";\nimport { orderApi } from \"../../../api/order-api\";\nconst filter = createFilterOptions();\n\nconst FreeSoloCreateOptionDialog = (_ref) => {\n  let {\n    className,\n    touched,\n    setFieldValue,\n    errors,\n    handleBlur,\n    type,\n    values\n  } = _ref,\n      rest = _objectWithoutProperties(_ref, [\"className\", \"touched\", \"setFieldValue\", \"errors\", \"handleBlur\", \"type\", \"values\"]);\n\n  const [value, setValue] = React.useState(values && values[type]);\n  const [open, toggleOpen] = React.useState(false);\n  const {\n    0: parties,\n    1: setParties\n  } = useState([]);\n  const [dialogValue, setDialogValue] = React.useState({\n    name: \"\",\n    transporter: type !== \"customer\" ? true : false\n  });\n  const formik = useFormik({\n    initialValues: {\n      name: dialogValue.name || \"\",\n      mobile: dialogValue.mobile || \"\",\n      location: dialogValue.location || \"\",\n      transporter: dialogValue.transporter || \"\",\n      submit: null\n    },\n    validationSchema: Yup.object().shape({\n      name: Yup.string().max(255).required(\"Name is required\"),\n      mobile: Yup.string().matches(/^[6-9]\\d{9}$/, \"Phone number is not valid\").required(\"Mobile is required\")\n    }),\n    onSubmit: async (values, {\n      resetForm,\n      setErrors,\n      setStatus,\n      setSubmitting\n    }) => {\n      try {\n        // NOTE: Make API request\n        console.log(values);\n        const response = await axios.post(`/api/parties/`, _objectSpread({\n          name: values.name.replace(/\\w\\S*/g, function (txt) {\n            return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();\n          })\n        }, values));\n        setFieldValue(type, response.data); // dispatch(updateParty(party, values));\n\n        resetForm();\n        setStatus({\n          success: true\n        });\n        setSubmitting(false);\n        handleClose();\n      } catch (err) {\n        console.log(err);\n        setStatus({\n          success: false\n        });\n        setErrors({\n          submit: err.message\n        });\n        setSubmitting(false);\n      }\n    }\n  });\n  useEffect(async () => {\n    try {\n      const partiesDB = await orderApi.getPartiesByUser(user);\n      setParties(partiesDB.data.partiesByUser.items);\n    } catch (error) {\n      console.log(error);\n    }\n\n    if (!open) {\n      setParties([]);\n    }\n  }, [open]);\n\n  const handleClose = () => {\n    setDialogValue({\n      name: \"\",\n      transporter: type !== \"customer\" ? true : false\n    });\n    toggleOpen(false);\n  };\n\n  const handleSubmit = async event => {\n    event.preventDefault();\n    setValue({\n      name: dialogValue.name,\n      transporter: dialogValue.transporter\n    });\n\n    try {\n      // NOTE: Make API request\n      console.log(value);\n      const response = await axios.post(`/api/parties/`, {\n        name: dialogValue.name.replace(/\\w\\S*/g, function (txt) {\n          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();\n        }),\n        transporter: dialogValue.transporter\n      });\n      console.log(response.data);\n      setFieldValue(type, response.data);\n    } catch (err) {\n      console.error(err);\n    }\n\n    handleClose();\n  };\n\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Autocomplete, {\n      value: value,\n      onChange: (event, newValue) => {\n        if (typeof newValue === \"string\") {\n          // timeout to avoid instant validation of the dialog's form.\n          setTimeout(() => {\n            toggleOpen(true);\n            setDialogValue({\n              name: newValue.replace(/\\w\\S*/g, function (txt) {\n                return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();\n              }),\n              transporter: type !== \"customer\" ? true : false\n            });\n          });\n        } else if (newValue && newValue.inputValue) {\n          toggleOpen(true);\n          setDialogValue({\n            name: newValue.inputValue,\n            transporter: type !== \"customer\" ? true : false\n          });\n        } else {\n          setFieldValue(type, newValue);\n          setValue(newValue);\n        }\n      },\n      filterOptions: (options, params) => {\n        const filtered = filter(options, params);\n\n        if (params.inputValue !== \"\") {\n          filtered.push({\n            inputValue: params.inputValue,\n            name: `Add \"${params.inputValue}\"`\n          });\n        }\n\n        return filtered;\n      },\n      id: type,\n      options: parties,\n      getOptionLabel: option => {\n        // e.g value selected with enter, right from the input\n        if (typeof option === \"string\") {\n          return option.replace(/\\w\\S*/g, function (txt) {\n            return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();\n          });\n        }\n\n        if (option.inputValue) {\n          return option.inputValue.replace(/\\w\\S*/g, function (txt) {\n            return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();\n          });\n        }\n\n        return option.name.replace(/\\w\\S*/g, function (txt) {\n          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();\n        });\n      },\n      clearOnBlur: true,\n      handleHomeEndKeys: true,\n      renderOption: option => {\n        return /*#__PURE__*/_jsxDEV(React.Fragment, {\n          children: [option.name && option.name.replace(/\\w\\S*/g, function (txt) {\n            return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();\n          }), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 203,\n            columnNumber: 15\n          }, this), option.mobile && `(M) ${option.mobile.replace(/ /g, \"\")}`, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 205,\n            columnNumber: 15\n          }, this), option.location && `Location - ${option.location.structured_formatting.main_text}`, /*#__PURE__*/_jsxDEV(Divider, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 208,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 196,\n          columnNumber: 13\n        }, this);\n      },\n      fullWidth: true,\n      freeSolo: true,\n      renderInput: params => /*#__PURE__*/_jsxDEV(TextField, _objectSpread(_objectSpread({\n        onKeyPress: e => {\n          e.which === 13 && e.preventDefault();\n        }\n      }, params), {}, {\n        label: type.charAt(0).toUpperCase() + type.slice(1),\n        error: Boolean(type === \"customer\" ? touched.customer && errors.customer : touched.transporter && errors.transporter),\n        onBlur: handleBlur,\n        helperText: type === \"customer\" ? touched.customer && errors.customer : touched.transporter && errors.transporter,\n        variant: \"outlined\"\n      }), void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 215,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Dialog, {\n      open: open,\n      onClose: handleClose,\n      \"aria-labelledby\": \"form-dialog-name\",\n      children: /*#__PURE__*/_jsxDEV(\"form\", {\n        children: [/*#__PURE__*/_jsxDEV(DialogTitle, {\n          id: \"form-dialog-name\",\n          children: \"Add a new party\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 242,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"form\", _objectSpread(_objectSpread({\n          onSubmit: handleSubmit\n        }, rest), {}, {\n          children: /*#__PURE__*/_jsxDEV(Card, {\n            children: /*#__PURE__*/_jsxDEV(CardContent, {\n              children: [/*#__PURE__*/_jsxDEV(Grid, {\n                container: true,\n                spacing: 3,\n                children: [/*#__PURE__*/_jsxDEV(Grid, {\n                  item: true,\n                  xs: 12,\n                  children: /*#__PURE__*/_jsxDEV(TextField, {\n                    error: Boolean(touched.name && errors.name),\n                    fullWidth: true,\n                    helperText: touched.name && errors.name,\n                    label: \"Main Contact Name\",\n                    name: \"name\",\n                    onBlur: handleBlur,\n                    onChange: event => {\n                      setFieldValue(\"name\", event.target.value.replace(/\\w\\S*/g, function (txt) {\n                        return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();\n                      }));\n                    },\n                    required: true,\n                    value: formik.values.name,\n                    variant: \"outlined\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 248,\n                    columnNumber: 21\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 247,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(Grid, {\n                  item: true,\n                  xs: 12,\n                  children: /*#__PURE__*/_jsxDEV(TextField, {\n                    error: Boolean(touched.mobile && errors.mobile),\n                    fullWidth: true,\n                    helperText: touched.mobile && errors.mobile,\n                    label: \"Mobile\",\n                    name: \"mobile\",\n                    onBlur: handleBlur,\n                    onChange: event => {\n                      setFieldValue(\"mobile\", event.target.value.replace(/ /g, \"\"));\n                    },\n                    value: formik.values.mobile,\n                    variant: \"outlined\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 272,\n                    columnNumber: 21\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 271,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(Grid, {\n                  item: true,\n                  xs: 12,\n                  children: /*#__PURE__*/_jsxDEV(GoogleMaps, {\n                    name: \"location\",\n                    field: \"location\",\n                    formik: formik,\n                    error: Boolean(formik.touched.city && formik.errors.city),\n                    label: \"Your city in India\",\n                    setFieldValue: formik.setFieldValue,\n                    handleBlur: formik.handleBlur,\n                    values: formik.values\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 290,\n                    columnNumber: 21\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 289,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(Grid, {\n                  item: true,\n                  xs: 12,\n                  children: [/*#__PURE__*/_jsxDEV(Typography, {\n                    variant: \"h5\",\n                    color: \"textPrimary\",\n                    children: \"Party Type\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 302,\n                    columnNumber: 21\n                  }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                    variant: \"body2\",\n                    color: \"textSecondary\",\n                    children: \"Is this party a transporter?\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 305,\n                    columnNumber: 21\n                  }, this), /*#__PURE__*/_jsxDEV(Switch, {\n                    checked: formik.values.transporter,\n                    color: \"secondary\",\n                    edge: \"start\",\n                    name: \"transporter\",\n                    onChange: formik.handleChange,\n                    value: formik.values.transporter\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 308,\n                    columnNumber: 21\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 301,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 246,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Box, {\n                mt: 2,\n                children: /*#__PURE__*/_jsxDEV(Grid, {\n                  container: true,\n                  spacing: 3,\n                  children: [/*#__PURE__*/_jsxDEV(Grid, {\n                    item: true,\n                    children: /*#__PURE__*/_jsxDEV(Button, {\n                      variant: \"contained\",\n                      color: \"secondary\",\n                      type: \"submit\",\n                      disabled: formik.isSubmitting,\n                      children: \"Create Party\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 321,\n                      columnNumber: 23\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 320,\n                    columnNumber: 21\n                  }, this), /*#__PURE__*/_jsxDEV(Grid, {\n                    item: true,\n                    children: /*#__PURE__*/_jsxDEV(Button, {\n                      variant: \"contained\",\n                      color: \"secondary\",\n                      onClick: handleClose,\n                      children: \"Cancel\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 331,\n                      columnNumber: 23\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 330,\n                    columnNumber: 21\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 319,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 318,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 245,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 244,\n            columnNumber: 13\n          }, this)\n        }), void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 243,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 241,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 236,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 135,\n    columnNumber: 5\n  }, this);\n};\n\nexport default FreeSoloCreateOptionDialog;","map":{"version":3,"sources":["/Users/pulkitshah/Desktop/truckarv2/renderer/components/dashboard/autocompletes/PartyAutocomplete.js"],"names":["React","useState","useEffect","useCallback","clsx","Yup","Formik","useFormik","Box","Button","Card","CardContent","Dialog","DialogTitle","Divider","Grid","Switch","TextField","Typography","Autocomplete","createFilterOptions","GoogleMaps","orderApi","filter","FreeSoloCreateOptionDialog","className","touched","setFieldValue","errors","handleBlur","type","values","rest","value","setValue","open","toggleOpen","parties","setParties","dialogValue","setDialogValue","name","transporter","formik","initialValues","mobile","location","submit","validationSchema","object","shape","string","max","required","matches","onSubmit","resetForm","setErrors","setStatus","setSubmitting","console","log","response","axios","post","replace","txt","charAt","toUpperCase","substr","toLowerCase","data","success","handleClose","err","message","partiesDB","getPartiesByUser","user","partiesByUser","items","error","handleSubmit","event","preventDefault","newValue","setTimeout","inputValue","options","params","filtered","push","option","structured_formatting","main_text","e","which","slice","Boolean","customer","target","city","handleChange","isSubmitting"],"mappings":"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","sourcesContent":["/* eslint-disable no-use-before-define */\nimport React, { useState, useEffect, useCallback } from \"react\";\nimport clsx from \"clsx\";\nimport * as Yup from \"yup\";\nimport { Formik } from \"formik\";\nimport { useFormik } from \"formik\";\n\nimport {\n  Box,\n  Button,\n  Card,\n  CardContent,\n  Dialog,\n  DialogTitle,\n  Divider,\n  Grid,\n  Switch,\n  TextField,\n  Typography,\n} from \"@mui/material\";\nimport Autocomplete, { createFilterOptions } from \"@mui/material/Autocomplete\";\nimport GoogleMaps from \"../welcome/google-places-autocomplete\";\nimport { orderApi } from \"../../../api/order-api\";\n\nconst filter = createFilterOptions();\n\nconst FreeSoloCreateOptionDialog = ({\n  className,\n  touched,\n  setFieldValue,\n  errors,\n  handleBlur,\n  type,\n  values,\n  ...rest\n}) => {\n  const [value, setValue] = React.useState(values && values[type]);\n  const [open, toggleOpen] = React.useState(false);\n  const [parties, setParties] = useState([]);\n  const [dialogValue, setDialogValue] = React.useState({\n    name: \"\",\n    transporter: type !== \"customer\" ? true : false,\n  });\n\n  const formik = useFormik({\n    initialValues: {\n      name: dialogValue.name || \"\",\n      mobile: dialogValue.mobile || \"\",\n      location: dialogValue.location || \"\",\n      transporter: dialogValue.transporter || \"\",\n      submit: null,\n    },\n    validationSchema: Yup.object().shape({\n      name: Yup.string().max(255).required(\"Name is required\"),\n      mobile: Yup.string()\n        .matches(/^[6-9]\\d{9}$/, \"Phone number is not valid\")\n        .required(\"Mobile is required\"),\n    }),\n    onSubmit: async (\n      values,\n      { resetForm, setErrors, setStatus, setSubmitting }\n    ) => {\n      try {\n        // NOTE: Make API request\n        console.log(values);\n        const response = await axios.post(`/api/parties/`, {\n          name: values.name.replace(/\\w\\S*/g, function (txt) {\n            return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();\n          }),\n          ...values,\n        });\n        setFieldValue(type, response.data);\n        // dispatch(updateParty(party, values));\n        resetForm();\n        setStatus({ success: true });\n        setSubmitting(false);\n        handleClose();\n      } catch (err) {\n        console.log(err);\n        setStatus({ success: false });\n        setErrors({ submit: err.message });\n        setSubmitting(false);\n      }\n    },\n  });\n\n  useEffect(async () => {\n    try {\n      const partiesDB = await orderApi.getPartiesByUser(user);\n      setParties(partiesDB.data.partiesByUser.items);\n    } catch (error) {\n      console.log(error);\n    }\n\n    if (!open) {\n      setParties([]);\n    }\n  }, [open]);\n\n  const handleClose = () => {\n    setDialogValue({\n      name: \"\",\n      transporter: type !== \"customer\" ? true : false,\n    });\n\n    toggleOpen(false);\n  };\n\n  const handleSubmit = async (event) => {\n    event.preventDefault();\n    setValue({\n      name: dialogValue.name,\n      transporter: dialogValue.transporter,\n    });\n\n    try {\n      // NOTE: Make API request\n      console.log(value);\n      const response = await axios.post(`/api/parties/`, {\n        name: dialogValue.name.replace(/\\w\\S*/g, function (txt) {\n          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();\n        }),\n        transporter: dialogValue.transporter,\n      });\n      console.log(response.data);\n      setFieldValue(type, response.data);\n    } catch (err) {\n      console.error(err);\n    }\n\n    handleClose();\n  };\n\n  return (\n    <React.Fragment>\n      <Autocomplete\n        value={value}\n        onChange={(event, newValue) => {\n          if (typeof newValue === \"string\") {\n            // timeout to avoid instant validation of the dialog's form.\n            setTimeout(() => {\n              toggleOpen(true);\n              setDialogValue({\n                name: newValue.replace(/\\w\\S*/g, function (txt) {\n                  return (\n                    txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase()\n                  );\n                }),\n                transporter: type !== \"customer\" ? true : false,\n              });\n            });\n          } else if (newValue && newValue.inputValue) {\n            toggleOpen(true);\n            setDialogValue({\n              name: newValue.inputValue,\n              transporter: type !== \"customer\" ? true : false,\n            });\n          } else {\n            setFieldValue(type, newValue);\n            setValue(newValue);\n          }\n        }}\n        filterOptions={(options, params) => {\n          const filtered = filter(options, params);\n\n          if (params.inputValue !== \"\") {\n            filtered.push({\n              inputValue: params.inputValue,\n              name: `Add \"${params.inputValue}\"`,\n            });\n          }\n          return filtered;\n        }}\n        id={type}\n        options={parties}\n        getOptionLabel={(option) => {\n          // e.g value selected with enter, right from the input\n          if (typeof option === \"string\") {\n            return option.replace(/\\w\\S*/g, function (txt) {\n              return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();\n            });\n          }\n          if (option.inputValue) {\n            return option.inputValue.replace(/\\w\\S*/g, function (txt) {\n              return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();\n            });\n          }\n          return option.name.replace(/\\w\\S*/g, function (txt) {\n            return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();\n          });\n        }}\n        clearOnBlur\n        handleHomeEndKeys\n        renderOption={(option) => {\n          return (\n            <React.Fragment>\n              {option.name &&\n                option.name.replace(/\\w\\S*/g, function (txt) {\n                  return (\n                    txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase()\n                  );\n                })}\n              <br />\n              {option.mobile && `(M) ${option.mobile.replace(/ /g, \"\")}`}\n              <br />\n              {option.location &&\n                `Location - ${option.location.structured_formatting.main_text}`}\n              <Divider />\n            </React.Fragment>\n          );\n        }}\n        fullWidth\n        freeSolo\n        renderInput={(params) => (\n          <TextField\n            onKeyPress={(e) => {\n              e.which === 13 && e.preventDefault();\n            }}\n            {...params}\n            label={type.charAt(0).toUpperCase() + type.slice(1)}\n            error={Boolean(\n              type === \"customer\"\n                ? touched.customer && errors.customer\n                : touched.transporter && errors.transporter\n            )}\n            onBlur={handleBlur}\n            helperText={\n              type === \"customer\"\n                ? touched.customer && errors.customer\n                : touched.transporter && errors.transporter\n            }\n            variant=\"outlined\"\n          />\n        )}\n      />\n      <Dialog\n        open={open}\n        onClose={handleClose}\n        aria-labelledby=\"form-dialog-name\"\n      >\n        <form>\n          <DialogTitle id=\"form-dialog-name\">Add a new party</DialogTitle>\n          <form onSubmit={handleSubmit} {...rest}>\n            <Card>\n              <CardContent>\n                <Grid container spacing={3}>\n                  <Grid item xs={12}>\n                    <TextField\n                      error={Boolean(touched.name && errors.name)}\n                      fullWidth\n                      helperText={touched.name && errors.name}\n                      label=\"Main Contact Name\"\n                      name=\"name\"\n                      onBlur={handleBlur}\n                      onChange={(event) => {\n                        setFieldValue(\n                          \"name\",\n                          event.target.value.replace(/\\w\\S*/g, function (txt) {\n                            return (\n                              txt.charAt(0).toUpperCase() +\n                              txt.substr(1).toLowerCase()\n                            );\n                          })\n                        );\n                      }}\n                      required\n                      value={formik.values.name}\n                      variant=\"outlined\"\n                    />\n                  </Grid>\n                  <Grid item xs={12}>\n                    <TextField\n                      error={Boolean(touched.mobile && errors.mobile)}\n                      fullWidth\n                      helperText={touched.mobile && errors.mobile}\n                      label=\"Mobile\"\n                      name=\"mobile\"\n                      onBlur={handleBlur}\n                      onChange={(event) => {\n                        setFieldValue(\n                          \"mobile\",\n                          event.target.value.replace(/ /g, \"\")\n                        );\n                      }}\n                      value={formik.values.mobile}\n                      variant=\"outlined\"\n                    />\n                  </Grid>\n                  <Grid item xs={12}>\n                    <GoogleMaps\n                      name={\"location\"}\n                      field={\"location\"}\n                      formik={formik}\n                      error={Boolean(formik.touched.city && formik.errors.city)}\n                      label={\"Your city in India\"}\n                      setFieldValue={formik.setFieldValue}\n                      handleBlur={formik.handleBlur}\n                      values={formik.values}\n                    />\n                  </Grid>\n                  <Grid item xs={12}>\n                    <Typography variant=\"h5\" color=\"textPrimary\">\n                      Party Type\n                    </Typography>\n                    <Typography variant=\"body2\" color=\"textSecondary\">\n                      Is this party a transporter?\n                    </Typography>\n                    <Switch\n                      checked={formik.values.transporter}\n                      color=\"secondary\"\n                      edge=\"start\"\n                      name=\"transporter\"\n                      onChange={formik.handleChange}\n                      value={formik.values.transporter}\n                    />\n                  </Grid>\n                </Grid>\n                <Box mt={2}>\n                  <Grid container spacing={3}>\n                    <Grid item>\n                      <Button\n                        variant=\"contained\"\n                        color=\"secondary\"\n                        type=\"submit\"\n                        disabled={formik.isSubmitting}\n                      >\n                        Create Party\n                      </Button>\n                    </Grid>\n                    <Grid item>\n                      <Button\n                        variant=\"contained\"\n                        color=\"secondary\"\n                        onClick={handleClose}\n                      >\n                        Cancel\n                      </Button>\n                    </Grid>\n                  </Grid>\n                </Box>\n              </CardContent>\n            </Card>\n          </form>\n        </form>\n      </Dialog>\n    </React.Fragment>\n  );\n};\nexport default FreeSoloCreateOptionDialog;\n"]},"metadata":{},"sourceType":"module"}