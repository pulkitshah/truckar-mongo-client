{"ast":null,"code":"import { API } from \"aws-amplify\";\nimport { branchesByUser } from \"../graphql/queries\";\nimport { createBranch, updateBranch } from \"../graphql/mutations\";\nimport { Branch } from \"../models\";\nimport { DataStore, Predicates } from \"@aws-amplify/datastore\";\nimport moment from \"moment\";\nimport { slice } from \"../slices/branches\";\nconst now = new Date();\n\nclass BranchApi {\n  async getBranchesByUser(user, dispatch) {\n    try {\n      //////////////////////// GraphQL API ////////////////////////\n      // const response = await API.graphql({\n      //   query: branchesByUser,\n      //   variables: { user: user.id.toString() },\n      // });\n      // const branches = response.data.branchesByUser.items\n      //////////////////////// GraphQL API ////////////////////////\n      //////////////////////// DataStore API ////////////////////////\n      const branches = await DataStore.query(Branch, c => c.user(\"eq\", user.id)); //////////////////////// DataStore API ////////////////////////\n      // console.log(branches);\n      // Dispatch - Reducer\n\n      dispatch(slice.actions.getBranches(branches));\n      return branches;\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  async createBranch(newBranch, dispatch) {\n    const createdAt = moment().toISOString();\n    let newOrg = newBranch;\n    newOrg.createdAt = createdAt; //////////////////////// GraphQL API ////////////////////////\n\n    const response = await API.graphql({\n      query: createBranch,\n      variables: {\n        input: newOrg\n      },\n      authMode: \"AMAZON_COGNITO_USER_POOLS\"\n    });\n    const branch = response.data.createBranch; //////////////////////// GraphQL API ////////////////////////\n    //////////////////////// DataStore API ////////////////////////\n    // const branch = await DataStore.save(new Branch(newOrg));\n    //////////////////////// DataStore API ////////////////////////\n\n    console.log(branch); // Dispatch - Reducer\n\n    dispatch(slice.actions.createBranch({\n      branch\n    }));\n    return branch;\n  }\n\n  async updateBranch(editedBranch, dispatch) {\n    //////////////////////// GraphQL API ////////////////////////\n    const response = await API.graphql({\n      query: updateBranch,\n      variables: {\n        input: editedBranch\n      },\n      authMode: \"AMAZON_COGNITO_USER_POOLS\"\n    });\n    const branch = response.data.updateBranch; //////////////////////// GraphQL API ////////////////////////\n    // console.log(branch);\n    // Dispatch - Reducer\n\n    dispatch(slice.actions.updateBranch({\n      branch\n    }));\n    return response;\n  }\n\n}\n\nexport const branchApi = new BranchApi();","map":{"version":3,"sources":["/Users/pulkitshah/Desktop/truckarv2/renderer/api/branch-api.js"],"names":["API","branchesByUser","createBranch","updateBranch","Branch","DataStore","Predicates","moment","slice","now","Date","BranchApi","getBranchesByUser","user","dispatch","branches","query","c","id","actions","getBranches","error","console","log","newBranch","createdAt","toISOString","newOrg","response","graphql","variables","input","authMode","branch","data","editedBranch","branchApi"],"mappings":"AAAA,SAASA,GAAT,QAAoB,aAApB;AACA,SAASC,cAAT,QAA+B,oBAA/B;AACA,SAASC,YAAT,EAAuBC,YAAvB,QAA2C,sBAA3C;AACA,SAASC,MAAT,QAAuB,WAAvB;AACA,SAASC,SAAT,EAAoBC,UAApB,QAAsC,wBAAtC;AACA,OAAOC,MAAP,MAAmB,QAAnB;AACA,SAASC,KAAT,QAAsB,oBAAtB;AAEA,MAAMC,GAAG,GAAG,IAAIC,IAAJ,EAAZ;;AAEA,MAAMC,SAAN,CAAgB;AACd,QAAMC,iBAAN,CAAwBC,IAAxB,EAA8BC,QAA9B,EAAwC;AACtC,QAAI;AACF;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA,YAAMC,QAAQ,GAAG,MAAMV,SAAS,CAACW,KAAV,CAAgBZ,MAAhB,EAAyBa,CAAD,IAC7CA,CAAC,CAACJ,IAAF,CAAO,IAAP,EAAaA,IAAI,CAACK,EAAlB,CADqB,CAAvB,CAbE,CAiBF;AAEA;AAEA;;AAEAJ,MAAAA,QAAQ,CAACN,KAAK,CAACW,OAAN,CAAcC,WAAd,CAA0BL,QAA1B,CAAD,CAAR;AAEA,aAAOA,QAAP;AACD,KA1BD,CA0BE,OAAOM,KAAP,EAAc;AACdC,MAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACD;AACF;;AAED,QAAMnB,YAAN,CAAmBsB,SAAnB,EAA8BV,QAA9B,EAAwC;AACtC,UAAMW,SAAS,GAAGlB,MAAM,GAAGmB,WAAT,EAAlB;AACA,QAAIC,MAAM,GAAGH,SAAb;AACAG,IAAAA,MAAM,CAACF,SAAP,GAAmBA,SAAnB,CAHsC,CAKtC;;AAEA,UAAMG,QAAQ,GAAG,MAAM5B,GAAG,CAAC6B,OAAJ,CAAY;AACjCb,MAAAA,KAAK,EAAEd,YAD0B;AAEjC4B,MAAAA,SAAS,EAAE;AAAEC,QAAAA,KAAK,EAAEJ;AAAT,OAFsB;AAGjCK,MAAAA,QAAQ,EAAE;AAHuB,KAAZ,CAAvB;AAMA,UAAMC,MAAM,GAAGL,QAAQ,CAACM,IAAT,CAAchC,YAA7B,CAbsC,CAetC;AAEA;AAEA;AAEA;;AAEAoB,IAAAA,OAAO,CAACC,GAAR,CAAYU,MAAZ,EAvBsC,CAyBtC;;AAEAnB,IAAAA,QAAQ,CAACN,KAAK,CAACW,OAAN,CAAcjB,YAAd,CAA2B;AAAE+B,MAAAA;AAAF,KAA3B,CAAD,CAAR;AAEA,WAAOA,MAAP;AACD;;AAED,QAAM9B,YAAN,CAAmBgC,YAAnB,EAAiCrB,QAAjC,EAA2C;AACzC;AAEA,UAAMc,QAAQ,GAAG,MAAM5B,GAAG,CAAC6B,OAAJ,CAAY;AACjCb,MAAAA,KAAK,EAAEb,YAD0B;AAEjC2B,MAAAA,SAAS,EAAE;AAAEC,QAAAA,KAAK,EAAEI;AAAT,OAFsB;AAGjCH,MAAAA,QAAQ,EAAE;AAHuB,KAAZ,CAAvB;AAMA,UAAMC,MAAM,GAAGL,QAAQ,CAACM,IAAT,CAAc/B,YAA7B,CATyC,CAWzC;AAEA;AAEA;;AAEAW,IAAAA,QAAQ,CAACN,KAAK,CAACW,OAAN,CAAchB,YAAd,CAA2B;AAAE8B,MAAAA;AAAF,KAA3B,CAAD,CAAR;AAEA,WAAOL,QAAP;AACD;;AArFa;;AAwFhB,OAAO,MAAMQ,SAAS,GAAG,IAAIzB,SAAJ,EAAlB","sourcesContent":["import { API } from \"aws-amplify\";\nimport { branchesByUser } from \"../graphql/queries\";\nimport { createBranch, updateBranch } from \"../graphql/mutations\";\nimport { Branch } from \"../models\";\nimport { DataStore, Predicates } from \"@aws-amplify/datastore\";\nimport moment from \"moment\";\nimport { slice } from \"../slices/branches\";\n\nconst now = new Date();\n\nclass BranchApi {\n  async getBranchesByUser(user, dispatch) {\n    try {\n      //////////////////////// GraphQL API ////////////////////////\n\n      // const response = await API.graphql({\n      //   query: branchesByUser,\n      //   variables: { user: user.id.toString() },\n      // });\n      // const branches = response.data.branchesByUser.items\n\n      //////////////////////// GraphQL API ////////////////////////\n\n      //////////////////////// DataStore API ////////////////////////\n\n      const branches = await DataStore.query(Branch, (c) =>\n        c.user(\"eq\", user.id)\n      );\n\n      //////////////////////// DataStore API ////////////////////////\n\n      // console.log(branches);\n\n      // Dispatch - Reducer\n\n      dispatch(slice.actions.getBranches(branches));\n\n      return branches;\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  async createBranch(newBranch, dispatch) {\n    const createdAt = moment().toISOString();\n    let newOrg = newBranch;\n    newOrg.createdAt = createdAt;\n\n    //////////////////////// GraphQL API ////////////////////////\n\n    const response = await API.graphql({\n      query: createBranch,\n      variables: { input: newOrg },\n      authMode: \"AMAZON_COGNITO_USER_POOLS\",\n    });\n\n    const branch = response.data.createBranch;\n\n    //////////////////////// GraphQL API ////////////////////////\n\n    //////////////////////// DataStore API ////////////////////////\n\n    // const branch = await DataStore.save(new Branch(newOrg));\n\n    //////////////////////// DataStore API ////////////////////////\n\n    console.log(branch);\n\n    // Dispatch - Reducer\n\n    dispatch(slice.actions.createBranch({ branch }));\n\n    return branch;\n  }\n\n  async updateBranch(editedBranch, dispatch) {\n    //////////////////////// GraphQL API ////////////////////////\n\n    const response = await API.graphql({\n      query: updateBranch,\n      variables: { input: editedBranch },\n      authMode: \"AMAZON_COGNITO_USER_POOLS\",\n    });\n\n    const branch = response.data.updateBranch;\n\n    //////////////////////// GraphQL API ////////////////////////\n\n    // console.log(branch);\n\n    // Dispatch - Reducer\n\n    dispatch(slice.actions.updateBranch({ branch }));\n\n    return response;\n  }\n}\n\nexport const branchApi = new BranchApi();\n"]},"metadata":{},"sourceType":"module"}