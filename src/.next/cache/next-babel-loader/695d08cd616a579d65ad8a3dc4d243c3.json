{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/pulkitshah/Desktop/truckarv2/renderer/utils/customFormatters.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from \"react\";\nimport MaskedInput, { conformToMask } from \"react-text-mask\";\nimport PropTypes from \"prop-types\";\nexport function vehicleNumberFormatter(props) {\n  const {\n    inputRef\n  } = props,\n        other = _objectWithoutProperties(props, [\"inputRef\"]);\n\n  return /*#__PURE__*/_jsxDEV(MaskedInput, _objectSpread(_objectSpread({}, other), {}, {\n    ref: ref => {\n      inputRef(ref ? ref.inputElement : null);\n    },\n    mask: function (rawValue) {\n      let mask = false;\n      let b = rawValue.replace(/-/g, \"\");\n\n      if (b.length > 2 && b.charAt(2).match(/[A-Z]/i)) {\n        mask = [/[a-zA-Z]/, /[a-zA-Z]/, /[a-zA-Z]/, \"-\", /[0-9]/, /[0-9]/, /[0-9]/, /[0-9]/];\n      }\n\n      if (b.length > 3 && b.charAt(2).match(/[0-9]/i) && b.charAt(3).match(/[A-Z]/i) && b.charAt(4).match(/[0-9]/i)) {\n        mask = [/[a-zA-Z]/, /[a-zA-Z]/, \"-\", /[0-9]/, \"-\", /[a-zA-Z]/, \"-\", /[0-9]/, /[0-9]/, /[0-9]/, /[0-9]/];\n      }\n\n      if (b.length > 3 && b.charAt(2).match(/[0-9]/i) && b.charAt(3).match(/[A-Z]/i) && b.charAt(4).match(/[A-Z]/i)) {\n        mask = [/[a-zA-Z]/, /[a-zA-Z]/, \"-\", /[0-9]/, \"-\", /[a-zA-Z]/, /[a-zA-Z0-9]/, \"-\", /[0-9]/, /[0-9]/, /[0-9]/, /[0-9]/];\n      }\n\n      if (b.length > 4 && b.charAt(2).match(/[0-9]/i) && b.charAt(3).match(/[0-9]/i) && b.charAt(4).match(/[A-Z]/i) && b.charAt(5).match(/[0-9]/i)) {\n        mask = [/[a-zA-Z]/, /[a-zA-Z]/, \"-\", /[0-9]/, /[0-9]/, \"-\", /[a-zA-Z]/, \"-\", /[0-9]/, /[0-9]/, /[0-9]/, /[0-9]/];\n      }\n\n      if (mask) return mask;\n      return [/[a-zA-Z]/, /[a-zA-Z]/, \"-\", /[a-zA-Z0-9]/, /[a-zA-Z0-9]/, \"-\", /[a-zA-Z]/, /[a-zA-Z]/, \"-\", /[0-9]/, /[0-9]/, /[0-9]/, /[0-9]/];\n    },\n    guide: false //   keepCharPositions={true}\n\n  }), void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 8,\n    columnNumber: 5\n  }, this);\n}\nvehicleNumberFormatter.propTypes = {\n  inputRef: PropTypes.func.isRequired\n};","map":{"version":3,"sources":["/Users/pulkitshah/Desktop/truckarv2/renderer/utils/customFormatters.js"],"names":["React","MaskedInput","conformToMask","PropTypes","vehicleNumberFormatter","props","inputRef","other","ref","inputElement","rawValue","mask","b","replace","length","charAt","match","propTypes","func","isRequired"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport MaskedInput, { conformToMask } from \"react-text-mask\";\nimport PropTypes from \"prop-types\";\n\nexport function vehicleNumberFormatter(props) {\n  const { inputRef, ...other } = props;\n  return (\n    <MaskedInput\n      {...other}\n      ref={(ref) => {\n        inputRef(ref ? ref.inputElement : null);\n      }}\n      mask={function (rawValue) {\n        let mask = false;\n        let b = rawValue.replace(/-/g, \"\");\n        if (b.length > 2 && b.charAt(2).match(/[A-Z]/i)) {\n          mask = [\n            /[a-zA-Z]/,\n            /[a-zA-Z]/,\n            /[a-zA-Z]/,\n            \"-\",\n            /[0-9]/,\n            /[0-9]/,\n            /[0-9]/,\n            /[0-9]/,\n          ];\n        }\n        if (\n          b.length > 3 &&\n          b.charAt(2).match(/[0-9]/i) &&\n          b.charAt(3).match(/[A-Z]/i) &&\n          b.charAt(4).match(/[0-9]/i)\n        ) {\n          mask = [\n            /[a-zA-Z]/,\n            /[a-zA-Z]/,\n            \"-\",\n            /[0-9]/,\n            \"-\",\n            /[a-zA-Z]/,\n            \"-\",\n            /[0-9]/,\n            /[0-9]/,\n            /[0-9]/,\n            /[0-9]/,\n          ];\n        }\n\n        if (\n          b.length > 3 &&\n          b.charAt(2).match(/[0-9]/i) &&\n          b.charAt(3).match(/[A-Z]/i) &&\n          b.charAt(4).match(/[A-Z]/i)\n        ) {\n          mask = [\n            /[a-zA-Z]/,\n            /[a-zA-Z]/,\n            \"-\",\n            /[0-9]/,\n            \"-\",\n            /[a-zA-Z]/,\n            /[a-zA-Z0-9]/,\n            \"-\",\n            /[0-9]/,\n            /[0-9]/,\n            /[0-9]/,\n            /[0-9]/,\n          ];\n        }\n\n        if (\n          b.length > 4 &&\n          b.charAt(2).match(/[0-9]/i) &&\n          b.charAt(3).match(/[0-9]/i) &&\n          b.charAt(4).match(/[A-Z]/i) &&\n          b.charAt(5).match(/[0-9]/i)\n        ) {\n          mask = [\n            /[a-zA-Z]/,\n            /[a-zA-Z]/,\n            \"-\",\n            /[0-9]/,\n            /[0-9]/,\n            \"-\",\n            /[a-zA-Z]/,\n            \"-\",\n            /[0-9]/,\n            /[0-9]/,\n            /[0-9]/,\n            /[0-9]/,\n          ];\n        }\n        if (mask) return mask;\n        return [\n          /[a-zA-Z]/,\n          /[a-zA-Z]/,\n          \"-\",\n          /[a-zA-Z0-9]/,\n          /[a-zA-Z0-9]/,\n          \"-\",\n          /[a-zA-Z]/,\n          /[a-zA-Z]/,\n          \"-\",\n          /[0-9]/,\n          /[0-9]/,\n          /[0-9]/,\n          /[0-9]/,\n        ];\n      }}\n      guide={false}\n      //   keepCharPositions={true}\n    />\n  );\n}\n\nvehicleNumberFormatter.propTypes = {\n  inputRef: PropTypes.func.isRequired,\n};\n"]},"metadata":{},"sourceType":"module"}