{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/pulkitshah/Desktop/truckarv2/renderer/components/dashboard/branch/branch-drawer.js\";\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { useState, useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { useFormik } from \"formik\";\nimport toast from \"react-hot-toast\";\nimport { Box, Button, Divider, Drawer, IconButton, TextField, Typography, useMediaQuery } from \"@mui/material\";\nimport { styled } from \"@mui/material/styles\";\nimport EditIcon from \"@mui/icons-material/Edit\";\nimport { useDispatch } from \"../../../store\";\nimport { X as XIcon } from \"../../../icons/x\";\nimport { PropertyList } from \"../../property-list\";\nimport { PropertyListItem } from \"../../property-list-item\";\nimport { branchApi } from \"../../../api/branch-api\"; // import GoogleMaps from \"./google-places-autocomplete\";\n\nconst BranchPreview = props => {\n  const {\n    lgUp,\n    onEdit,\n    branch\n  } = props;\n  const align = lgUp ? \"horizontal\" : \"vertical\";\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        alignItems: \"center\",\n        borderRadius: 1,\n        display: \"flex\",\n        flexWrap: \"wrap\",\n        justifyContent: \"space-between\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        sx: {\n          mt: 3\n        },\n        variant: \"h6\",\n        children: \"Branch Details\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          alignItems: \"center\",\n          display: \"flex\",\n          flexWrap: \"wrap\",\n          mt: 3,\n          m: -1,\n          \"& > button\": {\n            m: 1\n          }\n        },\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          onClick: onEdit,\n          size: \"small\",\n          startIcon: /*#__PURE__*/_jsxDEV(EditIcon, {\n            fontSize: \"small\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 57,\n            columnNumber: 24\n          }, this),\n          sx: {\n            pt: 3\n          },\n          children: \"Edit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Divider, {\n      sx: {\n        my: 3\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(PropertyList, {\n      children: [/*#__PURE__*/_jsxDEV(PropertyListItem, {\n        align: align,\n        disableGutters: true,\n        label: \"Branch Name\",\n        value: branch.branchName\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(PropertyListItem, {\n        align: align,\n        disableGutters: true,\n        label: \"City\",\n        value: JSON.parse(branch.city).description\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\nconst BranchForm = props => {\n  const {\n    onCancel,\n    branch\n  } = props;\n  const dispatch = useDispatch();\n  const formik = useFormik({\n    initialValues: {\n      branchName: branch.branchName,\n      city: JSON.parse(branch.city),\n      branchType: \"main\",\n      submit: null,\n      _version: branch._version\n    },\n    // validationSchema: Yup.object({\n    //   name: Yup.string().max(255).required(\"Name is required\"),\n    //   initials: Yup.string().max(255).required(\"Required\"),\n    //   addressLine1: Yup.string()\n    //     .max(255)\n    //     .required(\"Address Line 1 is required\"),\n    //   city: Yup.string().max(255).required(\"City is required\"),\n    //   pincode: Yup.string().max(255).required(\"Pincode is required\"),\n    //   gstin: Yup.string()\n    //     .trim()\n    //     .matches(\n    //       /^([0-9]){2}([a-zA-Z]){5}([0-9]){4}([a-zA-Z]){1}([0-9]){1}([a-zA-Z]){1}([0-9]){1}?$/,\n    //       \"Invalid GST Number\"\n    //     ),\n    //   pan: Yup.string().max(255).required(\"PAN is required\"),\n    //   jurisdiction: Yup.string().max(255).required(\"Jurisdiction is required\"),\n    // }),\n    onSubmit: async (values, helpers) => {\n      try {\n        // NOTE: Make API request\n        await branchApi.updateBranch(values, dispatch);\n        toast.success(\"Branch updated!\");\n        onCancel();\n      } catch (err) {\n        console.error(err);\n        toast.error(\"Something went wrong!\");\n        helpers.setStatus({\n          success: false\n        });\n        helpers.setErrors({\n          submit: err.message\n        });\n        helpers.setSubmitting(false);\n      }\n    }\n  });\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"form\", _objectSpread(_objectSpread({\n      onSubmit: formik.handleSubmit\n    }, props), {}, {\n      children: [/*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          alignItems: \"center\",\n          backgroundColor: theme => theme.palette.mode === \"dark\" ? \"neutral.800\" : \"neutral.100\",\n          bbranchRadius: 1,\n          display: \"flex\",\n          flexWrap: \"wrap\",\n          justifyContent: \"space-between\",\n          px: 3,\n          py: 2.5\n        },\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"overline\",\n          sx: {\n            mr: 2\n          },\n          color: \"textSecondary\",\n          children: \"Branch\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 148,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Box, {\n          sx: {\n            alignItems: \"center\",\n            display: \"flex\",\n            m: -1,\n            \"& > button\": {\n              m: 1\n            }\n          },\n          children: [/*#__PURE__*/_jsxDEV(Button, {\n            color: \"primary\",\n            type: \"submit\",\n            size: \"small\",\n            variant: \"contained\",\n            children: \"Save changes\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 161,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            onClick: onCancel,\n            size: \"small\",\n            variant: \"outlined\",\n            children: \"Cancel\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 169,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 151,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        sx: {\n          my: 3\n        },\n        variant: \"h6\",\n        children: \"Details\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TextField, {\n        margin: \"normal\",\n        error: Boolean(formik.touched.branchName && formik.errors.branchName),\n        fullWidth: true,\n        helperText: formik.touched.branchName && formik.errors.branchName,\n        label: \"Your branch name\",\n        name: \"branchName\",\n        onBlur: formik.handleBlur,\n        onChange: formik.handleChange,\n        value: formik.values.branchName\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        color: \"error\",\n        sx: {\n          mt: 3\n        },\n        children: \"Delete branch\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 9\n      }, this)]\n    }), void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n\nconst BranchDrawerDesktop = styled(Drawer)({\n  width: 500,\n  flexShrink: 0,\n  \"& .MuiDrawer-paper\": {\n    position: \"relative\",\n    width: 500\n  }\n});\nconst BranchDrawerMobile = styled(Drawer)({\n  flexShrink: 0,\n  maxWidth: \"100%\",\n  height: \"calc(100% - 64px)\",\n  width: 500,\n  \"& .MuiDrawer-paper\": {\n    height: \"calc(100% - 64px)\",\n    maxWidth: \"100%\",\n    top: 64,\n    width: 500\n  }\n});\nexport const BranchDrawer = props => {\n  const {\n    containerRef,\n    onClose,\n    open,\n    branch\n  } = props,\n        other = _objectWithoutProperties(props, [\"containerRef\", \"onClose\", \"open\", \"branch\"]);\n\n  const {\n    0: isEditing,\n    1: setIsEditing\n  } = useState(false);\n  const lgUp = useMediaQuery(theme => theme.breakpoints.up(\"lg\"));\n\n  const handleEdit = () => {\n    setIsEditing(true);\n  };\n\n  const handleCancel = () => {\n    setIsEditing(false);\n  }; // The reason for doing this, is that the persistent drawer has to be rendered, but not it's\n  // content if an branch is not passed.\n\n\n  const content = branch ? /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        alignItems: \"center\",\n        backgroundColor: \"primary.main\",\n        color: \"primary.contrastText\",\n        display: \"flex\",\n        justifyContent: \"space-between\",\n        px: 3,\n        py: 2\n      },\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        color: \"inherit\",\n        variant: \"h6\",\n        children: branch.number\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 257,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(IconButton, {\n        color: \"inherit\",\n        onClick: onClose,\n        children: /*#__PURE__*/_jsxDEV(XIcon, {\n          fontSize: \"small\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 261,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 260,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 246,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        px: 3,\n        py: 4\n      },\n      children: !isEditing ? /*#__PURE__*/_jsxDEV(BranchPreview, {\n        onApprove: onClose,\n        onEdit: handleEdit,\n        onReject: onClose,\n        branch: branch,\n        lgUp: lgUp\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 271,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(BranchForm, {\n        onCancel: handleCancel,\n        branch: branch\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 279,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 264,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true) : null;\n\n  if (lgUp) {\n    return /*#__PURE__*/_jsxDEV(BranchDrawerDesktop, _objectSpread(_objectSpread({\n      anchor: \"right\",\n      open: open,\n      SlideProps: {\n        container: containerRef === null || containerRef === void 0 ? void 0 : containerRef.current\n      },\n      variant: \"persistent\"\n    }, other), {}, {\n      children: content\n    }), void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 287,\n      columnNumber: 7\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(BranchDrawerMobile, _objectSpread(_objectSpread({\n    anchor: \"right\",\n    ModalProps: {\n      container: containerRef === null || containerRef === void 0 ? void 0 : containerRef.current\n    },\n    onClose: onClose,\n    open: open,\n    SlideProps: {\n      container: containerRef === null || containerRef === void 0 ? void 0 : containerRef.current\n    },\n    variant: \"temporary\"\n  }, other), {}, {\n    children: content\n  }), void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 300,\n    columnNumber: 5\n  }, this);\n};\nBranchDrawer.propTypes = {\n  containerRef: PropTypes.any,\n  onClose: PropTypes.func,\n  open: PropTypes.bool,\n  branch: PropTypes.object\n};","map":{"version":3,"sources":["/Users/pulkitshah/Desktop/truckarv2/renderer/components/dashboard/branch/branch-drawer.js"],"names":["useState","useEffect","PropTypes","useFormik","toast","Box","Button","Divider","Drawer","IconButton","TextField","Typography","useMediaQuery","styled","EditIcon","useDispatch","X","XIcon","PropertyList","PropertyListItem","branchApi","BranchPreview","props","lgUp","onEdit","branch","align","alignItems","borderRadius","display","flexWrap","justifyContent","mt","m","pt","my","branchName","JSON","parse","city","description","BranchForm","onCancel","dispatch","formik","initialValues","branchType","submit","_version","onSubmit","values","helpers","updateBranch","success","err","console","error","setStatus","setErrors","message","setSubmitting","handleSubmit","backgroundColor","theme","palette","mode","bbranchRadius","px","py","mr","Boolean","touched","errors","handleBlur","handleChange","BranchDrawerDesktop","width","flexShrink","position","BranchDrawerMobile","maxWidth","height","top","BranchDrawer","containerRef","onClose","open","other","isEditing","setIsEditing","breakpoints","up","handleEdit","handleCancel","content","color","number","container","current","propTypes","any","func","bool","object"],"mappings":"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","sourcesContent":["import { useState, useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { useFormik } from \"formik\";\nimport toast from \"react-hot-toast\";\nimport {\n  Box,\n  Button,\n  Divider,\n  Drawer,\n  IconButton,\n  TextField,\n  Typography,\n  useMediaQuery,\n} from \"@mui/material\";\nimport { styled } from \"@mui/material/styles\";\nimport EditIcon from \"@mui/icons-material/Edit\";\nimport { useDispatch } from \"../../../store\";\nimport { X as XIcon } from \"../../../icons/x\";\nimport { PropertyList } from \"../../property-list\";\nimport { PropertyListItem } from \"../../property-list-item\";\nimport { branchApi } from \"../../../api/branch-api\";\n// import GoogleMaps from \"./google-places-autocomplete\";\n\nconst BranchPreview = (props) => {\n  const { lgUp, onEdit, branch } = props;\n  const align = lgUp ? \"horizontal\" : \"vertical\";\n\n  return (\n    <>\n      <Box\n        sx={{\n          alignItems: \"center\",\n          borderRadius: 1,\n          display: \"flex\",\n          flexWrap: \"wrap\",\n          justifyContent: \"space-between\",\n        }}\n      >\n        <Typography sx={{ mt: 3 }} variant=\"h6\">\n          Branch Details\n        </Typography>\n        <Box\n          sx={{\n            alignItems: \"center\",\n            display: \"flex\",\n            flexWrap: \"wrap\",\n            mt: 3,\n            m: -1,\n            \"& > button\": {\n              m: 1,\n            },\n          }}\n        >\n          <Button\n            onClick={onEdit}\n            size=\"small\"\n            startIcon={<EditIcon fontSize=\"small\" />}\n            sx={{ pt: 3 }}\n          >\n            Edit\n          </Button>\n        </Box>\n      </Box>\n      <Divider sx={{ my: 3 }} />\n\n      <PropertyList>\n        <PropertyListItem\n          align={align}\n          disableGutters\n          label=\"Branch Name\"\n          value={branch.branchName}\n        />\n\n        <PropertyListItem\n          align={align}\n          disableGutters\n          label=\"City\"\n          value={JSON.parse(branch.city).description}\n        />\n      </PropertyList>\n    </>\n  );\n};\n\nconst BranchForm = (props) => {\n  const { onCancel, branch } = props;\n  const dispatch = useDispatch();\n\n  const formik = useFormik({\n    initialValues: {\n      branchName: branch.branchName,\n      city: JSON.parse(branch.city),\n      branchType: \"main\",\n      submit: null,\n      _version: branch._version,\n    },\n    // validationSchema: Yup.object({\n    //   name: Yup.string().max(255).required(\"Name is required\"),\n    //   initials: Yup.string().max(255).required(\"Required\"),\n    //   addressLine1: Yup.string()\n    //     .max(255)\n    //     .required(\"Address Line 1 is required\"),\n    //   city: Yup.string().max(255).required(\"City is required\"),\n    //   pincode: Yup.string().max(255).required(\"Pincode is required\"),\n    //   gstin: Yup.string()\n    //     .trim()\n    //     .matches(\n    //       /^([0-9]){2}([a-zA-Z]){5}([0-9]){4}([a-zA-Z]){1}([0-9]){1}([a-zA-Z]){1}([0-9]){1}?$/,\n    //       \"Invalid GST Number\"\n    //     ),\n    //   pan: Yup.string().max(255).required(\"PAN is required\"),\n    //   jurisdiction: Yup.string().max(255).required(\"Jurisdiction is required\"),\n    // }),\n    onSubmit: async (values, helpers) => {\n      try {\n        // NOTE: Make API request\n        await branchApi.updateBranch(values, dispatch);\n\n        toast.success(\"Branch updated!\");\n\n        onCancel();\n      } catch (err) {\n        console.error(err);\n        toast.error(\"Something went wrong!\");\n        helpers.setStatus({ success: false });\n        helpers.setErrors({ submit: err.message });\n        helpers.setSubmitting(false);\n      }\n    },\n  });\n\n  return (\n    <>\n      <form onSubmit={formik.handleSubmit} {...props}>\n        <Box\n          sx={{\n            alignItems: \"center\",\n            backgroundColor: (theme) =>\n              theme.palette.mode === \"dark\" ? \"neutral.800\" : \"neutral.100\",\n            bbranchRadius: 1,\n            display: \"flex\",\n            flexWrap: \"wrap\",\n            justifyContent: \"space-between\",\n            px: 3,\n            py: 2.5,\n          }}\n        >\n          <Typography variant=\"overline\" sx={{ mr: 2 }} color=\"textSecondary\">\n            Branch\n          </Typography>\n          <Box\n            sx={{\n              alignItems: \"center\",\n              display: \"flex\",\n              m: -1,\n              \"& > button\": {\n                m: 1,\n              },\n            }}\n          >\n            <Button\n              color=\"primary\"\n              type=\"submit\"\n              size=\"small\"\n              variant=\"contained\"\n            >\n              Save changes\n            </Button>\n            <Button onClick={onCancel} size=\"small\" variant=\"outlined\">\n              Cancel\n            </Button>\n          </Box>\n        </Box>\n\n        <Typography sx={{ my: 3 }} variant=\"h6\">\n          Details\n        </Typography>\n\n        {/* <GoogleMaps\n          formik={formik}\n          error={Boolean(formik.touched.city && formik.errors.city)}\n          label={\"Your city in India\"}\n          field={\"city\"}\n          setFieldValue={formik.setFieldValue}\n          handleBlur={formik.handleBlur}\n          values={formik.values}\n        /> */}\n        <TextField\n          margin=\"normal\"\n          error={Boolean(formik.touched.branchName && formik.errors.branchName)}\n          fullWidth\n          helperText={formik.touched.branchName && formik.errors.branchName}\n          label=\"Your branch name\"\n          name=\"branchName\"\n          onBlur={formik.handleBlur}\n          onChange={formik.handleChange}\n          value={formik.values.branchName}\n        />\n        <Button color=\"error\" sx={{ mt: 3 }}>\n          Delete branch\n        </Button>\n      </form>\n    </>\n  );\n};\n\nconst BranchDrawerDesktop = styled(Drawer)({\n  width: 500,\n  flexShrink: 0,\n  \"& .MuiDrawer-paper\": {\n    position: \"relative\",\n    width: 500,\n  },\n});\n\nconst BranchDrawerMobile = styled(Drawer)({\n  flexShrink: 0,\n  maxWidth: \"100%\",\n  height: \"calc(100% - 64px)\",\n  width: 500,\n  \"& .MuiDrawer-paper\": {\n    height: \"calc(100% - 64px)\",\n    maxWidth: \"100%\",\n    top: 64,\n    width: 500,\n  },\n});\n\nexport const BranchDrawer = (props) => {\n  const { containerRef, onClose, open, branch, ...other } = props;\n  const [isEditing, setIsEditing] = useState(false);\n  const lgUp = useMediaQuery((theme) => theme.breakpoints.up(\"lg\"));\n\n  const handleEdit = () => {\n    setIsEditing(true);\n  };\n\n  const handleCancel = () => {\n    setIsEditing(false);\n  };\n\n  // The reason for doing this, is that the persistent drawer has to be rendered, but not it's\n  // content if an branch is not passed.\n  const content = branch ? (\n    <>\n      <Box\n        sx={{\n          alignItems: \"center\",\n          backgroundColor: \"primary.main\",\n          color: \"primary.contrastText\",\n          display: \"flex\",\n          justifyContent: \"space-between\",\n          px: 3,\n          py: 2,\n        }}\n      >\n        <Typography color=\"inherit\" variant=\"h6\">\n          {branch.number}\n        </Typography>\n        <IconButton color=\"inherit\" onClick={onClose}>\n          <XIcon fontSize=\"small\" />\n        </IconButton>\n      </Box>\n      <Box\n        sx={{\n          px: 3,\n          py: 4,\n        }}\n      >\n        {!isEditing ? (\n          <BranchPreview\n            onApprove={onClose}\n            onEdit={handleEdit}\n            onReject={onClose}\n            branch={branch}\n            lgUp={lgUp}\n          />\n        ) : (\n          <BranchForm onCancel={handleCancel} branch={branch} />\n        )}\n      </Box>\n    </>\n  ) : null;\n\n  if (lgUp) {\n    return (\n      <BranchDrawerDesktop\n        anchor=\"right\"\n        open={open}\n        SlideProps={{ container: containerRef?.current }}\n        variant=\"persistent\"\n        {...other}\n      >\n        {content}\n      </BranchDrawerDesktop>\n    );\n  }\n\n  return (\n    <BranchDrawerMobile\n      anchor=\"right\"\n      ModalProps={{ container: containerRef?.current }}\n      onClose={onClose}\n      open={open}\n      SlideProps={{ container: containerRef?.current }}\n      variant=\"temporary\"\n      {...other}\n    >\n      {content}\n    </BranchDrawerMobile>\n  );\n};\n\nBranchDrawer.propTypes = {\n  containerRef: PropTypes.any,\n  onClose: PropTypes.func,\n  open: PropTypes.bool,\n  branch: PropTypes.object,\n};\n"]},"metadata":{},"sourceType":"module"}