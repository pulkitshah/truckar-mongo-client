{"ast":null,"code":"import { API } from \"aws-amplify\";\nimport { vehiclesByUser } from \"../graphql/queries\";\nimport { createVehicle, updateVehicle } from \"../graphql/mutations\";\nimport { Vehicle } from \"../models\";\nimport { DataStore, Predicates } from \"@aws-amplify/datastore\";\nimport moment from \"moment\";\nimport { slice } from \"../slices/vehicles\";\nconst now = new Date();\n\nclass VehicleApi {\n  async getVehiclesByUser(user, dispatch) {\n    try {\n      //////////////////////// GraphQL API ////////////////////////\n      const response = await API.graphql({\n        query: vehiclesByUser,\n        variables: {\n          user: user.id.toString()\n        }\n      });\n      const vehicles = response.data.vehiclesByUser.items; //////////////////////// GraphQL API ////////////////////////\n      //////////////////////// DataStore API ////////////////////////\n      // const vehicles = await DataStore.query(Vehicle, (c) =>\n      //   c.user(\"eq\", user.id)\n      // );\n      //////////////////////// DataStore API ////////////////////////\n      // console.log(vehicles);\n      // Dispatch - Reducer\n\n      dispatch(slice.actions.getVehicles(vehicles));\n      return vehicles;\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  async createVehicle(newVehicle, dispatch) {\n    const createdAt = moment().toISOString();\n    let newOrg = newVehicle;\n    newOrg.createdAt = createdAt; //////////////////////// GraphQL API ////////////////////////\n\n    const response = await API.graphql({\n      query: createVehicle,\n      variables: {\n        input: newOrg\n      },\n      authMode: \"AMAZON_COGNITO_USER_POOLS\"\n    });\n    const vehicle = response.data.createVehicle; //////////////////////// GraphQL API ////////////////////////\n    //////////////////////// DataStore API ////////////////////////\n    // const vehicle = await DataStore.save(new Vehicle(newOrg));\n    //////////////////////// DataStore API ////////////////////////\n\n    console.log(vehicle); // Dispatch - Reducer\n\n    dispatch(slice.actions.createVehicle({\n      vehicle\n    }));\n    return vehicle;\n  }\n\n  async updateVehicle(editedVehicle, dispatch) {\n    //////////////////////// GraphQL API ////////////////////////\n    const response = await API.graphql({\n      query: updateVehicle,\n      variables: {\n        input: editedVehicle\n      },\n      authMode: \"AMAZON_COGNITO_USER_POOLS\"\n    });\n    const vehicle = response.data.updateVehicle; //////////////////////// GraphQL API ////////////////////////\n    // console.log(vehicle);\n    // Dispatch - Reducer\n\n    dispatch(slice.actions.updateVehicle({\n      vehicle\n    }));\n    return response;\n  }\n\n  async validateDuplicateVehicleNumber(vehicleNumber, user) {\n    const response = await API.graphql({\n      query: vehiclesByUser,\n      variables: {\n        user: user.id.toString()\n      }\n    });\n    const vehicles = response.data.vehiclesByUser.items;\n    const vehicle = vehicles.find(vehicle => {\n      return vehicle.vehicleNumber === vehicleNumber;\n    });\n    return Boolean(!vehicle);\n  }\n\n}\n\nexport const vehicleApi = new VehicleApi();","map":{"version":3,"sources":["/Users/pulkitshah/Desktop/truckarv2/renderer/api/vehicle-api.js"],"names":["API","vehiclesByUser","createVehicle","updateVehicle","Vehicle","DataStore","Predicates","moment","slice","now","Date","VehicleApi","getVehiclesByUser","user","dispatch","response","graphql","query","variables","id","toString","vehicles","data","items","actions","getVehicles","error","console","log","newVehicle","createdAt","toISOString","newOrg","input","authMode","vehicle","editedVehicle","validateDuplicateVehicleNumber","vehicleNumber","find","Boolean","vehicleApi"],"mappings":"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","sourcesContent":["import { API } from \"aws-amplify\";\nimport { vehiclesByUser } from \"../graphql/queries\";\nimport { createVehicle, updateVehicle } from \"../graphql/mutations\";\nimport { Vehicle } from \"../models\";\nimport { DataStore, Predicates } from \"@aws-amplify/datastore\";\nimport moment from \"moment\";\nimport { slice } from \"../slices/vehicles\";\n\nconst now = new Date();\n\nclass VehicleApi {\n  async getVehiclesByUser(user, dispatch) {\n    try {\n      //////////////////////// GraphQL API ////////////////////////\n\n      const response = await API.graphql({\n        query: vehiclesByUser,\n        variables: { user: user.id.toString() },\n      });\n      const vehicles = response.data.vehiclesByUser.items;\n\n      //////////////////////// GraphQL API ////////////////////////\n\n      //////////////////////// DataStore API ////////////////////////\n\n      // const vehicles = await DataStore.query(Vehicle, (c) =>\n      //   c.user(\"eq\", user.id)\n      // );\n\n      //////////////////////// DataStore API ////////////////////////\n\n      // console.log(vehicles);\n\n      // Dispatch - Reducer\n\n      dispatch(slice.actions.getVehicles(vehicles));\n\n      return vehicles;\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  async createVehicle(newVehicle, dispatch) {\n    const createdAt = moment().toISOString();\n    let newOrg = newVehicle;\n    newOrg.createdAt = createdAt;\n\n    //////////////////////// GraphQL API ////////////////////////\n\n    const response = await API.graphql({\n      query: createVehicle,\n      variables: { input: newOrg },\n      authMode: \"AMAZON_COGNITO_USER_POOLS\",\n    });\n\n    const vehicle = response.data.createVehicle;\n\n    //////////////////////// GraphQL API ////////////////////////\n\n    //////////////////////// DataStore API ////////////////////////\n\n    // const vehicle = await DataStore.save(new Vehicle(newOrg));\n\n    //////////////////////// DataStore API ////////////////////////\n\n    console.log(vehicle);\n\n    // Dispatch - Reducer\n\n    dispatch(slice.actions.createVehicle({ vehicle }));\n\n    return vehicle;\n  }\n\n  async updateVehicle(editedVehicle, dispatch) {\n    //////////////////////// GraphQL API ////////////////////////\n\n    const response = await API.graphql({\n      query: updateVehicle,\n      variables: { input: editedVehicle },\n      authMode: \"AMAZON_COGNITO_USER_POOLS\",\n    });\n\n    const vehicle = response.data.updateVehicle;\n\n    //////////////////////// GraphQL API ////////////////////////\n\n    // console.log(vehicle);\n\n    // Dispatch - Reducer\n\n    dispatch(slice.actions.updateVehicle({ vehicle }));\n\n    return response;\n  }\n\n  async validateDuplicateVehicleNumber(vehicleNumber, user) {\n    const response = await API.graphql({\n      query: vehiclesByUser,\n      variables: { user: user.id.toString() },\n    });\n    const vehicles = response.data.vehiclesByUser.items;\n    const vehicle = vehicles.find((vehicle) => {\n      return vehicle.vehicleNumber === vehicleNumber;\n    });\n    return Boolean(!vehicle);\n  }\n}\n\nexport const vehicleApi = new VehicleApi();\n"]},"metadata":{},"sourceType":"module"}