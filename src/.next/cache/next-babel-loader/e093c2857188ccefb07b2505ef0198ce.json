{"ast":null,"code":"import _defineProperty from \"/Users/pulkitshah/Desktop/truckarv2/node_modules/next/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _regeneratorRuntime from \"/Users/pulkitshah/Desktop/truckarv2/node_modules/next/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/pulkitshah/Desktop/truckarv2/node_modules/next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/pulkitshah/Desktop/truckarv2/node_modules/next/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/pulkitshah/Desktop/truckarv2/node_modules/next/node_modules/@babel/runtime/helpers/esm/createClass\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { API } from \"aws-amplify\";\nimport { addressesByParty } from \"../graphql/queries\";\nimport { createAddress as _createAddress, updateAddress as _updateAddress } from \"../graphql/mutations\";\nimport { Address } from \"../models\";\nimport { DataStore, Predicates } from \"@aws-amplify/datastore\";\nimport moment from \"moment\";\nimport { slice } from \"../slices/addresses\";\nvar now = new Date();\n\nvar AddressApi = /*#__PURE__*/function () {\n  function AddressApi() {\n    _classCallCheck(this, AddressApi);\n  }\n\n  _createClass(AddressApi, [{\n    key: \"getAddressesByUser\",\n    value: function () {\n      var _getAddressesByUser = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(user, party, dispatch) {\n        var addresses;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.prev = 0;\n                //////////////////////// GraphQL API ////////////////////////\n                console.log(party.id.toString()); // const response = await API.graphql({\n                //   query: addressesByParty,\n                //   variables: { partyId: party.id.toString() },\n                // });\n                // const addresses = response.data.addressesByParty.items;\n                //////////////////////// GraphQL API ////////////////////////\n                //////////////////////// DataStore API ////////////////////////\n\n                _context.next = 4;\n                return DataStore.query(Address, function (c) {\n                  return c.user(\"eq\", user.id);\n                });\n\n              case 4:\n                addresses = _context.sent;\n                //////////////////////// DataStore API ////////////////////////\n                console.log(addresses); // Dispatch - Reducer\n\n                dispatch(slice.actions.getAddresses(addresses));\n                return _context.abrupt(\"return\", addresses);\n\n              case 10:\n                _context.prev = 10;\n                _context.t0 = _context[\"catch\"](0);\n                console.log(_context.t0);\n\n              case 13:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, null, [[0, 10]]);\n      }));\n\n      function getAddressesByUser(_x, _x2, _x3) {\n        return _getAddressesByUser.apply(this, arguments);\n      }\n\n      return getAddressesByUser;\n    }()\n  }, {\n    key: \"createAddress\",\n    value: function () {\n      var _createAddress2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(createdAddress, dispatch) {\n        var createdAt, newAddress, response, address;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                createdAt = moment().toISOString();\n                newAddress = _objectSpread({}, createdAddress);\n                newAddress.createdAt = createdAt;\n                console.log(newAddress); //////////////////////// GraphQL API ////////////////////////\n\n                _context2.next = 6;\n                return API.graphql({\n                  query: _createAddress,\n                  variables: {\n                    input: newAddress\n                  },\n                  authMode: \"AMAZON_COGNITO_USER_POOLS\"\n                });\n\n              case 6:\n                response = _context2.sent;\n                address = response.data.createAddress; //////////////////////// GraphQL API ////////////////////////\n                //////////////////////// DataStore API ////////////////////////\n                // const address = await DataStore.save(new Address(newAddress));\n                //////////////////////// DataStore API ////////////////////////\n                // console.log(address);\n                // Dispatch - Reducer\n\n                dispatch(slice.actions.createAddress({\n                  address: address\n                }));\n                return _context2.abrupt(\"return\", address);\n\n              case 10:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      function createAddress(_x4, _x5) {\n        return _createAddress2.apply(this, arguments);\n      }\n\n      return createAddress;\n    }()\n  }, {\n    key: \"updateAddress\",\n    value: function () {\n      var _updateAddress2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(editedAddress, dispatch) {\n        var response, address;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.next = 2;\n                return API.graphql({\n                  query: _updateAddress,\n                  variables: {\n                    input: editedAddress\n                  },\n                  authMode: \"AMAZON_COGNITO_USER_POOLS\"\n                });\n\n              case 2:\n                response = _context3.sent;\n                address = response.data.updateAddress; //////////////////////// GraphQL API ////////////////////////\n                // console.log(address);\n                // Dispatch - Reducer\n\n                dispatch(slice.actions.updateAddress({\n                  address: address\n                }));\n                return _context3.abrupt(\"return\", response);\n\n              case 6:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      }));\n\n      function updateAddress(_x6, _x7) {\n        return _updateAddress2.apply(this, arguments);\n      }\n\n      return updateAddress;\n    }()\n  }]);\n\n  return AddressApi;\n}();\n\nexport var addressApi = new AddressApi();","map":{"version":3,"sources":["/Users/pulkitshah/Desktop/truckarv2/renderer/api/address-api.js"],"names":["API","addressesByParty","createAddress","updateAddress","Address","DataStore","Predicates","moment","slice","now","Date","AddressApi","user","party","dispatch","console","log","id","toString","query","c","addresses","actions","getAddresses","createdAddress","createdAt","toISOString","newAddress","graphql","variables","input","authMode","response","address","data","editedAddress","addressApi"],"mappings":";;;;;;;;;;AAAA,SAASA,GAAT,QAAoB,aAApB;AACA,SAASC,gBAAT,QAAiC,oBAAjC;AACA,SAASC,aAAa,IAAbA,cAAT,EAAwBC,aAAa,IAAbA,cAAxB,QAA6C,sBAA7C;AACA,SAASC,OAAT,QAAwB,WAAxB;AACA,SAASC,SAAT,EAAoBC,UAApB,QAAsC,wBAAtC;AACA,OAAOC,MAAP,MAAmB,QAAnB;AACA,SAASC,KAAT,QAAsB,qBAAtB;AAEA,IAAMC,GAAG,GAAG,IAAIC,IAAJ,EAAZ;;IAEMC,U;;;;;;;;0GACqBC,I,EAAMC,K,EAAOC,Q;;;;;;;AAElC;AACAC,gBAAAA,OAAO,CAACC,GAAR,CAAYH,KAAK,CAACI,EAAN,CAASC,QAAT,EAAZ,E,CACA;AACA;AACA;AACA;AACA;AAEA;AAEA;;;uBAEwBb,SAAS,CAACc,KAAV,CAAgBf,OAAhB,EAAyB,UAACgB,CAAD;AAAA,yBAC/CA,CAAC,CAACR,IAAF,CAAO,IAAP,EAAaA,IAAI,CAACK,EAAlB,CAD+C;AAAA,iBAAzB,C;;;AAAlBI,gBAAAA,S;AAIN;AAEAN,gBAAAA,OAAO,CAACC,GAAR,CAAYK,SAAZ,E,CAEA;;AAEAP,gBAAAA,QAAQ,CAACN,KAAK,CAACc,OAAN,CAAcC,YAAd,CAA2BF,SAA3B,CAAD,CAAR;iDAEOA,S;;;;;AAEPN,gBAAAA,OAAO,CAACC,GAAR;;;;;;;;;;;;;;;;;;;uGAIgBQ,c,EAAgBV,Q;;;;;;AAC5BW,gBAAAA,S,GAAYlB,MAAM,GAAGmB,WAAT,E;AACdC,gBAAAA,U,qBAAkBH,c;AACtBG,gBAAAA,UAAU,CAACF,SAAX,GAAuBA,SAAvB;AAEAV,gBAAAA,OAAO,CAACC,GAAR,CAAYW,UAAZ,E,CAEA;;;uBAEuB3B,GAAG,CAAC4B,OAAJ,CAAY;AACjCT,kBAAAA,KAAK,EAAEjB,cAD0B;AAEjC2B,kBAAAA,SAAS,EAAE;AAAEC,oBAAAA,KAAK,EAAEH;AAAT,mBAFsB;AAGjCI,kBAAAA,QAAQ,EAAE;AAHuB,iBAAZ,C;;;AAAjBC,gBAAAA,Q;AAMAC,gBAAAA,O,GAAUD,QAAQ,CAACE,IAAT,CAAchC,a,EAE9B;AAEA;AAEA;AAEA;AAEA;AAEA;;AAEAY,gBAAAA,QAAQ,CAACN,KAAK,CAACc,OAAN,CAAcpB,aAAd,CAA4B;AAAE+B,kBAAAA,OAAO,EAAPA;AAAF,iBAA5B,CAAD,CAAR;kDAEOA,O;;;;;;;;;;;;;;;;;;;uGAGWE,a,EAAerB,Q;;;;;;;uBAGVd,GAAG,CAAC4B,OAAJ,CAAY;AACjCT,kBAAAA,KAAK,EAAEhB,cAD0B;AAEjC0B,kBAAAA,SAAS,EAAE;AAAEC,oBAAAA,KAAK,EAAEK;AAAT,mBAFsB;AAGjCJ,kBAAAA,QAAQ,EAAE;AAHuB,iBAAZ,C;;;AAAjBC,gBAAAA,Q;AAMAC,gBAAAA,O,GAAUD,QAAQ,CAACE,IAAT,CAAc/B,a,EAE9B;AAEA;AAEA;;AAEAW,gBAAAA,QAAQ,CAACN,KAAK,CAACc,OAAN,CAAcnB,aAAd,CAA4B;AAAE8B,kBAAAA,OAAO,EAAPA;AAAF,iBAA5B,CAAD,CAAR;kDAEOD,Q;;;;;;;;;;;;;;;;;;;;;AAIX,OAAO,IAAMI,UAAU,GAAG,IAAIzB,UAAJ,EAAnB","sourcesContent":["import { API } from \"aws-amplify\";\nimport { addressesByParty } from \"../graphql/queries\";\nimport { createAddress, updateAddress } from \"../graphql/mutations\";\nimport { Address } from \"../models\";\nimport { DataStore, Predicates } from \"@aws-amplify/datastore\";\nimport moment from \"moment\";\nimport { slice } from \"../slices/addresses\";\n\nconst now = new Date();\n\nclass AddressApi {\n  async getAddressesByUser(user, party, dispatch) {\n    try {\n      //////////////////////// GraphQL API ////////////////////////\n      console.log(party.id.toString());\n      // const response = await API.graphql({\n      //   query: addressesByParty,\n      //   variables: { partyId: party.id.toString() },\n      // });\n      // const addresses = response.data.addressesByParty.items;\n\n      //////////////////////// GraphQL API ////////////////////////\n\n      //////////////////////// DataStore API ////////////////////////\n\n      const addresses = await DataStore.query(Address, (c) =>\n        c.user(\"eq\", user.id)\n      );\n\n      //////////////////////// DataStore API ////////////////////////\n\n      console.log(addresses);\n\n      // Dispatch - Reducer\n\n      dispatch(slice.actions.getAddresses(addresses));\n\n      return addresses;\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  async createAddress(createdAddress, dispatch) {\n    const createdAt = moment().toISOString();\n    let newAddress = { ...createdAddress };\n    newAddress.createdAt = createdAt;\n\n    console.log(newAddress);\n\n    //////////////////////// GraphQL API ////////////////////////\n\n    const response = await API.graphql({\n      query: createAddress,\n      variables: { input: newAddress },\n      authMode: \"AMAZON_COGNITO_USER_POOLS\",\n    });\n\n    const address = response.data.createAddress;\n\n    //////////////////////// GraphQL API ////////////////////////\n\n    //////////////////////// DataStore API ////////////////////////\n\n    // const address = await DataStore.save(new Address(newAddress));\n\n    //////////////////////// DataStore API ////////////////////////\n\n    // console.log(address);\n\n    // Dispatch - Reducer\n\n    dispatch(slice.actions.createAddress({ address }));\n\n    return address;\n  }\n\n  async updateAddress(editedAddress, dispatch) {\n    //////////////////////// GraphQL API ////////////////////////\n\n    const response = await API.graphql({\n      query: updateAddress,\n      variables: { input: editedAddress },\n      authMode: \"AMAZON_COGNITO_USER_POOLS\",\n    });\n\n    const address = response.data.updateAddress;\n\n    //////////////////////// GraphQL API ////////////////////////\n\n    // console.log(address);\n\n    // Dispatch - Reducer\n\n    dispatch(slice.actions.updateAddress({ address }));\n\n    return response;\n  }\n}\n\nexport const addressApi = new AddressApi();\n"]},"metadata":{},"sourceType":"module"}