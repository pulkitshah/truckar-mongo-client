{"ast":null,"code":"import { API } from \"aws-amplify\";\nimport { organisationsByUser } from \"../graphql/queries\";\nimport { createOrganisation, updateOrganisation } from \"../graphql/mutations\";\nimport { Organisation } from \"../models\";\nimport { DataStore, Predicates } from \"@aws-amplify/datastore\";\nimport moment from \"moment\";\nimport { useAuth } from \"....//hooks/use-auth\";\nconst now = new Date();\nconst {\n  user\n} = useAuth();\nconsole.log(user);\n\nclass OrganisationApi {\n  async getOrganisationsByUser() {\n    try {\n      // const organisationesDB = await API.graphql({\n      //   query: organisationsByUser,\n      //   variables: { user: user.id.toString() },\n      // });\n      // console.log(organisationesDB.data.organisationsByUser.items);\n      const response = await DataStore.query(Organisation, c => c.user(\"eq\", user.id));\n      console.log(response);\n      return response;\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  async createOrganisation(newOrganisation) {\n    const createdAt = moment().toISOString();\n    let org = newOrganisation;\n    org.createdAt = createdAt; // const response2 = await API.graphql({\n    //   query: createOrganisation,\n    //   variables: { input: newOrganisation },\n    //   authMode: \"AMAZON_COGNITO_USER_POOLS\",\n    // });\n\n    const response = await DataStore.save(new Organisation(org));\n    console.log(response);\n    return response;\n  }\n\n  async editOrganisation(editedOrganisation) {\n    const response = await API.graphql({\n      query: updateOrganisation,\n      variables: {\n        input: editedOrganisation\n      },\n      authMode: \"AMAZON_COGNITO_USER_POOLS\"\n    });\n    return response;\n  }\n\n}\n\nexport const organisationApi = new OrganisationApi();","map":{"version":3,"sources":["/Users/pulkitshah/Desktop/truckarv2/renderer/api/organisation-api.js"],"names":["API","organisationsByUser","createOrganisation","updateOrganisation","Organisation","DataStore","Predicates","moment","useAuth","now","Date","user","console","log","OrganisationApi","getOrganisationsByUser","response","query","c","id","error","newOrganisation","createdAt","toISOString","org","save","editOrganisation","editedOrganisation","graphql","variables","input","authMode","organisationApi"],"mappings":"AAAA,SAASA,GAAT,QAAoB,aAApB;AACA,SAASC,mBAAT,QAAoC,oBAApC;AACA,SAASC,kBAAT,EAA6BC,kBAA7B,QAAuD,sBAAvD;AACA,SAASC,YAAT,QAA6B,WAA7B;AACA,SAASC,SAAT,EAAoBC,UAApB,QAAsC,wBAAtC;AACA,OAAOC,MAAP,MAAmB,QAAnB;AACA,SAASC,OAAT,QAAwB,sBAAxB;AAEA,MAAMC,GAAG,GAAG,IAAIC,IAAJ,EAAZ;AACA,MAAM;AAAEC,EAAAA;AAAF,IAAWH,OAAO,EAAxB;AACAI,OAAO,CAACC,GAAR,CAAYF,IAAZ;;AAEA,MAAMG,eAAN,CAAsB;AACpB,QAAMC,sBAAN,GAA+B;AAC7B,QAAI;AACF;AACA;AACA;AACA;AACA;AAEA,YAAMC,QAAQ,GAAG,MAAMX,SAAS,CAACY,KAAV,CAAgBb,YAAhB,EAA+Bc,CAAD,IACnDA,CAAC,CAACP,IAAF,CAAO,IAAP,EAAaA,IAAI,CAACQ,EAAlB,CADqB,CAAvB;AAGAP,MAAAA,OAAO,CAACC,GAAR,CAAYG,QAAZ;AAEA,aAAOA,QAAP;AACD,KAbD,CAaE,OAAOI,KAAP,EAAc;AACdR,MAAAA,OAAO,CAACC,GAAR,CAAYO,KAAZ;AACD;AACF;;AAED,QAAMlB,kBAAN,CAAyBmB,eAAzB,EAA0C;AACxC,UAAMC,SAAS,GAAGf,MAAM,GAAGgB,WAAT,EAAlB;AACA,QAAIC,GAAG,GAAGH,eAAV;AACAG,IAAAA,GAAG,CAACF,SAAJ,GAAgBA,SAAhB,CAHwC,CAKxC;AACA;AACA;AACA;AACA;;AAEA,UAAMN,QAAQ,GAAG,MAAMX,SAAS,CAACoB,IAAV,CAAe,IAAIrB,YAAJ,CAAiBoB,GAAjB,CAAf,CAAvB;AAEAZ,IAAAA,OAAO,CAACC,GAAR,CAAYG,QAAZ;AACA,WAAOA,QAAP;AACD;;AAED,QAAMU,gBAAN,CAAuBC,kBAAvB,EAA2C;AACzC,UAAMX,QAAQ,GAAG,MAAMhB,GAAG,CAAC4B,OAAJ,CAAY;AACjCX,MAAAA,KAAK,EAAEd,kBAD0B;AAEjC0B,MAAAA,SAAS,EAAE;AAAEC,QAAAA,KAAK,EAAEH;AAAT,OAFsB;AAGjCI,MAAAA,QAAQ,EAAE;AAHuB,KAAZ,CAAvB;AAKA,WAAOf,QAAP;AACD;;AA5CmB;;AA+CtB,OAAO,MAAMgB,eAAe,GAAG,IAAIlB,eAAJ,EAAxB","sourcesContent":["import { API } from \"aws-amplify\";\nimport { organisationsByUser } from \"../graphql/queries\";\nimport { createOrganisation, updateOrganisation } from \"../graphql/mutations\";\nimport { Organisation } from \"../models\";\nimport { DataStore, Predicates } from \"@aws-amplify/datastore\";\nimport moment from \"moment\";\nimport { useAuth } from \"....//hooks/use-auth\";\n\nconst now = new Date();\nconst { user } = useAuth();\nconsole.log(user);\n\nclass OrganisationApi {\n  async getOrganisationsByUser() {\n    try {\n      // const organisationesDB = await API.graphql({\n      //   query: organisationsByUser,\n      //   variables: { user: user.id.toString() },\n      // });\n      // console.log(organisationesDB.data.organisationsByUser.items);\n\n      const response = await DataStore.query(Organisation, (c) =>\n        c.user(\"eq\", user.id)\n      );\n      console.log(response);\n\n      return response;\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  async createOrganisation(newOrganisation) {\n    const createdAt = moment().toISOString();\n    let org = newOrganisation;\n    org.createdAt = createdAt;\n\n    // const response2 = await API.graphql({\n    //   query: createOrganisation,\n    //   variables: { input: newOrganisation },\n    //   authMode: \"AMAZON_COGNITO_USER_POOLS\",\n    // });\n\n    const response = await DataStore.save(new Organisation(org));\n\n    console.log(response);\n    return response;\n  }\n\n  async editOrganisation(editedOrganisation) {\n    const response = await API.graphql({\n      query: updateOrganisation,\n      variables: { input: editedOrganisation },\n      authMode: \"AMAZON_COGNITO_USER_POOLS\",\n    });\n    return response;\n  }\n}\n\nexport const organisationApi = new OrganisationApi();\n"]},"metadata":{},"sourceType":"module"}