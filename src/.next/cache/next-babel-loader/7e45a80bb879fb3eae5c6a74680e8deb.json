{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/pulkitshah/Desktop/truckarv2/renderer/components/dashboard/account/account-order-lr-invoice-settings.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useRef, useState } from \"react\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport { useTranslation } from \"react-i18next\";\nimport { toast } from \"react-hot-toast\";\nimport { useFormik, FormikProvider, FieldArray, getIn } from \"formik\";\nimport * as Yup from \"yup\";\nimport { useAuth } from \"../../../hooks/use-auth\";\nimport { Box, Button, Card, CardContent, Checkbox, Divider, Grid, InputAdornment, TextField, Typography } from \"@mui/material\";\nimport { Plus as PlusIcon } from \"../../../icons/plus\";\nexport const AccountOrderLRInvoiceSettings = props => {\n  const {\n    user\n  } = useAuth();\n  const {\n    t\n  } = useTranslation();\n  const formik = useFormik({\n    initialValues: {\n      driverExpensesCategories: [{\n        id: uuidv4(),\n        driverExpenseName: \"\",\n        showDefault: true\n      }]\n    },\n    onSubmit: async (values, helpers) => {\n      try {\n        const newOrder = {\n          deliveries: JSON.stringify(values.driverExpensesCategories)\n        };\n        await orderApi.createOrder(newOrder, dispatch);\n        toast.success(\"Order created!\"); // router.push(\"/dashboard/orders\");\n      } catch (err) {\n        console.error(err);\n        toast.error(\"Something went wrong!\");\n        helpers.setStatus({\n          success: false\n        });\n        helpers.setErrors({\n          submit: err.message\n        });\n        helpers.setSubmitting(false);\n      }\n    }\n  });\n  return /*#__PURE__*/_jsxDEV(\"form\", _objectSpread(_objectSpread({\n    onSubmit: formik.handleSubmit\n  }, props), {}, {\n    children: /*#__PURE__*/_jsxDEV(FormikProvider, {\n      value: formik,\n      children: /*#__PURE__*/_jsxDEV(FieldArray, {\n        name: \"driverExpensesCategories\",\n        error: formik.errors,\n        children: ({\n          remove,\n          push\n        }) => /*#__PURE__*/_jsxDEV(Box, _objectSpread(_objectSpread({\n          sx: {\n            mt: 4\n          }\n        }, props), {}, {\n          children: /*#__PURE__*/_jsxDEV(Card, {\n            children: /*#__PURE__*/_jsxDEV(CardContent, {\n              children: /*#__PURE__*/_jsxDEV(Grid, {\n                container: true,\n                spacing: 3,\n                children: [/*#__PURE__*/_jsxDEV(Grid, {\n                  item: true,\n                  md: 4,\n                  xs: 12,\n                  children: [/*#__PURE__*/_jsxDEV(Typography, {\n                    variant: \"h6\",\n                    children: t(\"Truck Driver Expenses Categories\")\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 67,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                    variant: \"body2\",\n                    color: \"textSecondary\",\n                    children: t(\"Expenses to store the purpose of giving money to driver of own vehicles \")\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 70,\n                    columnNumber: 23\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 66,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(Grid, {\n                  item: true,\n                  md: 8,\n                  xs: 12,\n                  children: [/*#__PURE__*/_jsxDEV(Grid, {\n                    container: true,\n                    spacing: 3,\n                    children: [/*#__PURE__*/_jsxDEV(Grid, {\n                      item: true,\n                      xs: 8,\n                      children: /*#__PURE__*/_jsxDEV(Typography, {\n                        variant: \"body2\",\n                        color: \"textSecondary\",\n                        children: t(\"Truck Driver Expenses Categories\")\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 79,\n                        columnNumber: 27\n                      }, this)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 78,\n                      columnNumber: 25\n                    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n                      item: true,\n                      xs: 4,\n                      children: /*#__PURE__*/_jsxDEV(Typography, {\n                        variant: \"body2\",\n                        color: \"textSecondary\",\n                        children: t(\"Show Default\")\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 84,\n                        columnNumber: 27\n                      }, this)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 83,\n                      columnNumber: 25\n                    }, this), formik.values.driverExpensesCategories.length > 0 && formik.values.driverExpensesCategories.map((delivery, index) => {\n                      const driverExpenseName = `driverExpensesCategories[${index}].driverExpenseName`;\n                      const touchedDriverExpenseName = getIn(formik.touched, driverExpenseName);\n                      const errorDriverExpenseName = getIn(formik.errors, driverExpenseName);\n                      return /*#__PURE__*/_jsxDEV(React.Fragment, {\n                        children: [index > 0 && /*#__PURE__*/_jsxDEV(Divider, {\n                          sx: {\n                            mb: 2\n                          }\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 103,\n                          columnNumber: 49\n                        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n                          item: true,\n                          xs: 8,\n                          className: \"col\",\n                          children: /*#__PURE__*/_jsxDEV(TextField, {\n                            helperText: touchedDriverExpenseName && errorDriverExpenseName ? errorDriverExpenseName : \"\",\n                            error: Boolean(touchedDriverExpenseName && errorDriverExpenseName),\n                            variant: \"outlined\",\n                            onChange: event => {\n                              formik.setFieldValue(`driverExpensesCategories[${index}].driverExpenseName`, event.target.value);\n                            },\n                            onBlur: formik.handleBlur,\n                            id: \"driverExpenseName\",\n                            name: \"driverExpenseName\",\n                            label: \"Expense Name\",\n                            fullWidth: true\n                          }, void 0, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 106,\n                            columnNumber: 37\n                          }, this)\n                        }, index, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 105,\n                          columnNumber: 35\n                        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n                          item: true,\n                          children: /*#__PURE__*/_jsxDEV(Checkbox, {\n                            defaultChecked: true\n                          }, void 0, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 132,\n                            columnNumber: 37\n                          }, this)\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 131,\n                          columnNumber: 35\n                        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n                          item: true,\n                          className: \"col\",\n                          children: /*#__PURE__*/_jsxDEV(Button, {\n                            disabled: index < 1,\n                            color: \"secondary\",\n                            onClick: () => {\n                              setNoOfDeliveries(noOfDeliveries - 1);\n                              remove(index);\n                            },\n                            children: \"Remove\"\n                          }, void 0, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 135,\n                            columnNumber: 37\n                          }, this)\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 134,\n                          columnNumber: 35\n                        }, this)]\n                      }, void 0, true, {\n                        fileName: _jsxFileName,\n                        lineNumber: 102,\n                        columnNumber: 33\n                      }, this);\n                    })]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 77,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(Box, {\n                    p: 2,\n                    display: \"flex\",\n                    justifyContent: \"flex-end\",\n                    children: [/*#__PURE__*/_jsxDEV(Button, {\n                      sx: {\n                        mr: 1\n                      },\n                      variant: \"contained\",\n                      color: \"secondary\",\n                      startIcon: /*#__PURE__*/_jsxDEV(PlusIcon, {\n                        fontSize: \"small\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 157,\n                        columnNumber: 38\n                      }, this),\n                      onClick: () => {\n                        push({\n                          id: uuidv4(),\n                          driverExpenseName: \"\",\n                          showDefault: true\n                        });\n                      },\n                      children: \"Add Expense\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 153,\n                      columnNumber: 25\n                    }, this), /*#__PURE__*/_jsxDEV(Button, {\n                      color: \"secondary\",\n                      type: \"submit\",\n                      variant: \"contained\",\n                      children: \"Save Changes\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 168,\n                      columnNumber: 25\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 152,\n                    columnNumber: 23\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 76,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 65,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 64,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 63,\n            columnNumber: 15\n          }, this)\n        }), void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this)\n  }), void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 5\n  }, this);\n};","map":{"version":3,"sources":["/Users/pulkitshah/Desktop/truckarv2/renderer/components/dashboard/account/account-order-lr-invoice-settings.js"],"names":["React","useRef","useState","v4","uuidv4","useTranslation","toast","useFormik","FormikProvider","FieldArray","getIn","Yup","useAuth","Box","Button","Card","CardContent","Checkbox","Divider","Grid","InputAdornment","TextField","Typography","Plus","PlusIcon","AccountOrderLRInvoiceSettings","props","user","t","formik","initialValues","driverExpensesCategories","id","driverExpenseName","showDefault","onSubmit","values","helpers","newOrder","deliveries","JSON","stringify","orderApi","createOrder","dispatch","success","err","console","error","setStatus","setErrors","submit","message","setSubmitting","handleSubmit","errors","remove","push","mt","length","map","delivery","index","touchedDriverExpenseName","touched","errorDriverExpenseName","mb","Boolean","event","setFieldValue","target","value","handleBlur","setNoOfDeliveries","noOfDeliveries","mr"],"mappings":"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","sourcesContent":["import React, { useRef, useState } from \"react\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport { useTranslation } from \"react-i18next\";\nimport { toast } from \"react-hot-toast\";\nimport { useFormik, FormikProvider, FieldArray, getIn } from \"formik\";\nimport * as Yup from \"yup\";\nimport { useAuth } from \"../../../hooks/use-auth\";\n\nimport {\n  Box,\n  Button,\n  Card,\n  CardContent,\n  Checkbox,\n  Divider,\n  Grid,\n  InputAdornment,\n  TextField,\n  Typography,\n} from \"@mui/material\";\nimport { Plus as PlusIcon } from \"../../../icons/plus\";\n\nexport const AccountOrderLRInvoiceSettings = (props) => {\n  const { user } = useAuth();\n  const { t } = useTranslation();\n\n  const formik = useFormik({\n    initialValues: {\n      driverExpensesCategories: [\n        {\n          id: uuidv4(),\n          driverExpenseName: \"\",\n          showDefault: true,\n        },\n      ],\n    },\n    onSubmit: async (values, helpers) => {\n      try {\n        const newOrder = {\n          deliveries: JSON.stringify(values.driverExpensesCategories),\n        };\n\n        await orderApi.createOrder(newOrder, dispatch);\n\n        toast.success(\"Order created!\");\n        // router.push(\"/dashboard/orders\");\n      } catch (err) {\n        console.error(err);\n        toast.error(\"Something went wrong!\");\n        helpers.setStatus({ success: false });\n        helpers.setErrors({ submit: err.message });\n        helpers.setSubmitting(false);\n      }\n    },\n  });\n\n  return (\n    <form onSubmit={formik.handleSubmit} {...props}>\n      <FormikProvider value={formik}>\n        <FieldArray name=\"driverExpensesCategories\" error={formik.errors}>\n          {({ remove, push }) => (\n            <Box sx={{ mt: 4 }} {...props}>\n              <Card>\n                <CardContent>\n                  <Grid container spacing={3}>\n                    <Grid item md={4} xs={12}>\n                      <Typography variant=\"h6\">\n                        {t(\"Truck Driver Expenses Categories\")}\n                      </Typography>\n                      <Typography variant=\"body2\" color=\"textSecondary\">\n                        {t(\n                          \"Expenses to store the purpose of giving money to driver of own vehicles \"\n                        )}\n                      </Typography>\n                    </Grid>\n                    <Grid item md={8} xs={12}>\n                      <Grid container spacing={3}>\n                        <Grid item xs={8}>\n                          <Typography variant=\"body2\" color=\"textSecondary\">\n                            {t(\"Truck Driver Expenses Categories\")}\n                          </Typography>\n                        </Grid>\n                        <Grid item xs={4}>\n                          <Typography variant=\"body2\" color=\"textSecondary\">\n                            {t(\"Show Default\")}\n                          </Typography>\n                        </Grid>\n\n                        {formik.values.driverExpensesCategories.length > 0 &&\n                          formik.values.driverExpensesCategories.map(\n                            (delivery, index) => {\n                              const driverExpenseName = `driverExpensesCategories[${index}].driverExpenseName`;\n                              const touchedDriverExpenseName = getIn(\n                                formik.touched,\n                                driverExpenseName\n                              );\n                              const errorDriverExpenseName = getIn(\n                                formik.errors,\n                                driverExpenseName\n                              );\n                              return (\n                                <React.Fragment>\n                                  {index > 0 && <Divider sx={{ mb: 2 }} />}\n\n                                  <Grid item xs={8} className=\"col\" key={index}>\n                                    <TextField\n                                      helperText={\n                                        touchedDriverExpenseName &&\n                                        errorDriverExpenseName\n                                          ? errorDriverExpenseName\n                                          : \"\"\n                                      }\n                                      error={Boolean(\n                                        touchedDriverExpenseName &&\n                                          errorDriverExpenseName\n                                      )}\n                                      variant=\"outlined\"\n                                      onChange={(event) => {\n                                        formik.setFieldValue(\n                                          `driverExpensesCategories[${index}].driverExpenseName`,\n                                          event.target.value\n                                        );\n                                      }}\n                                      onBlur={formik.handleBlur}\n                                      id=\"driverExpenseName\"\n                                      name=\"driverExpenseName\"\n                                      label=\"Expense Name\"\n                                      fullWidth\n                                    />\n                                  </Grid>\n                                  <Grid item>\n                                    <Checkbox defaultChecked />\n                                  </Grid>\n                                  <Grid item className=\"col\">\n                                    <Button\n                                      disabled={index < 1}\n                                      color=\"secondary\"\n                                      onClick={() => {\n                                        setNoOfDeliveries(noOfDeliveries - 1);\n                                        remove(index);\n                                      }}\n                                    >\n                                      Remove\n                                    </Button>\n                                  </Grid>\n                                </React.Fragment>\n                              );\n                            }\n                          )}\n                      </Grid>\n\n                      <Box p={2} display=\"flex\" justifyContent=\"flex-end\">\n                        <Button\n                          sx={{ mr: 1 }}\n                          variant=\"contained\"\n                          color=\"secondary\"\n                          startIcon={<PlusIcon fontSize=\"small\" />}\n                          onClick={() => {\n                            push({\n                              id: uuidv4(),\n                              driverExpenseName: \"\",\n                              showDefault: true,\n                            });\n                          }}\n                        >\n                          Add Expense\n                        </Button>\n                        <Button\n                          color=\"secondary\"\n                          type=\"submit\"\n                          variant=\"contained\"\n                        >\n                          Save Changes\n                        </Button>\n                      </Box>\n                    </Grid>\n                  </Grid>\n                </CardContent>\n              </Card>\n            </Box>\n          )}\n        </FieldArray>\n      </FormikProvider>\n    </form>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}