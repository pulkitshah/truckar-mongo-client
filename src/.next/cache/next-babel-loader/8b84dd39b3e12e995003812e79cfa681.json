{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/pulkitshah/Desktop/truckarv2/renderer/components/dashboard/party/party-create-form.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { useState } from \"react\";\nimport { useRouter } from \"next/router\";\nimport toast from \"react-hot-toast\";\nimport * as Yup from \"yup\";\nimport { useFormik } from \"formik\";\nimport { Box, Button, Card, CardContent, Divider, Grid, Switch, TextField, Typography } from \"@mui/material\";\nimport { useAuth } from \"../../../hooks/use-auth\";\nimport { v4 as uuid } from \"uuid\";\nimport { partyApi } from \"../../../api/party-api\";\nimport { useDispatch } from \"../../../store\";\nimport GoogleMaps from \"./google-places-autocomplete\";\nexport const PartyCreateForm = props => {\n  const router = useRouter();\n  const dispatch = useDispatch();\n  const {\n    user\n  } = useAuth();\n  const {\n    0: mobile,\n    1: setMobile\n  } = useState(\"\");\n  const formik = useFormik({\n    initialValues: {\n      name: \"\",\n      mobile: \"\",\n      city: \"\",\n      isTransporter: false\n    },\n    validationSchema: Yup.object().shape({\n      name: Yup.string().max(255).required(\"Name is required\").test(\"Unique Name\", \"A party already exists with this name\", // <- key, message\n      async function (value) {\n        try {\n          const response = await partyApi.validateDuplicateName(value, user);\n          return response;\n        } catch (error) {}\n      }),\n      mobile: Yup.string().matches(/^[6-9]\\d{9}$/, \"Mobile is not valid\").required(\"Mobile is required\").test(\"Unique Mobile\", \"Mobile already in use\", // <- key, message\n      async function (value) {\n        try {\n          const response = await partyApi.validateDuplicateMobile(value, user);\n          return response;\n        } catch (error) {}\n      })\n    }),\n    validateOnChange: false,\n    onSubmit: async (values, helpers) => {\n      try {\n        const newParty = {\n          id: uuid(),\n          name: values.name,\n          mobile: values.mobile,\n          city: JSON.stringify(values.city),\n          user: user.id,\n          isTransporter: values.isTransporter\n        };\n        await partyApi.createParty(newParty, dispatch);\n        toast.success(\"Party created!\"); // router.push(\"/dashboard/parties\");\n      } catch (err) {\n        console.error(err);\n        toast.error(\"Something went wrong!\");\n        helpers.setStatus({\n          success: false\n        });\n        helpers.setErrors({\n          submit: err.message\n        });\n        helpers.setSubmitting(false);\n      }\n    }\n  });\n  return /*#__PURE__*/_jsxDEV(\"form\", _objectSpread(_objectSpread({\n    onSubmit: formik.handleSubmit\n  }, props), {}, {\n    children: [/*#__PURE__*/_jsxDEV(Card, {\n      children: /*#__PURE__*/_jsxDEV(CardContent, {\n        children: /*#__PURE__*/_jsxDEV(Grid, {\n          container: true,\n          spacing: 3,\n          children: [/*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            md: 4,\n            xs: 12,\n            children: /*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"h6\",\n              children: \"Party details\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 100,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 99,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            md: 8,\n            xs: 12,\n            children: /*#__PURE__*/_jsxDEV(Grid, {\n              container: true,\n              spacing: 3,\n              children: [/*#__PURE__*/_jsxDEV(Grid, {\n                item: true,\n                xs: 12,\n                children: /*#__PURE__*/_jsxDEV(TextField, {\n                  error: Boolean(formik.touched.name && formik.errors.name),\n                  helperText: formik.touched.name && formik.errors.name,\n                  fullWidth: true,\n                  label: \"Main contact name\",\n                  name: \"name\",\n                  onBlur: formik.handleBlur,\n                  onChange: event => {\n                    formik.setFieldValue(\"name\", event.target.value.replace(/\\w\\S*/g, function (txt) {\n                      return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();\n                    }));\n                  },\n                  required: true,\n                  value: formik.values.name\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 105,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 104,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Grid, {\n                item: true,\n                md: 6,\n                xs: 12,\n                children: /*#__PURE__*/_jsxDEV(TextField, {\n                  error: Boolean(formik.touched.mobile && formik.errors.mobile),\n                  fullWidth: true,\n                  helperText: formik.touched.mobile && formik.errors.mobile,\n                  label: \"Mobile\",\n                  name: \"mobile\",\n                  onBlur: formik.handleBlur,\n                  onChange: async event => {\n                    formik.setFieldValue(\"mobile\", event.target.value.replace(/ /g, \"\"));\n                  },\n                  value: formik.values.mobile,\n                  variant: \"outlined\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 128,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 127,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Grid, {\n                item: true,\n                md: 6,\n                xs: 12,\n                children: /*#__PURE__*/_jsxDEV(GoogleMaps, {\n                  formik: formik,\n                  error: Boolean(formik.touched.city && formik.errors.city),\n                  label: \"City\",\n                  field: \"city\",\n                  setFieldValue: formik.setFieldValue,\n                  handleBlur: formik.handleBlur,\n                  values: formik.values\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 148,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 147,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Grid, {\n                item: true,\n                xs: 12,\n                children: [/*#__PURE__*/_jsxDEV(Divider, {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 159,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(Box, {\n                  sx: {\n                    alignItems: \"center\",\n                    display: \"flex\",\n                    justifyContent: \"space-between\",\n                    m: 3\n                  },\n                  children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                    children: [/*#__PURE__*/_jsxDEV(Typography, {\n                      variant: \"subtitle1\",\n                      children: \"Is this party a transporter?\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 169,\n                      columnNumber: 23\n                    }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                      color: \"textSecondary\",\n                      sx: {\n                        mt: 1\n                      },\n                      variant: \"body2\",\n                      children: \"Any party who is a transporter can be used for trading and for purchases.\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 172,\n                      columnNumber: 23\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 168,\n                    columnNumber: 21\n                  }, this), /*#__PURE__*/_jsxDEV(Switch, {\n                    checked: formik.values.isTransporter,\n                    color: \"secondary\",\n                    edge: \"start\",\n                    name: \"isTransporter\",\n                    onChange: formik.handleChange,\n                    value: formik.values.isTransporter\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 181,\n                    columnNumber: 21\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 160,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 158,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 103,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 102,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        display: \"flex\",\n        flexWrap: \"wrap\",\n        justifyContent: \"space-between\",\n        mx: -1,\n        mb: -1,\n        mt: 3\n      },\n      children: [/*#__PURE__*/_jsxDEV(Button, {\n        color: \"error\",\n        sx: {\n          m: 1,\n          mr: \"auto\"\n        },\n        children: \"Delete\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        sx: {\n          m: 1\n        },\n        variant: \"outlined\",\n        children: \"Cancel\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 215,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        sx: {\n          m: 1\n        },\n        type: \"submit\",\n        variant: \"contained\",\n        children: \"Create\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 218,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 196,\n      columnNumber: 7\n    }, this)]\n  }), void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 95,\n    columnNumber: 5\n  }, this);\n};","map":{"version":3,"sources":["/Users/pulkitshah/Desktop/truckarv2/renderer/components/dashboard/party/party-create-form.js"],"names":["useState","useRouter","toast","Yup","useFormik","Box","Button","Card","CardContent","Divider","Grid","Switch","TextField","Typography","useAuth","v4","uuid","partyApi","useDispatch","GoogleMaps","PartyCreateForm","props","router","dispatch","user","mobile","setMobile","formik","initialValues","name","city","isTransporter","validationSchema","object","shape","string","max","required","test","value","response","validateDuplicateName","error","matches","validateDuplicateMobile","validateOnChange","onSubmit","values","helpers","newParty","id","JSON","stringify","createParty","success","err","console","setStatus","setErrors","submit","message","setSubmitting","handleSubmit","Boolean","touched","errors","handleBlur","event","setFieldValue","target","replace","txt","charAt","toUpperCase","substr","toLowerCase","alignItems","display","justifyContent","m","mt","handleChange","flexWrap","mx","mb","mr"],"mappings":"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","sourcesContent":["import { useState } from \"react\";\nimport { useRouter } from \"next/router\";\nimport toast from \"react-hot-toast\";\nimport * as Yup from \"yup\";\nimport { useFormik } from \"formik\";\nimport {\n  Box,\n  Button,\n  Card,\n  CardContent,\n  Divider,\n  Grid,\n  Switch,\n  TextField,\n  Typography,\n} from \"@mui/material\";\nimport { useAuth } from \"../../../hooks/use-auth\";\nimport { v4 as uuid } from \"uuid\";\nimport { partyApi } from \"../../../api/party-api\";\nimport { useDispatch } from \"../../../store\";\nimport GoogleMaps from \"./google-places-autocomplete\";\n\nexport const PartyCreateForm = (props) => {\n  const router = useRouter();\n  const dispatch = useDispatch();\n  const { user } = useAuth();\n  const [mobile, setMobile] = useState(\"\");\n\n  const formik = useFormik({\n    initialValues: {\n      name: \"\",\n      mobile: \"\",\n      city: \"\",\n      isTransporter: false,\n    },\n    validationSchema: Yup.object().shape({\n      name: Yup.string()\n        .max(255)\n        .required(\"Name is required\")\n        .test(\n          \"Unique Name\",\n          \"A party already exists with this name\", // <- key, message\n          async function (value) {\n            try {\n              const response = await partyApi.validateDuplicateName(\n                value,\n                user\n              );\n              return response;\n            } catch (error) {}\n          }\n        ),\n      mobile: Yup.string()\n        .matches(/^[6-9]\\d{9}$/, \"Mobile is not valid\")\n        .required(\"Mobile is required\")\n        .test(\n          \"Unique Mobile\",\n          \"Mobile already in use\", // <- key, message\n          async function (value) {\n            try {\n              const response = await partyApi.validateDuplicateMobile(\n                value,\n                user\n              );\n              return response;\n            } catch (error) {}\n          }\n        ),\n    }),\n    validateOnChange: false,\n    onSubmit: async (values, helpers) => {\n      try {\n        const newParty = {\n          id: uuid(),\n          name: values.name,\n          mobile: values.mobile,\n          city: JSON.stringify(values.city),\n          user: user.id,\n          isTransporter: values.isTransporter,\n        };\n        await partyApi.createParty(newParty, dispatch);\n        toast.success(\"Party created!\");\n        // router.push(\"/dashboard/parties\");\n      } catch (err) {\n        console.error(err);\n        toast.error(\"Something went wrong!\");\n        helpers.setStatus({ success: false });\n        helpers.setErrors({ submit: err.message });\n        helpers.setSubmitting(false);\n      }\n    },\n  });\n\n  return (\n    <form onSubmit={formik.handleSubmit} {...props}>\n      <Card>\n        <CardContent>\n          <Grid container spacing={3}>\n            <Grid item md={4} xs={12}>\n              <Typography variant=\"h6\">Party details</Typography>\n            </Grid>\n            <Grid item md={8} xs={12}>\n              <Grid container spacing={3}>\n                <Grid item xs={12}>\n                  <TextField\n                    error={Boolean(formik.touched.name && formik.errors.name)}\n                    helperText={formik.touched.name && formik.errors.name}\n                    fullWidth\n                    label=\"Main contact name\"\n                    name=\"name\"\n                    onBlur={formik.handleBlur}\n                    onChange={(event) => {\n                      formik.setFieldValue(\n                        \"name\",\n                        event.target.value.replace(/\\w\\S*/g, function (txt) {\n                          return (\n                            txt.charAt(0).toUpperCase() +\n                            txt.substr(1).toLowerCase()\n                          );\n                        })\n                      );\n                    }}\n                    required\n                    value={formik.values.name}\n                  />\n                </Grid>\n                <Grid item md={6} xs={12}>\n                  <TextField\n                    error={Boolean(\n                      formik.touched.mobile && formik.errors.mobile\n                    )}\n                    fullWidth\n                    helperText={formik.touched.mobile && formik.errors.mobile}\n                    label=\"Mobile\"\n                    name=\"mobile\"\n                    onBlur={formik.handleBlur}\n                    onChange={async (event) => {\n                      formik.setFieldValue(\n                        \"mobile\",\n                        event.target.value.replace(/ /g, \"\")\n                      );\n                    }}\n                    value={formik.values.mobile}\n                    variant=\"outlined\"\n                  />\n                </Grid>\n                <Grid item md={6} xs={12}>\n                  <GoogleMaps\n                    formik={formik}\n                    error={Boolean(formik.touched.city && formik.errors.city)}\n                    label={\"City\"}\n                    field={\"city\"}\n                    setFieldValue={formik.setFieldValue}\n                    handleBlur={formik.handleBlur}\n                    values={formik.values}\n                  />\n                </Grid>\n                <Grid item xs={12}>\n                  <Divider />\n                  <Box\n                    sx={{\n                      alignItems: \"center\",\n                      display: \"flex\",\n                      justifyContent: \"space-between\",\n                      m: 3,\n                    }}\n                  >\n                    <div>\n                      <Typography variant=\"subtitle1\">\n                        Is this party a transporter?\n                      </Typography>\n                      <Typography\n                        color=\"textSecondary\"\n                        sx={{ mt: 1 }}\n                        variant=\"body2\"\n                      >\n                        Any party who is a transporter can be used for trading\n                        and for purchases.\n                      </Typography>\n                    </div>\n                    <Switch\n                      checked={formik.values.isTransporter}\n                      color=\"secondary\"\n                      edge=\"start\"\n                      name=\"isTransporter\"\n                      onChange={formik.handleChange}\n                      value={formik.values.isTransporter}\n                    />\n                  </Box>\n                </Grid>\n              </Grid>\n            </Grid>\n          </Grid>\n        </CardContent>\n      </Card>\n      <Box\n        sx={{\n          display: \"flex\",\n          flexWrap: \"wrap\",\n          justifyContent: \"space-between\",\n          mx: -1,\n          mb: -1,\n          mt: 3,\n        }}\n      >\n        <Button\n          color=\"error\"\n          sx={{\n            m: 1,\n            mr: \"auto\",\n          }}\n        >\n          Delete\n        </Button>\n        <Button sx={{ m: 1 }} variant=\"outlined\">\n          Cancel\n        </Button>\n        <Button sx={{ m: 1 }} type=\"submit\" variant=\"contained\">\n          Create\n        </Button>\n      </Box>\n    </form>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}