{"ast":null,"code":"import { API } from \"aws-amplify\";\nimport { vehiclesByUser } from \"../graphql/queries\";\nimport { createVehicle, updateVehicle } from \"../graphql/mutations\";\nimport { Vehicle } from \"../models\";\nimport { DataStore, Predicates } from \"@aws-amplify/datastore\";\nimport moment from \"moment\";\nimport { slice } from \"../slices/vehicles\";\nconst now = new Date();\n\nclass VehicleApi {\n  async getVehiclesByUser(user, dispatch) {\n    try {\n      //////////////////////// GraphQL API ////////////////////////\n      // const response = await API.graphql({\n      //   query: vehiclesByUser,\n      //   variables: { user: user.id.toString() },\n      // });\n      // const vehicles = response.data.vehiclesByUser.items\n      //////////////////////// GraphQL API ////////////////////////\n      //////////////////////// DataStore API ////////////////////////\n      const vehicles = await DataStore.query(Vehicle, c => c.user(\"eq\", user.id)); //////////////////////// DataStore API ////////////////////////\n\n      console.log(vehicles); // Dispatch - Reducer\n\n      dispatch(slice.actions.getVehicles(vehicles));\n      return vehicles;\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  async createVehicle(newVehicle, dispatch) {\n    const createdAt = moment().toISOString();\n    let newOrg = newVehicle;\n    newOrg.createdAt = createdAt; //////////////////////// GraphQL API ////////////////////////\n\n    const response = await API.graphql({\n      query: createVehicle,\n      variables: {\n        input: newOrg\n      },\n      authMode: \"AMAZON_COGNITO_USER_POOLS\"\n    });\n    const vehicle = response.data.createVehicle; //////////////////////// GraphQL API ////////////////////////\n    //////////////////////// DataStore API ////////////////////////\n    // const vehicle = await DataStore.save(new Vehicle(newOrg));\n    //////////////////////// DataStore API ////////////////////////\n\n    console.log(vehicle); // Dispatch - Reducer\n\n    dispatch(slice.actions.createVehicle({\n      vehicle\n    }));\n    return vehicle;\n  }\n\n  async updateVehicle(editedVehicle, dispatch) {\n    //////////////////////// GraphQL API ////////////////////////\n    const response = await API.graphql({\n      query: updateVehicle,\n      variables: {\n        input: editedVehicle\n      },\n      authMode: \"AMAZON_COGNITO_USER_POOLS\"\n    });\n    const vehicle = response.data.updateVehicle; //////////////////////// GraphQL API ////////////////////////\n    // console.log(vehicle);\n    // Dispatch - Reducer\n\n    dispatch(slice.actions.updateVehicle({\n      vehicle\n    }));\n    return response;\n  }\n\n}\n\nexport const vehicleApi = new VehicleApi();","map":{"version":3,"sources":["/Users/pulkitshah/Desktop/truckarv2/renderer/api/vehicle-api.js"],"names":["API","vehiclesByUser","createVehicle","updateVehicle","Vehicle","DataStore","Predicates","moment","slice","now","Date","VehicleApi","getVehiclesByUser","user","dispatch","vehicles","query","c","id","console","log","actions","getVehicles","error","newVehicle","createdAt","toISOString","newOrg","response","graphql","variables","input","authMode","vehicle","data","editedVehicle","vehicleApi"],"mappings":"AAAA,SAASA,GAAT,QAAoB,aAApB;AACA,SAASC,cAAT,QAA+B,oBAA/B;AACA,SAASC,aAAT,EAAwBC,aAAxB,QAA6C,sBAA7C;AACA,SAASC,OAAT,QAAwB,WAAxB;AACA,SAASC,SAAT,EAAoBC,UAApB,QAAsC,wBAAtC;AACA,OAAOC,MAAP,MAAmB,QAAnB;AACA,SAASC,KAAT,QAAsB,oBAAtB;AAEA,MAAMC,GAAG,GAAG,IAAIC,IAAJ,EAAZ;;AAEA,MAAMC,UAAN,CAAiB;AACf,QAAMC,iBAAN,CAAwBC,IAAxB,EAA8BC,QAA9B,EAAwC;AACtC,QAAI;AACF;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA,YAAMC,QAAQ,GAAG,MAAMV,SAAS,CAACW,KAAV,CAAgBZ,OAAhB,EAA0Ba,CAAD,IAC9CA,CAAC,CAACJ,IAAF,CAAO,IAAP,EAAaA,IAAI,CAACK,EAAlB,CADqB,CAAvB,CAbE,CAiBF;;AAEAC,MAAAA,OAAO,CAACC,GAAR,CAAYL,QAAZ,EAnBE,CAqBF;;AAEAD,MAAAA,QAAQ,CAACN,KAAK,CAACa,OAAN,CAAcC,WAAd,CAA0BP,QAA1B,CAAD,CAAR;AAEA,aAAOA,QAAP;AACD,KA1BD,CA0BE,OAAOQ,KAAP,EAAc;AACdJ,MAAAA,OAAO,CAACC,GAAR,CAAYG,KAAZ;AACD;AACF;;AAED,QAAMrB,aAAN,CAAoBsB,UAApB,EAAgCV,QAAhC,EAA0C;AACxC,UAAMW,SAAS,GAAGlB,MAAM,GAAGmB,WAAT,EAAlB;AACA,QAAIC,MAAM,GAAGH,UAAb;AACAG,IAAAA,MAAM,CAACF,SAAP,GAAmBA,SAAnB,CAHwC,CAKxC;;AAEA,UAAMG,QAAQ,GAAG,MAAM5B,GAAG,CAAC6B,OAAJ,CAAY;AACjCb,MAAAA,KAAK,EAAEd,aAD0B;AAEjC4B,MAAAA,SAAS,EAAE;AAAEC,QAAAA,KAAK,EAAEJ;AAAT,OAFsB;AAGjCK,MAAAA,QAAQ,EAAE;AAHuB,KAAZ,CAAvB;AAMA,UAAMC,OAAO,GAAGL,QAAQ,CAACM,IAAT,CAAchC,aAA9B,CAbwC,CAexC;AAEA;AAEA;AAEA;;AAEAiB,IAAAA,OAAO,CAACC,GAAR,CAAYa,OAAZ,EAvBwC,CAyBxC;;AAEAnB,IAAAA,QAAQ,CAACN,KAAK,CAACa,OAAN,CAAcnB,aAAd,CAA4B;AAAE+B,MAAAA;AAAF,KAA5B,CAAD,CAAR;AAEA,WAAOA,OAAP;AACD;;AAED,QAAM9B,aAAN,CAAoBgC,aAApB,EAAmCrB,QAAnC,EAA6C;AAC3C;AAEA,UAAMc,QAAQ,GAAG,MAAM5B,GAAG,CAAC6B,OAAJ,CAAY;AACjCb,MAAAA,KAAK,EAAEb,aAD0B;AAEjC2B,MAAAA,SAAS,EAAE;AAAEC,QAAAA,KAAK,EAAEI;AAAT,OAFsB;AAGjCH,MAAAA,QAAQ,EAAE;AAHuB,KAAZ,CAAvB;AAMA,UAAMC,OAAO,GAAGL,QAAQ,CAACM,IAAT,CAAc/B,aAA9B,CAT2C,CAW3C;AAEA;AAEA;;AAEAW,IAAAA,QAAQ,CAACN,KAAK,CAACa,OAAN,CAAclB,aAAd,CAA4B;AAAE8B,MAAAA;AAAF,KAA5B,CAAD,CAAR;AAEA,WAAOL,QAAP;AACD;;AArFc;;AAwFjB,OAAO,MAAMQ,UAAU,GAAG,IAAIzB,UAAJ,EAAnB","sourcesContent":["import { API } from \"aws-amplify\";\nimport { vehiclesByUser } from \"../graphql/queries\";\nimport { createVehicle, updateVehicle } from \"../graphql/mutations\";\nimport { Vehicle } from \"../models\";\nimport { DataStore, Predicates } from \"@aws-amplify/datastore\";\nimport moment from \"moment\";\nimport { slice } from \"../slices/vehicles\";\n\nconst now = new Date();\n\nclass VehicleApi {\n  async getVehiclesByUser(user, dispatch) {\n    try {\n      //////////////////////// GraphQL API ////////////////////////\n\n      // const response = await API.graphql({\n      //   query: vehiclesByUser,\n      //   variables: { user: user.id.toString() },\n      // });\n      // const vehicles = response.data.vehiclesByUser.items\n\n      //////////////////////// GraphQL API ////////////////////////\n\n      //////////////////////// DataStore API ////////////////////////\n\n      const vehicles = await DataStore.query(Vehicle, (c) =>\n        c.user(\"eq\", user.id)\n      );\n\n      //////////////////////// DataStore API ////////////////////////\n\n      console.log(vehicles);\n\n      // Dispatch - Reducer\n\n      dispatch(slice.actions.getVehicles(vehicles));\n\n      return vehicles;\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  async createVehicle(newVehicle, dispatch) {\n    const createdAt = moment().toISOString();\n    let newOrg = newVehicle;\n    newOrg.createdAt = createdAt;\n\n    //////////////////////// GraphQL API ////////////////////////\n\n    const response = await API.graphql({\n      query: createVehicle,\n      variables: { input: newOrg },\n      authMode: \"AMAZON_COGNITO_USER_POOLS\",\n    });\n\n    const vehicle = response.data.createVehicle;\n\n    //////////////////////// GraphQL API ////////////////////////\n\n    //////////////////////// DataStore API ////////////////////////\n\n    // const vehicle = await DataStore.save(new Vehicle(newOrg));\n\n    //////////////////////// DataStore API ////////////////////////\n\n    console.log(vehicle);\n\n    // Dispatch - Reducer\n\n    dispatch(slice.actions.createVehicle({ vehicle }));\n\n    return vehicle;\n  }\n\n  async updateVehicle(editedVehicle, dispatch) {\n    //////////////////////// GraphQL API ////////////////////////\n\n    const response = await API.graphql({\n      query: updateVehicle,\n      variables: { input: editedVehicle },\n      authMode: \"AMAZON_COGNITO_USER_POOLS\",\n    });\n\n    const vehicle = response.data.updateVehicle;\n\n    //////////////////////// GraphQL API ////////////////////////\n\n    // console.log(vehicle);\n\n    // Dispatch - Reducer\n\n    dispatch(slice.actions.updateVehicle({ vehicle }));\n\n    return response;\n  }\n}\n\nexport const vehicleApi = new VehicleApi();\n"]},"metadata":{},"sourceType":"module"}