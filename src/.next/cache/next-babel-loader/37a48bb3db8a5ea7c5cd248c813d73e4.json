{"ast":null,"code":"import { createElement as _createElement } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/pulkitshah/Desktop/truckarv2/renderer/components/dashboard/autocompletes/vehicle-autocomplete/vehicle-autocomplete.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useState, useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { useDispatch } from \"../../../../store\";\nimport { vehicleNumberFormatter } from \"../../../../utils/customFormatters\";\nimport { Autocomplete, Divider, Grid, TextField } from \"@mui/material\";\nimport { vehicleApi } from \"../../../../api/vehicle-api\";\n\nconst VehicleAutocomplete = ({\n  className,\n  touched,\n  setFieldValue,\n  errors,\n  handleBlur,\n  setSelectedVehicle,\n  setDriver,\n  currentValue,\n  user\n}) => {\n  const dispatch = useDispatch();\n  const {\n    0: open,\n    1: setOpen\n  } = useState(false);\n  const {\n    0: vehicles,\n    1: setVehicles\n  } = useState([]);\n  const [value, setValue] = React.useState(currentValue);\n  const [inputValue, setInputValue] = React.useState(typeof currentValue === \"object\" ? `${currentValue.vehicleNumber}` : currentValue);\n  useEffect(async () => {\n    try {\n      const vehiclesDB = await vehicleApi.getVehiclesByUser(user, dispatch);\n      setVehicles(vehiclesDB);\n    } catch (error) {\n      console.log(error);\n    }\n  }, []);\n\n  const handleOnChange = async (event, newValue) => {\n    setValue(newValue);\n    setSelectedVehicle(newValue);\n    setFieldValue(\"vehicle\", newValue);\n\n    try {\n      if (newValue !== null && typeof newValue === \"object\" && newValue !== null) {\n        let response = \"await axios.get(`/api/drivers/vehicle/${newValue._id}`);\";\n        setDriver(response.data);\n      } else {\n        setSelectedVehicle(\"\");\n        setFieldValue(\"driver\", \"\");\n      }\n    } catch (error) {\n      setFieldValue(\"driver\", \"\");\n      console.log(error);\n    }\n  };\n\n  const handleInputChange = (event, newInputValue) => {\n    setInputValue(newInputValue);\n    setSelectedVehicle(newInputValue);\n    setFieldValue(\"vehicle\", newInputValue);\n\n    try {\n      if (newInputValue !== null && typeof newInputValue === \"object\" && newInputValue !== null) {// axios\n        //   .get(`/api/drivers/vehicle/${newInputValue._id}`)\n        //   .then(({ data }) => {\n        //     setDriver(data);\n        //   });\n      } else {\n        setSelectedVehicle(\"\");\n      }\n    } catch (error) {\n      setFieldValue(\"driver\", \"\");\n      console.log(error);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(Grid, {\n    item: true,\n    children: /*#__PURE__*/_jsxDEV(Autocomplete, {\n      freeSolo: true,\n      autoSelect: true,\n      blurOnSelect: true,\n      id: \"vehicle\",\n      open: open,\n      onOpen: () => {\n        setOpen(true);\n      },\n      onClose: () => {\n        setOpen(false);\n      },\n      getOptionLabel: option => {\n        if (option.vehicleNumber) {\n          return option.vehicleNumber;\n        } else {\n          return option.toUpperCase();\n        }\n      },\n      options: vehicles,\n      value: value,\n      onChange: handleOnChange,\n      inputValue: inputValue,\n      onInputChange: handleInputChange,\n      renderOption: (props, option) => {\n        return /*#__PURE__*/_jsxDEV(React.Fragment, {\n          children: /*#__PURE__*/_createElement(\"li\", _objectSpread(_objectSpread({}, props), {}, {\n            key: option.id,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 115,\n              columnNumber: 15\n            },\n            __self: this\n          }), option.vehicleNumber, /*#__PURE__*/_jsxDEV(Divider, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 117,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 13\n        }, this);\n      },\n      fullWidth: true,\n      renderInput: params => /*#__PURE__*/_jsxDEV(TextField, _objectSpread(_objectSpread({}, params), {}, {\n        name: \"vehicle\",\n        label: \"Vehicle\",\n        variant: \"outlined\",\n        error: Boolean(touched.vehicle && errors.vehicle),\n        fullWidth: true,\n        helperText: touched.vehicle && errors.vehicle,\n        onBlur: handleBlur,\n        InputProps: _objectSpread(_objectSpread({}, params.InputProps), {}, {\n          inputComponent: vehicleNumberFormatter,\n          endAdornment: /*#__PURE__*/_jsxDEV(React.Fragment, {\n            children: params.InputProps.endAdornment\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 137,\n            columnNumber: 17\n          }, this)\n        })\n      }), void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 87,\n    columnNumber: 5\n  }, this);\n};\n\nVehicleAutocomplete.propTypes = {\n  className: PropTypes.string\n};\nexport default VehicleAutocomplete;","map":{"version":3,"sources":["/Users/pulkitshah/Desktop/truckarv2/renderer/components/dashboard/autocompletes/vehicle-autocomplete/vehicle-autocomplete.js"],"names":["React","useState","useEffect","PropTypes","useDispatch","vehicleNumberFormatter","Autocomplete","Divider","Grid","TextField","vehicleApi","VehicleAutocomplete","className","touched","setFieldValue","errors","handleBlur","setSelectedVehicle","setDriver","currentValue","user","dispatch","open","setOpen","vehicles","setVehicles","value","setValue","inputValue","setInputValue","vehicleNumber","vehiclesDB","getVehiclesByUser","error","console","log","handleOnChange","event","newValue","response","data","handleInputChange","newInputValue","option","toUpperCase","props","id","params","Boolean","vehicle","InputProps","inputComponent","endAdornment","propTypes","string"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { useDispatch } from \"../../../../store\";\nimport { vehicleNumberFormatter } from \"../../../../utils/customFormatters\";\nimport { Autocomplete, Divider, Grid, TextField } from \"@mui/material\";\nimport { vehicleApi } from \"../../../../api/vehicle-api\";\n\nconst VehicleAutocomplete = ({\n  className,\n  touched,\n  setFieldValue,\n  errors,\n  handleBlur,\n  setSelectedVehicle,\n  setDriver,\n  currentValue,\n  user,\n}) => {\n  const dispatch = useDispatch();\n  const [open, setOpen] = useState(false);\n  const [vehicles, setVehicles] = useState([]);\n  const [value, setValue] = React.useState(currentValue);\n  const [inputValue, setInputValue] = React.useState(\n    typeof currentValue === \"object\"\n      ? `${currentValue.vehicleNumber}`\n      : currentValue\n  );\n\n  useEffect(async () => {\n    try {\n      const vehiclesDB = await vehicleApi.getVehiclesByUser(user, dispatch);\n      setVehicles(vehiclesDB);\n    } catch (error) {\n      console.log(error);\n    }\n  }, []);\n\n  const handleOnChange = async (event, newValue) => {\n    setValue(newValue);\n    setSelectedVehicle(newValue);\n    setFieldValue(\"vehicle\", newValue);\n    try {\n      if (\n        newValue !== null &&\n        typeof newValue === \"object\" &&\n        newValue !== null\n      ) {\n        let response =\n          \"await axios.get(`/api/drivers/vehicle/${newValue._id}`);\";\n        setDriver(response.data);\n      } else {\n        setSelectedVehicle(\"\");\n        setFieldValue(\"driver\", \"\");\n      }\n    } catch (error) {\n      setFieldValue(\"driver\", \"\");\n      console.log(error);\n    }\n  };\n\n  const handleInputChange = (event, newInputValue) => {\n    setInputValue(newInputValue);\n    setSelectedVehicle(newInputValue);\n    setFieldValue(\"vehicle\", newInputValue);\n    try {\n      if (\n        newInputValue !== null &&\n        typeof newInputValue === \"object\" &&\n        newInputValue !== null\n      ) {\n        // axios\n        //   .get(`/api/drivers/vehicle/${newInputValue._id}`)\n        //   .then(({ data }) => {\n        //     setDriver(data);\n        //   });\n      } else {\n        setSelectedVehicle(\"\");\n      }\n    } catch (error) {\n      setFieldValue(\"driver\", \"\");\n\n      console.log(error);\n    }\n  };\n\n  return (\n    <Grid item>\n      <Autocomplete\n        freeSolo\n        autoSelect={true}\n        blurOnSelect={true}\n        id=\"vehicle\"\n        open={open}\n        onOpen={() => {\n          setOpen(true);\n        }}\n        onClose={() => {\n          setOpen(false);\n        }}\n        getOptionLabel={(option) => {\n          if (option.vehicleNumber) {\n            return option.vehicleNumber;\n          } else {\n            return option.toUpperCase();\n          }\n        }}\n        options={vehicles}\n        value={value}\n        onChange={handleOnChange}\n        inputValue={inputValue}\n        onInputChange={handleInputChange}\n        renderOption={(props, option) => {\n          return (\n            <React.Fragment>\n              <li {...props} key={option.id}>\n                {option.vehicleNumber}\n                <Divider />\n              </li>\n            </React.Fragment>\n          );\n        }}\n        fullWidth\n        renderInput={(params) => (\n          <TextField\n            {...params}\n            name=\"vehicle\"\n            label=\"Vehicle\"\n            variant=\"outlined\"\n            error={Boolean(touched.vehicle && errors.vehicle)}\n            fullWidth\n            helperText={touched.vehicle && errors.vehicle}\n            onBlur={handleBlur}\n            InputProps={{\n              ...params.InputProps,\n              inputComponent: vehicleNumberFormatter,\n              endAdornment: (\n                <React.Fragment>\n                  {params.InputProps.endAdornment}\n                </React.Fragment>\n              ),\n            }}\n          />\n        )}\n      />\n    </Grid>\n  );\n};\n\nVehicleAutocomplete.propTypes = {\n  className: PropTypes.string,\n};\n\nexport default VehicleAutocomplete;\n"]},"metadata":{},"sourceType":"module"}